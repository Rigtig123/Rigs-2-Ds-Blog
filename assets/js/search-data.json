{
  
    
        "post0": {
            "title": "Playing around with Java Script",
            "content": "Math.round(93.5); . 94 . const removeDuplicates = (arr) =&gt; [...new Set(arr)] removeDuplicates([31, 56, 12, 31, 45, 12, 31]) //[ 31, 56, 12, 45 ] . [ 31, 56, 12, 45 ] . const dayDif = (date1, date2) =&gt; Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000) dayDif(new Date(&quot;2022-09-30&quot;), new Date(&quot;2022-10-13&quot;)) . 13 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/05/25/Playing-around-Java-Script-copy.html",
            "relUrl": "/jupyter/2023/05/25/Playing-around-Java-Script-copy.html",
            "date": " • May 25, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Vocab and Agile Notes",
            "content": "",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/05/25/NATM.html",
            "relUrl": "/2023/05/25/NATM.html",
            "date": " • May 25, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Python Lists and Dictionaries",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Luke Riggins&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 17 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] # *I added bash as a language* print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) # *I changed the index from 0 to 3 so that the print command will print Bash instead of Python* print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Luke Riggins &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 17 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Luke Riggins&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Luke Riggins &lt;class &#39;str&#39;&gt; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Nyguen&quot;, &quot;DOB&quot;: &quot;October 3&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;EthanN45233@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;luker56233@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Volkswagon Passat&quot;] }) # PUTTING MY INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;Rancho Bernardo&quot;, &quot;Email&quot;: &quot;luke120204@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota&quot;] }) # PUTTING MY PARTER&#39;S INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Jeffery&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;jefferyl56783@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Honda Accord&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Nyguen&#39;, &#39;DOB&#39;: &#39;October 3&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;EthanN45233@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;luker56233@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Volkswagon Passat&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;Rancho Bernardo&#39;, &#39;Email&#39;: &#39;luke120204@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota&#39;]}, {&#39;FirstName&#39;: &#39;Jeffery&#39;, &#39;LastName&#39;: &#39;Lee&#39;, &#39;DOB&#39;: &#39;December 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;jefferyl56783@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Honda Accord&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Formatted output of List/Dictionary - for loop . Prepare a function to format the data . | Prepare a function to iterate through the list . | Activate your function . | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Alternate Methods for iteration . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Creating a For Loop with Index . for indx, record in enumerate(InfoDb): print(&quot;Record #&quot; + str(indx+1) + &quot;: &quot;, end = &quot;&quot;) print_data(record) . Record #1: Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Record #2: Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Record #3: Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Record #4: Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Reverse Order . for record in reversed(InfoDb): print_data(record) . Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/05/25/Dcitionaries-Lists-and-Dictionaries.html",
            "relUrl": "/jupyter/2023/05/25/Dcitionaries-Lists-and-Dictionaries.html",
            "date": " • May 25, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] trees = [ [&quot; &quot;, &quot; &quot;, 0, &quot; &quot;, &quot; &quot;], [&quot; &quot;, 0, 0, 0, &quot; &quot;], [0, 0, 0, 0, 0], [&quot; &quot;, &quot; &quot;, 0, &quot; &quot;, &quot; &quot;] ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers], [&quot;Tree&quot;, trees] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Tree 4 x ~5 Classic nested loops using ij indexes 0 0 0 0 0 0 0 0 0 0 Enhanced nested for loops 0 0 0 0 0 0 0 0 0 0 For loop with shortcut (*) row expansion 0 0 0 0 0 0 0 0 0 0 . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 3; var cols = 4; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i]=[]; for (var j = 0; j &lt; cols; j++) { arr2D[i][j] = &quot;r:&quot; + i + &quot;c:&quot; + j; } } console.log(arr2D); element.append(arr2D); . %%js var arr2D = []; var rows = 3; var cols = 5; for (var i = 0; i &lt; rows; i++) { arr2D[i] = []; for (var j = 0; j &lt; cols; j++) { if (j &gt;= Math.floor(cols / 2) - i &amp;&amp; j &lt;= Math.floor(cols / 2) + i) { arr2D[i][j] = &quot;*&quot;; } else { arr2D[i][j] = &quot; &quot;; } } } for (var i = 0; i &lt; arr2D.length; i++) { console.log(arr2D[i].join(&quot;&quot;)); } console.log(arr2D); element.append(arr2D); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) vertical_monkeys = [] for row in range(i - 1, -1, -1): # Iterate over the parts of the monkey row for col in range(len(monkeys[row])): # Append each part of the monkey row to the corresponding index in vertical_monkeys if len(vertical_monkeys) &lt;= col: vertical_monkeys.append(&quot;&quot;) vertical_monkeys[col] += monkeys[row][col] # Print the vertical representation of all monkeys on the same line for row in vertical_monkeys: print(row) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(2) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; - &quot;) print(sp + &quot; (*) &quot;) print(sp + &quot; (=) &quot;) print(sp + &quot; (=) &quot;) print(sp + &quot; o&gt;=X= &quot;) print(SHIP_COLOR, end=&quot;&quot;) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . - (*) (=) (=) o&gt;=X= .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Sorting Algorithms",
            "content": "wget link . import random numbers = [] for i in range(10): numbers.append(random.randint(0,100)) print(&quot;Random List&quot;) print(numbers) print(&quot;Sorted List&quot;) numbers = sorted(numbers) print(numbers) . Random List [25, 1, 98, 90, 99, 48, 25, 35, 44, 76] Sorted List [1, 25, 25, 35, 44, 48, 76, 90, 98, 99] . Warm Up . Discuss with a partner... What are some strategies you would use to sort this list? (Don&#39;t worry about writing code for now) . Put the list in order | Could be ascending or descending order | Find smallest value and put it at one end and then continue | . Explore . Get into groups of 3 . We will be focusing on 4 algorithms today. . We will look at the first one together, Bubble Sort . What is happening with this sort? . In this sort, the algorithm checks each value and moves the largest value to the right. It keeps on moving the value until there is a value which is not greater than the values on the right. | This sorts based on largest value, moving them towards the right side. | . In your groups you will each choose to be an expert on a sorting algorithm. Merge, Selection, and Insertion. Take about 5 minutes to read about your algorithm (Geek for Geeks linked below) and be ready to explain it to your other group members. . Merge . Selection . Insertion . Practice . [75, 17, 46, 80, 67, 45, 69, 79, 40, 0] . How would you sort this list with... . Bubble Sort Bubble sort works by switching elements of a list which are right next to each other. It starts with the first two indices and then keeps on moving up until the last index of the list is the greatest. This repeats until the entire list is sorted. In this case, 75 and 17 are first compared and swaps the position of 17 and 75. The list keeps on moving with 75, until a greater value is found, swapping the larger value index number with the smaller number index number. This steps repeats until the list is in order. | . | Selection Sort In selection sort, the first value is set to be the smallest value. The algorithm goes through the entire list and checks for the smallest value. If one is found, it is set as the minimum value and the index numbers are swapped, putting the smallest one at index 1. The list keeps on repeating for every index, finding where each element would go. This list would set 75 as the minimum value and then check for the smallest one in the list, which would be 0, repeating until the list is in order.Explain. . | . | . [88, 39, 53, 39, 58, 43, 74, 81, 71, 51] . How would you sort this list with... . Merge Sort Merge sort works by splitting the list into shorter lists and sorting these shorter lists and then merging together and sorting the final list. First of all, the list is divided into smaller lists until the sublist has 1 or fewer elements in it. Then for each sublist, the elements are sorted. Finally, the smaller lists are merged and sorted finally to produce the original list in a sorted form. For this example, the list would first be split into parts of [88, 39, 53, 39, 58] and [43, 74, 81, 71, 51], then split up some more until there is one index or less in the sublists. Then, these sublists are sorted and then merged to get the final sorted list. | . | Insertion Sort The insertion sort checks a sorted part of a list with an unsorted element and then inserts the element in the correct place. Insertion sort first assumes that the first element of the list is sorted and then checks the following element to add to the &quot;sorted&quot; list. For this case, it would start at 88 and assume 88 is sorted and then check whether 39 should go after or before 39. This keeps on repeating until the entire list is sorted.Explain. . | . | . Sorting Words . Sorting strings works in the same way as integers. Using your expertise algorithm, sort the following list of random words. . import nltk import random nltk.download(&#39;words&#39;) # Download the word list (only required once) from nltk.corpus import words english_words = words.words() #print(len(english_words)) # Prints the number of words in the list # You can now use the &#39;english_words&#39; list in your code def selection_sort(strings): for i in range(len(strings)): min_idx = i for j in range(i + 1, len(strings)): if strings[j] &lt; strings[min_idx]: min_idx = j strings[i], strings[min_idx] = strings[min_idx], strings[i] return strings words = [] for i in range(10): words.append(english_words[random.randint(0,len(english_words))]) print(&quot;Random List&quot;) print(words) print(selection_sort(words)) . [nltk_data] Downloading package words to /Users/poonam/nltk_data... [nltk_data] Package words is already up-to-date! . Random List [&#39;rookish&#39;, &#39;concretize&#39;, &#39;churm&#39;, &#39;unspring&#39;, &#39;angrite&#39;, &#39;polygam&#39;, &#39;gayal&#39;, &#39;Onchidium&#39;, &#39;antitheft&#39;, &#39;awkwardness&#39;] [&#39;Onchidium&#39;, &#39;angrite&#39;, &#39;antitheft&#39;, &#39;awkwardness&#39;, &#39;churm&#39;, &#39;concretize&#39;, &#39;gayal&#39;, &#39;polygam&#39;, &#39;rookish&#39;, &#39;unspring&#39;] . Discuss . Answer the following with your group. . When should you use each algorithm? What makes an algorithm the right choice? | Given the following lists... [0, 2, 6, 4, 8, 10] | [Elephant, Banana, Cat, Dog, Apple] | [29, 13, 83, 47, 32, 78, 100, 60, 65, 15, 24, 9, 40, 68, 53, 8, 90, 58, 39, 32, 34, 91, 74, 94, 49, 87, 34, 87, 23, 17, 27, 2, 38, 58, 84, 15, 9, 46, 74, 40, 44, 8, 55, 28, 81, 92, 81, 88, 53, 38, 19, 21, 9, 54, 21, 67, 3, 41, 3, 74, 13, 71, 70, 45, 5, 36, 80, 64, 97, 86, 73, 74, 94, 79, 49, 32, 20, 68, 64, 69, 1, 77, 31, 56, 100, 80, 48, 75, 85, 93, 67, 57, 26, 56, 43, 53, 59, 28, 67, 50] Select the algorithm you believe is best for each, explain. | . | . HACKS . Provided below is a Bubble Sort Algorithm sorting a list of dictionaries based off of selected key. . Now it&#39;s time to do some coding... . | Run code and then research and answer these questions... . Is a list and/or dictionary in python considered a primitive or collection type? Why? Lists and dictionaries are considered to be collection types in python. This is because lists and dictionaries can store multiple values of data in them, while primitives hold only one specific piece. Lists hold multiple elements and dictionaries hold multiple key-value pairs. | . | Is the list passed into bubble sort &quot;pass-by-value&quot; or &quot;pass-by-reference? Describe why in relation to output. This code is pass-by-reference. This is because the bubble sort algorithm will alter the actual list, thanks to the swap code. This is seen by the output as the original list is changed based on the key sorted by, and the sorted list is not separate from the original list. | . | . | Implement new cell(s) and/or organize cells to do the following. . Create your own list | Use your expertise sorting algorithm (selection, insertion, merge). Note, I got my bubble sort from Geek for Geeks and made modifications. Each student in a group should have a unique algorithm. | Test your list with my bubble sort | Test my list with your new sort | Research analysis on sorting:comparisons, swaps, time. Build this into your hacks. - Find a better way to print the data, key first, then other elements in viewable form. | . | . Use the code below to help guide your adventure . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Bubble Sort of a List with optimizations &quot;&quot;&quot; # bubble sorts a list of dictionaries, base off of provided key def bubbleSort(list, key): n = len(list) - 1 # list are indexed 0 to n-1, len is n # Traverse through list with i index for i in range(n): swapped = False # optimize code, so it exits if now swaps on inner loop # Inner traversal using j index for j in range(n-i): # n-i as positions on right are in order in bubble # Swap if the element KeyN is greater KeyN1 keyN = list[j].get(key) keyN1 = list[j+1].get(key) if keyN &gt; keyN1: swapped = True list[j], list[j + 1] = list[j + 1], list[j] # single line swap if not swapped: # if no swaps on inner pass, list is sorted return # exit function if __name__ == &quot;__main__&quot;: # list/dictionary sample list_of_people = [ {&quot;name&quot;: &quot;Risa&quot;, &quot;age&quot;: 18, &quot;city&quot;: &quot;New York&quot;}, {&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 63, &quot;city&quot;: &quot;Eugene&quot;}, {&quot;name&quot;: &quot;Shekar&quot;, &quot;age&quot;: 18, &quot;city&quot;: &quot;San Francisco&quot;}, {&quot;name&quot;: &quot;Ryan&quot;, &quot;age&quot;: 21, &quot;city&quot;: &quot;Los Angeles&quot;} ] # assuming uniform keys, pick 1st row as source of keys key_row = list_of_people[0] # print list as defined print(&quot;Original&quot;) print(list_of_people) for key in key_row: # finds each key in the row print(key) bubbleSort(list_of_people, key) # sort list of people for item in list_of_people: print(f&quot;Team Name: {item.get(&#39;name&#39;)}, Age: {item.get(&#39;Age&#39;)}, City of Residence: {item.get(&#39;city&#39;)}&quot;) . Original [{&#39;name&#39;: &#39;Risa&#39;, &#39;age&#39;: 18, &#39;city&#39;: &#39;New York&#39;}, {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 63, &#39;city&#39;: &#39;Eugene&#39;}, {&#39;name&#39;: &#39;Shekar&#39;, &#39;age&#39;: 18, &#39;city&#39;: &#39;San Francisco&#39;}, {&#39;name&#39;: &#39;Ryan&#39;, &#39;age&#39;: 21, &#39;city&#39;: &#39;Los Angeles&#39;}] name Team Name: John, Age: None, City of Residence: Eugene Team Name: Risa, Age: None, City of Residence: New York Team Name: Ryan, Age: None, City of Residence: Los Angeles Team Name: Shekar, Age: None, City of Residence: San Francisco age Team Name: Risa, Age: None, City of Residence: New York Team Name: Shekar, Age: None, City of Residence: San Francisco Team Name: Ryan, Age: None, City of Residence: Los Angeles Team Name: John, Age: None, City of Residence: Eugene city Team Name: John, Age: None, City of Residence: Eugene Team Name: Ryan, Age: None, City of Residence: Los Angeles Team Name: Risa, Age: None, City of Residence: New York Team Name: Shekar, Age: None, City of Residence: San Francisco . def insertionSort(list, key): n = len(list) for i in range(1, n): current = list[i] j = i - 1 while j &gt;= 0 and list[j].get(key) &gt; current.get(key): list[j + 1] = list[j] j -= 1 list[j + 1] = current return list if __name__ == &quot;__main__&quot;: list_of_teams = [ {&quot;name&quot;: &quot;Patriots&quot;, &quot;city&quot;: &quot;New England&quot;, &quot;SB Wins&quot;: 6}, {&quot;name&quot;: &quot;Seahawks&quot;, &quot;city&quot;: &quot;Seattle&quot;, &quot;SB Wins&quot;: 1}, {&quot;name&quot;: &quot;Chiefs&quot;, &quot;city&quot;: &quot;Kansas City&quot;, &quot;SB Wins&quot;: 3}, {&quot;name&quot;: &quot;Texans&quot;, &quot;city&quot;: &quot;Houston&quot;, &quot;SB Wins&quot;: 0} ] row_key = list_of_teams[0] print(&quot;Original Dictionary&quot;) print(list_of_teams) for key in row_key: print(key) insertionSort(list_of_teams, key) for item in list_of_teams: print(f&quot;Team Name: {item.get(&#39;name&#39;)}, City: {item.get(&#39;city&#39;)}, Super Bowl Wins: {item.get(&#39;SB Wins&#39;)}&quot;) . Original Dictionary [{&#39;name&#39;: &#39;Patriots&#39;, &#39;city&#39;: &#39;New England&#39;, &#39;SB Wins&#39;: 6}, {&#39;name&#39;: &#39;Seahawks&#39;, &#39;city&#39;: &#39;Seattle&#39;, &#39;SB Wins&#39;: 1}, {&#39;name&#39;: &#39;Chiefs&#39;, &#39;city&#39;: &#39;Kansas City&#39;, &#39;SB Wins&#39;: 3}, {&#39;name&#39;: &#39;Texans&#39;, &#39;city&#39;: &#39;Houston&#39;, &#39;SB Wins&#39;: 0}] name Team Name: Chiefs, City: Kansas City, Super Bowl Wins: 3 Team Name: Patriots, City: New England, Super Bowl Wins: 6 Team Name: Seahawks, City: Seattle, Super Bowl Wins: 1 Team Name: Texans, City: Houston, Super Bowl Wins: 0 city Team Name: Texans, City: Houston, Super Bowl Wins: 0 Team Name: Chiefs, City: Kansas City, Super Bowl Wins: 3 Team Name: Patriots, City: New England, Super Bowl Wins: 6 Team Name: Seahawks, City: Seattle, Super Bowl Wins: 1 SB Wins Team Name: Texans, City: Houston, Super Bowl Wins: 0 Team Name: Seahawks, City: Seattle, Super Bowl Wins: 1 Team Name: Chiefs, City: Kansas City, Super Bowl Wins: 3 Team Name: Patriots, City: New England, Super Bowl Wins: 6 . if __name__ == &quot;__main__&quot;: list_of_teams = [ {&quot;name&quot;: &quot;Patriots&quot;, &quot;city&quot;: &quot;New England&quot;, &quot;SB Wins&quot;: 6}, {&quot;name&quot;: &quot;Seahawks&quot;, &quot;city&quot;: &quot;Seattle&quot;, &quot;SB Wins&quot;: 1}, {&quot;name&quot;: &quot;Chiefs&quot;, &quot;city&quot;: &quot;Kansas City&quot;, &quot;SB Wins&quot;: 3}, {&quot;name&quot;: &quot;Texans&quot;, &quot;city&quot;: &quot;Houston&quot;, &quot;SB Wins&quot;: 0} ] rowkey = list_of_teams[0] print(&quot;Original Dictionary&quot;) print(list_of_teams) for key in rowkey: print(key) bubbleSort(list_of_teams, key) for item in list_of_teams: print(f&quot;Team Name: {item.get(&#39;name&#39;)}, City: {item.get(&#39;city&#39;)}, Super Bowl Wins: {item.get(&#39;SB Wins&#39;)}&quot;) . Original Dictionary [{&#39;name&#39;: &#39;Patriots&#39;, &#39;city&#39;: &#39;New England&#39;, &#39;SB Wins&#39;: 6}, {&#39;name&#39;: &#39;Seahawks&#39;, &#39;city&#39;: &#39;Seattle&#39;, &#39;SB Wins&#39;: 1}, {&#39;name&#39;: &#39;Chiefs&#39;, &#39;city&#39;: &#39;Kansas City&#39;, &#39;SB Wins&#39;: 3}, {&#39;name&#39;: &#39;Texans&#39;, &#39;city&#39;: &#39;Houston&#39;, &#39;SB Wins&#39;: 0}] name Team Name: Chiefs, City: Kansas City, Super Bowl Wins: 3 Team Name: Patriots, City: New England, Super Bowl Wins: 6 Team Name: Seahawks, City: Seattle, Super Bowl Wins: 1 Team Name: Texans, City: Houston, Super Bowl Wins: 0 city Team Name: Texans, City: Houston, Super Bowl Wins: 0 Team Name: Chiefs, City: Kansas City, Super Bowl Wins: 3 Team Name: Patriots, City: New England, Super Bowl Wins: 6 Team Name: Seahawks, City: Seattle, Super Bowl Wins: 1 SB Wins Team Name: Texans, City: Houston, Super Bowl Wins: 0 Team Name: Seahawks, City: Seattle, Super Bowl Wins: 1 Team Name: Chiefs, City: Kansas City, Super Bowl Wins: 3 Team Name: Patriots, City: New England, Super Bowl Wins: 6 . if __name__ == &quot;__main__&quot;: # list/dictionary sample list_of_people = [ {&quot;name&quot;: &quot;Risa&quot;, &quot;age&quot;: 18, &quot;city&quot;: &quot;New York&quot;}, {&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 63, &quot;city&quot;: &quot;Eugene&quot;}, {&quot;name&quot;: &quot;Shekar&quot;, &quot;age&quot;: 18, &quot;city&quot;: &quot;San Francisco&quot;}, {&quot;name&quot;: &quot;Ryan&quot;, &quot;age&quot;: 21, &quot;city&quot;: &quot;Los Angeles&quot;} ] # assuming uniform keys, pick 1st row as source of keys keyrow = list_of_people[0] # print list as defined print(&quot;Original&quot;) print(list_of_people) for key in keyrow: # finds each key in the row print(key) insertionSort(list_of_people, key) # sort list of people for item in list_of_people: print(f&quot;Team Name: {item.get(&#39;name&#39;)}, Age: {item.get(&#39;Age&#39;)}, City of Residence: {item.get(&#39;city&#39;)}&quot;) . Original [{&#39;name&#39;: &#39;Risa&#39;, &#39;age&#39;: 18, &#39;city&#39;: &#39;New York&#39;}, {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 63, &#39;city&#39;: &#39;Eugene&#39;}, {&#39;name&#39;: &#39;Shekar&#39;, &#39;age&#39;: 18, &#39;city&#39;: &#39;San Francisco&#39;}, {&#39;name&#39;: &#39;Ryan&#39;, &#39;age&#39;: 21, &#39;city&#39;: &#39;Los Angeles&#39;}] name Team Name: John, Age: None, City of Residence: Eugene Team Name: Risa, Age: None, City of Residence: New York Team Name: Ryan, Age: None, City of Residence: Los Angeles Team Name: Shekar, Age: None, City of Residence: San Francisco age Team Name: Risa, Age: None, City of Residence: New York Team Name: Shekar, Age: None, City of Residence: San Francisco Team Name: Ryan, Age: None, City of Residence: Los Angeles Team Name: John, Age: None, City of Residence: Eugene city Team Name: John, Age: None, City of Residence: Eugene Team Name: Ryan, Age: None, City of Residence: Los Angeles Team Name: Risa, Age: None, City of Residence: New York Team Name: Shekar, Age: None, City of Residence: San Francisco . Observations . I noticed from the code that obviously the code for the insertion sort appears to be shorter than the code for the bubble sort. However, there wasn&#39;t really a noticeable difference in the time it took to run the code. This can be seen because both bubble sort and insertion sort have time complexity of O^2. This is also the same as selection sort, but merge sort is O(nlogn). Merge sort would probably be much better for a larger database, like one containing data for all the NFL teams. . The insertion sort works by taking an element and then checking whether it is greater than an item in the list. The algorithm checks each element and then determines where to insert the element. This is repeated until the list is in order. . Given that insertion sort is O(n^2), it is fine for a small dictionary to be sorted. It would take much more time for a longer dictionary to be sorted when compared to using merge sort. . 2D Arrays . Here is some code which I have created which utilizes 2D arrays in order to take images and piece them together. It receives a certain number of rows and columns based on user input and creates a 2D array of images based on this. It then selects random images and then combines them and displays them. . The idea between this code could be to create almost a virtual postcard which users could send. It could be modified to have user inputted words and include a link to our site. This code would probably need to be modified in order to have a url to send the request and then receive the request and take in user inputs for words. . from PIL import Image import os import random # Directory containing the images image_directory = &quot;../images/&quot; # Get a list of image files in the directory image_files = [f for f in os.listdir(image_directory) if os.path.isfile(os.path.join(image_directory, f))] rows = int(input(&quot;Enter the number of rows (1-10): &quot;)) cols = int(input(&quot;Enter the number of columns (1-10): &quot;)) data = [[random.choice(image_files) for j in range(cols)] for i in range(rows)] image_width = 50 image_height = 50 image = Image.new(&quot;RGB&quot;, (cols * image_width, rows * image_height)) for row in range(rows): for col in range(cols): image_file = data[row][col] image_path = os.path.join(image_directory, image_file) img = Image.open(image_path) img = img.resize((image_width, image_height)) x1, y1 = col * image_width, row * image_height x2, y2 = x1 + image_width, y1 + image_height image.paste(img, (x1, y1, x2, y2)) print(f&quot;{rows} rows&quot;) print(f&quot;{cols} columns&quot;) display(image) . 3 rows 3 columns . def merge_sort(dicts): if len(dicts) &lt;= 1: return dicts mid = len(dicts) // 2 left_half = dicts[:mid] right_half = dicts[mid:] left_half = merge_sort(left_half) right_half = merge_sort(right_half) return merge(left_half, right_half) def merge(left, right): merged = [] i = j = 0 while i &lt; len(left) and j &lt; len(right): if left[i][&#39;likes&#39;] &gt; right[j][&#39;likes&#39;]: # Compare in descending order merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 while i &lt; len(left): merged.append(left[i]) i += 1 while j &lt; len(right): merged.append(right[j]) j += 1 return merged # Example list of dictionaries with images and likes dicts = [ {&#39;name&#39;: &#39;sky&#39;, &#39;image&#39;: &#39;../sky.jpg&#39;, &#39;likes&#39;: 10}, {&#39;name&#39;: &#39;ocean&#39;, &#39;image&#39;: &#39;../ocean.jpg&#39;, &#39;likes&#39;: 25}, {&#39;name&#39;: &#39;bird&#39;, &#39;image&#39;: &#39;../bird.jpg&#39;, &#39;likes&#39;: 13}, {&#39;name&#39;: &#39;runner&#39;, &#39;image&#39;: &#39;../runner.jpg&#39;, &#39;likes&#39;: 5} ] # Sort the list of dictionaries based on the &#39;likes&#39; value using Merge Sort sorted_dicts = merge_sort(dicts) # Print the sorted list for item in sorted_dicts: print(f&quot;Image Name: {item.get(&#39;name&#39;)}, Like Count: {item.get(&#39;likes&#39;)}&quot;) . Image Name: ocean, Like Count: 25 Image Name: bird, Like Count: 13 Image Name: sky, Like Count: 10 Image Name: runner, Like Count: 5 . How this Code can be Used . This code could be used for my group&#39;s project because it uses merge sort to check the amount of likes which an image has. This makes sure to order the database to display to the order the most liked images. This algorithm could probably be changed in order to order the database in order of things like likes in decreasing order or image name. Merge sort is effective because of the lower time complexity than other sorts, which will make it efficient for the project because it has a lower run time for a larger data set. We will need to process a lot of image data, so this is why it would be important. . This code would be needed to be changed in order to be able to fetch image data from a url. This will some results to be changed as it fetchs the json data. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/05/15/DS-sorting.html",
            "relUrl": "/2023/05/15/DS-sorting.html",
            "date": " • May 15, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "MC - 66 QUESTIONS",
            "content": ". . I got this question wrong. It was a question asking about the outputs of two different values. I thought that since the display came first on program A, it would result in more values being printed before i &gt; 10. But because program b adds first before it checks for the new i value, they will still have the same amount of values printed, just the values would be off by 1 so the correct answer is C. . . This question was about moving a robot to the grey square. I thought that C was the correct answer as I thought the robot would move forward until it couldn’t, then rotate right and everything would work. But I forgot to take into account that towards the end it could move straight when it should turn right. TO combat this I should have chosen choice A where we first check if the robot can rotate right before we make it move forward. . . I thought that since there were 4 genre lists that we would have to run the analysis four times, But if forgot to take into account the Analysis at the beginning of the segment where we ran it within science fiction, so the correct answer would be 5 hours which would match up with answer D. . . Another mistake by me, I thought that we were trying to fix the code to make it produce true when the user typed “y” the correct answer is obviously D as the user cannot type both yes and y. . . I thought that since there were 4 genre lists that we would have to run the analysis four times, But if forgot to take into account the Analysis at the beginning of the segment where we ran it within science fiction, so the correct answer would be 5 hours which would match up with answer D. . Reflection . Overall, I did this test with one of my friends and we tried to work together to figure out the questions and this helped a lot and even allowed me to learn new concepts because my friend taught me some things I was unaware of and I did the same with him. This coding gave me new things to learn and incorporate into my code and overall I think taking this test helped a lot. The usage of programs is very useful with databases. They help to be able to efficiently go through and get the data required. I learned the definition of heuristic solutions, how to deal with repeats and loops, and many other coding things that I can use when I try to code myself. The test took a long time also but there are a lot of different coding topics and languages that helped me and though the help of others, and looking up some of the answers to understand how to do certain things, I was able to take a lot from this experience and learn. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2030/2023/05/05/MC.html",
            "relUrl": "/week%2030/2023/05/05/MC.html",
            "date": " • May 5, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 3.80 | Memory in GB: 64 | Storage in GB: 1024 | OS: Windows 11 | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: lets a user interact with the computer- mouse, microphone, keyboard Output devices: computer communicate with the user- speaker, headphones, monitor Program File: file that the computer can execute to run a program- games, media player, website Program Code: instructions for the computer when a program file is run- stuff behind the game, website, and stuff Processes: program is executed in multiple threads- searching, debugging, sorting, etc Ports: endpoint that lets a server handle requests from devices over the internet Data File: has information in the file, or data in a specific format, can be CRUDed, and tells program what to do Inspect Running Code: the inspect element on browser, shows what is happening behind what we see normally, cherry tomatoes when we debug in VS code Inspect Variables: see the values on the variables to debug and see what is happening | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path –&gt; A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. Route –&gt; Routing is the process of finding a path from sender to receiver. Computer System –&gt; A computing system is a group of computing devices and programs working together for a common purpose. Computer Device –&gt; A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. Bandwidth –&gt; Bandwidth is usually measured in bits per second. Computer Network –&gt; A computer network is a group of interconnected computing devices capable of sending or receiving data. | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | T | F | F | T | F | F | T . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highlight vocabulary by illustration. The below illustration have some ideas | . . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. Fault tolerance is a process that lets an OS respond to failure in the hardware or software. So the system won’t break down completely due to an error or failure. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/04/30/AP_computers_networks.html",
            "relUrl": "/2023/04/30/AP_computers_networks.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "2020 MCQ Practice Test Corrections",
            "content": "Total Score . . Test Corrections . Question 56 . The answer that I put was A, however the correct answer is actually D, which is Version II requires approximately 5 more minutes to execute than version I. This is the correct answer because Version I calls the GetPrediction procedure once for each element of idList, or four times total. Since each call requires 1 minute of execution time, version I requires approximately 4 minutes to execute. Version II calls the GetPrediction procedure twice for each element of idList, and then again in the final display statement. This results in the procedure being called nine times, requiring approximately 9 minutes of execution time. Therefore, this would be the most accurate comparison between the two. . Question 59 . The answer that I put was B, however the correct answer is actually C, which is The original developer of open-source software provides free or low-cost support for users installing and running the software. This is the correct answer because Open-source software has source code that is released under a license that allows users the rights to use and distribute it. However, there is no guarantee that the original developer of open-source software will provide support for its users. Therefore, this is the why this answer is NOT an advantage of using-open source software. . Question 62 . The answer that I put was A and C, however the correct answer is A and B. The reason it is B instead of A is because Since x OR y evaluates to true, the body of the IF statement is executed. Since x is true, true is displayed. However for option C, Since x OR y evaluates to true, the body of the IF statement is executed. Since x AND y evaluates to false, false is displayed. . Question 63 . The answer that I put was B and D, however the correct answer is B and A. The reason that it is option A over D is because In order to perform the desired calculation, the selling price, the genre, and the quantity available are needed. The author is not needed. However for option D, the quantity available is needed to perform the desired calculation. The quantity available for each book is multiplied by its selling price to determine the total amount of money received for selling all copies of the book. . Reflection . Overall, I really think I am progressing in getting better at taking these CollegeBoard Practice MCQ’s. I am pretty proud of getting my score and think that the errors I made were pretty silly, and by looking back at the explanations, I was able to realize what I got wrong and why the answer is what it is. One thing I really see that I struggle on is finding both answers to a select more than one answer question. I will usually get one of them right but the other selected option more. I feel like while studying for these questions, I should try to answer more questions that have multiple answers so that I can get better at them. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2030/2023/04/30/2020MCQ.html",
            "relUrl": "/week%2030/2023/04/30/2020MCQ.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? | . This CSS code is changing the style of the body text in the HTML document in the following ways: . Color: The color of the body text is being changed to blue (#0000FF). | Font family: The font family of the body text is being changed to Arial, which is a sans-serif font. If Arial is not available on the user&#39;s device, then a generic sans-serif font will be used as a fallback. | Font size: The font size of the body text is being set to 16 pixels | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | . Sass Code Example . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to how it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 . Reflection . Sass (Syntactically Awesome Style Sheets) is a powerful CSS preprocessor that extends the capabilities of standard CSS, making it easier to write and maintain complex stylesheets. Here are some key features of Sass and how they compare to CSS: . Variables: Sass allows you to define variables that can be reused throughout your stylesheet, making it easier to manage and update values consistently. . $primary-color: #4a4a4a; body { background-color: $primary-color; } . Using Sass variables would have made it simpler to change color schemes or fonts in past projects, as you only need to update the variable value. . Nesting: Sass supports nesting of CSS rules, making the code more organized and easier to read. . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 0 10px; text-decoration: none; } } . In previous projects, Sass nesting would have simplified the process of writing styles for nested elements like dropdown menus and modal windows. . Partials and Imports: Sass allows you to create partial files (_partial.scss) that can be imported and combined into a single CSS file. This makes it easier to modularize and organize your styles. . // _variables.scss $primary-color: #4a4a4a; // _base.scss body { background-color: $primary-color; } // main.scss @import &#39;variables&#39;; @import &#39;base&#39;; . CSS does not have an equivalent feature, so developers often rely on multiple stylesheets or long, unorganized files. . Mixins: Sass mixins are reusable chunks of code that can be included in your styles with custom parameters, making it easy to write DRY (Don&#39;t Repeat Yourself) code. . @mixin transform($property) { -webkit-transform: $property; -ms-transform: $property; transform: $property; } .box { @include transform(rotate(30deg)); } . In past projects, mixins could have simplified the implementation of vendor prefixes, responsive breakpoints, or custom animations. . Functions and Control Directives: Sass supports functions and control directives like if, for, each, and while, which enable complex logic and calculations in your styles. . @function grid-width($n) { @return $n * 100 / 12; } .col-4 { width: grid-width(4) + &#39;%&#39;; } . CSS does not support functions or control directives, so similar functionality would require manual calculations and updates. . Using Sass in past projects would have made them easier to manage, maintain, and scale. The benefits include reusability, modularity, and better organization of styles, making it simpler to implement complex features and changes. . SASS DEMO . /* Variables */ $primary-color: #ff5722; $secondary-color: #607d8b; /* Mixins */ @mixin team-card-style { background-color: #fff; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); margin: 20px auto; max-width: 600px; overflow: hidden; img { width: 100%; height: auto; } .team-info { padding: 20px; h2 { color: $primary-color; margin-top: 0; } p { color: $secondary-color; } ul { list-style: none; padding: 0; margin: 0; li { color: $secondary-color; margin-bottom: 10px; &amp;:first-child { margin-top: 10px; } } } } } /* Global styles */ body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5; } h1 { text-align: center; color: $primary-color; margin-top: 50px; } .team-card { @include team-card-style; } .team-card-large { @include team-card-style; max-width: 800px; } .team-card-medium { @include team-card-style; max-width: 400px; } . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;NBA Teams Showcase&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;NBA Teams Showcase&lt;/h1&gt; &lt;div class=&quot;team-card&quot;&gt; &lt;img src=&quot;images/lakers.jpg&quot; alt=&quot;Los Angeles Lakers logo&quot;&gt; &lt;div class=&quot;team-info&quot;&gt; &lt;h2&gt;Los Angeles Lakers&lt;/h2&gt; &lt;p&gt;Founded in 1947, the Los Angeles Lakers are one of the most successful franchises in NBA history, with 17 championships to their name. They play their home games at the Staples Center in Los Angeles, California.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Head coach: Frank Vogel&lt;/li&gt; &lt;li&gt;Star player: LeBron James&lt;/li&gt; &lt;li&gt;Record (2021-2022 season): 42-40&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;team-card&quot;&gt; &lt;img src=&quot;images/warriors.jpg&quot; alt=&quot;Golden State Warriors logo&quot;&gt; &lt;div class=&quot;team-info&quot;&gt; &lt;h2&gt;Golden State Warriors&lt;/h2&gt; &lt;p&gt;The Golden State Warriors are a professional basketball team based in San Francisco, California. They have won six championships in their history, including three in the last six years. The Warriors play their home games at the Chase Center in San Francisco.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Head coach: Steve Kerr&lt;/li&gt; &lt;li&gt;Star player: Stephen Curry&lt;/li&gt; &lt;li&gt;Record (2021-2022 season): 48-34&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;team-card&quot;&gt; &lt;img src=&quot;images/bulls.jpg&quot; alt=&quot;Chicago Bulls logo&quot;&gt; &lt;div class=&quot;team-info&quot;&gt; &lt;h2&gt;Chicago Bulls&lt;/h2&gt; &lt;p&gt;The Chicago Bulls are a professional basketball team based in Chicago, Illinois. They have won six championships in their history, all during the 1990s. The Bulls play their home games at the United Center in Chicago.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Head coach: Billy Donovan&lt;/li&gt; &lt;li&gt;Star player: Zach LaVine&lt;/li&gt; &lt;li&gt;Record (2021-2022 season): 42-40&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;team-card&quot;&gt; &lt;img src=&quot;images/Heat.jpg&quot; alt=&quot;Miami Heat logo&quot;&gt; &lt;div class=&quot;team-info&quot;&gt; &lt;h2&gt;Miami Heat&lt;/h2&gt; &lt;p&gt;The Miami Heat are a professional basketball team based in Miami, Florida. They have won three championships in their history, including back-to-back titles in 2012 and 2013. The Heat play their home games at the American Airlines Arena in Miami.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Head coach: Erik Spoelstra&lt;/li&gt; &lt;li&gt;Star player: Jimmy Butler&lt;/li&gt; &lt;li&gt;Record (2021-2022 season): 35-47&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . I will link my project that works in my issue fr .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/student/2023/04/28/P3M-SASSFundamentals.html",
            "relUrl": "/student/2023/04/28/P3M-SASSFundamentals.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "P3-M 4/25 Simulations",
            "content": "Objectives . Understand how computers can be used to represent real-world phenomena or outcomes | Compare simulations with real-world contexts. | Implement code to mimic real world situations, problems, or phenomena. | What are simulations by College Board definition? . Simulations are abstractions that mimic more complex objects or phenomena from the real world Purposes include drawing inferences without the changing of the real world | . | Simulations use varying sets of values to reflect the hypothetical state state of a real phenomenon | Often, when developing a simulation, it is necessary to remove specific problems or simplify aspects Simulations can often contain bias based on which details or real-world elements were included/excluded | . | Simulations allow the formulation of predictions under consideration | Variability and randomness of the world is considered using random number generators | Examples: rolling dice, spinners, molecular models, analyze chemicals/reactions... | . . Analyzing an Example: Air-Traffic Simulator . Say we want to find out what the optimal number of aircrafts that can be in the air in one area is. | A simulation allows us to explore this question without real world contraints of money, time, safety Unfortunately we can&#39;t just fly 67 planes all at once and see what happens | . | Since the simulation won&#39;t be able to take all variables into control, it may have a bias towards one answer | Will not always have the same result | . Functions we often need (python) . import random # a module that defines a series of functions for generating or manipulating random integers random.choice() #returns a randomly selected element from the specified sequence random.choice(mylist) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . Functions we often need (js) . // Math.random(); returns a random number // Math.floor(Math.random() * 10); // Returns a random integer from 0 to 9: . College Board Question 1 . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 REPEAT 5 TIMES { foodConsumed ← numFish * foodPerDay foodLeft ← foodLeft - foodConsumed IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } . } . This simulation simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | Summarize how the code works: | . Examples . Card Flip . import random cards = [&quot;Ace&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;] suits = [&quot;Diamonds&quot;, &quot;Hearts&quot;, &quot;Spades&quot;, &quot;Clubs&quot;] print(random.choice(cards) + &quot; of &quot; + random.choice(suits)) . Coin Flip . import random def coinflip(): #def function randomflip = random.randint(1, 1) #picks either 0 or 1 randomly if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Tails Tails Tails Tails Tails . Your turn: Change the code to make it simulate the flipping of a weighted coin. . Adding images (in Python) . Add a heads and tails images into your images directory with the correct names and run the code below | . import random # importing Image class from PIL package from PIL import Image # creating a object im = Image.open(r&quot;images/HeadsOn.png&quot;) image = Image.open(r&quot;images/TailsOn.png&quot;) i=random.randint(0,1) if i == 1: print(&quot;heads&quot;) display(im) else: print(&quot;tails&quot;) display(image) . heads . In order to display an image in python, we can use the PIL package we previously learned about. . Spin the Wheel . import random print(&quot;Spin the wheel!&quot;) print(&quot;-&quot;) img = Image.open(r&quot;images/SpinTheWheel.png&quot;) n = 300 blue = 0 red = 0 for i in range(n): spin = random.randint(1,2) if spin == 1: # head blue = blue + 1 else: # tail red = red + 1 print(&#39;Number of blue:&#39;, blue) print(&#39;Number of red:&#39;, red) display(img) . Spin the wheel! - Number of blue: 148 Number of red: 152 . Your turn: Add a visual to the simulation! . Population Growth and Plots . import random totalPopulation = 50 growthFactor = 1.00005 dayCount = 0 #Every 2 months the population is reported while totalPopulation &lt; 1000000: totalPopulation *= growthFactor #Every 56th day, population is reported dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) . 50.14019267336515 50.28077842644361 50.421758361373264 50.5631335833823 50.704905200797775 50.847074325054315 50.98964207070282 51.13260955541927 51.27597790001347 51.41974822843774 51.563921667795874 51.70849934835185 51.85348240353876 51.99887196996765 52.14466918743647 52.290875198939005 52.43749115067384 52.5845181920533 52.731957475712534 52.87981015751845 53.028077396578915 53.17676035525173 53.325860199153716 53.47537809717 53.62531522146305 53.775672747481956 53.92645185397153 54.0776537229816 54.22927953987637 54.38133049334356 54.533807775403844 54.68671258142016 54.840046110106975 54.993809563539834 55.14800414716474 55.302631069807575 55.45769154368362 55.613186784406984 55.769118011000224 55.92548644590379 56.082293314985726 56.239539847551235 56.39722727635229 56.55535683759732 56.71392977096098 56.87294731959368 57.032410730131446 57.19232125270578 57.35268014095325 57.51348865202554 57.67474804659919 57.83645958888546 57.998624546640265 58.161244191174156 58.324319797362236 58.48785264365415 58.651844012084126 58.81629518828111 58.98120746147867 59.14658212452524 59.312420473894186 59.47872380969402 59.645493435678574 59.81273065925718 59.98043679150499 60.14861314717315 60.31726104469929 60.486381806217665 60.65597675756963 60.82604722831395 60.99659455173736 61.16762006486491 61.33912510847044 61.51111102708713 61.68357916901805 61.85653088634677 62.029967534947765 62.2038904744973 62.3783010684839 62.5532006842192 62.72859069284855 62.9044724693617 63.08084739260377 63.25771684528589 63.43508221399618 63.61294488921051 63.791306265303454 63.9701677405592 64.14953071718247 64.32939660130967 64.50976680301973 64.69064273634523 64.87202581928359 65.05391747380793 65.23631912587847 65.41923220545367 65.6026581465012 65.78659838700955 65.97105436899903 66.1560275385331 66.34151934572994 66.52753124477363 66.71406469392542 66.90112115553534 67.08870209605372 67.27680898604255 67.46544330018713 67.65460651730747 67.84430012037001 68.0345255964992 68.22528443698917 68.41657813731555 68.60840819714687 68.80077612035657 68.99368341503474 69.1871315935 69.38112217231115 69.57565667227935 69.77073661847982 69.96636354026379 70.16253897127073 70.35926444944013 70.55654151702359 70.75437172059699 70.95275661107263 71.15169774371125 71.35119667813444 71.55125497833659 71.75187421269743 71.95305595399414 72.15480177941373 72.35711327056549 72.55999201349321 72.76343959868774 72.96745762109934 73.17204768015053 73.37721137974819 73.58295032829629 73.7892661387086 73.99616042842136 74.20363481940569 74.41169093818056 74.62033041582539 74.82955488799308 75.03936599492248 75.24976538145154 75.46075469703 75.67233559573249 75.88450973627147 76.0972787820101 76.31064440097533 76.52460826587115 76.73917205409133 76.95433744773317 77.17010613360995 77.3864798032648 77.60346015298347 77.82104888380806 78.03924770155005 78.25805831680371 78.47748244495963 78.69752180621806 78.91817812560257 79.13945313297332 79.36134856304064 79.58386615537891 79.80700765444 80.0307748095669 80.2551693750076 80.4801931099287 80.70584777842916 80.93213514955427 81.15905699730956 81.38661510067445 81.6148112436165 81.84364721510522 82.07312480912596 82.30324582469439 82.53401206587023 82.76542534177153 82.99748746658884 83.23020025959946 83.46356554518161 83.69758515282888 83.93226091716447 84.16759467795565 84.40358828012793 84.64024357377998 84.87756241419767 85.11554666186892 85.35419818249822 85.59351884702103 85.83351053161893 86.07417511773376 86.31551449208287 86.55753054667352 86.80022517881795 87.0436002911482 87.28765779163105 87.53239959358282 87.77782761568463 88.02394378199715 88.27075002197599 88.51824827048654 88.7664404678193 89.01532855970511 89.26491449733037 89.51520023735218 89.76618774191397 90.01787897866066 90.27027592075423 90.523380546889 90.77719484130736 91.0317207938151 91.28696039979738 91.54291566023389 91.79958858171481 92.05698117645656 92.31509546231764 92.57393346281405 92.83349720713561 93.0937887301617 93.3548100724771 93.61656328038823 93.8790504059389 94.1422735069267 94.40623464691882 94.67093589526853 94.93637932713133 95.20256702348084 95.46950107112576 95.73718356272572 96.00561659680784 96.2748022777833 96.54474271596374 96.81544002757771 97.08689633478744 97.35911376570533 97.63209445441078 97.90584054096682 98.18035417143682 98.45563749790136 98.73169267847535 99.00852187732455 99.28612726468283 99.56451101686899 99.84367531630399 100.12362235152784 100.4043543172171 100.6858734142017 100.9681818494825 101.25128183624842 101.53517559389384 101.81986534803593 102.1053533305323 102.39164177949827 102.6787329393245 102.96662906069467 103.2553324006029 103.54484522237183 103.83516979566991 104.12630839652952 104.41826330736457 104.7110368169886 105.00463122063279 105.29904881996362 105.59429192310112 105.89036284463707 106.18726390565291 106.48499743373814 106.78356576300845 107.082971234124 107.38321619430786 107.68430299736441 107.9862340036976 108.28901158032987 108.59263810092013 108.89711594578293 109.20244750190679 109.50863516297301 109.81568132937433 110.12358840823391 110.43235881342416 110.74199496558553 111.05249929214574 111.36387422733867 111.67612221222326 111.98924569470296 112.30324712954469 112.61812897839816 112.93389370981537 113.25054379926964 113.56808172917515 113.8865099889064 114.20583107481775 114.52604749026302 114.84716174561511 115.16917635828544 115.49209385274403 115.81591676053907 116.14064762031693 116.46628897784198 116.79284338601637 117.12031340490034 117.4487016017323 117.77801055094855 118.1082428342038 118.43940104039156 118.77148776566392 119.10450561345237 119.43845719448807 119.77334512682211 120.10917203584634 120.44594055431388 120.78365332235961 121.12231298752103 121.46192220475878 121.80248363647786 122.14399995254809 122.48647383032527 122.82990795467218 123.17430501797935 123.51966772018655 123.86599876880385 124.2133008789327 124.56157677328723 124.9108291822157 125.26106084372192 125.61227450348659 125.96447291488887 126.31765883902827 126.67183504474562 127.02700430864537 127.38316941511724 127.74033315635786 128.09849833239275 128.45766775109823 128.81784422822375 129.17903058741356 129.54122966022885 129.9044442861703 130.26867731270008 130.63393159526427 131.00020999731495 131.36751539033335 131.73585065385146 132.1052186754753 132.4756223509073 132.84706458396897 133.21954828662376 133.5930763789997 133.9676517894126 134.3432774543887 134.71995631868808 135.0976913353271 135.47648546560228 135.85634167911294 136.2372629537851 136.61925227589387 137.0023126400879 137.38644704941228 137.77165851533223 138.1579500577565 138.5453247050614 138.93378549411435 139.32333547029742 139.71397768753192 140.10571520830172 140.49855110367753 140.89248845334066 141.2875303456074 141.68367987745353 142.08094015453818 142.47931429122812 142.87880541062242 143.27941664457708 143.6811511337291 144.08401202752148 144.4880024842277 144.89312567097676 145.29938476377774 145.7067829475447 146.11532341612175 146.52500937230818 146.93584402788318 147.34783060363168 147.76097232936925 148.17527244396697 148.59073419537748 149.00736084066034 149.425155646007 149.84412188676714 150.26426284747424 150.6855818218708 151.10808211293462 151.53176703290453 151.9566399033063 152.3827040549788 152.80996282810023 153.23841957221413 153.66807764625565 154.0989404185779 154.5310112669781 154.96429357872486 155.39879075058366 155.83450618884436 156.27144330934723 156.70960553751047 157.14899630835643 157.58961906653877 158.0314772663694 158.47457437184565 158.9189138566775 159.3644992043146 159.81133390797362 160.2594214706658 160.70876540522437 161.1593692343318 161.61123649054784 162.06437071633695 162.51877546409628 162.974454296183 163.43141078494295 163.8896485127385 164.34917107197592 164.8099820651345 165.27208510479406 165.7354838136635 166.20018182460961 166.66618278068484 167.13349033515655 167.60210815153516 168.07203990360307 168.54328927544339 169.01585996146883 169.48975566645098 169.96498010554862 170.44153700433756 170.91943009883965 171.39866313555166 171.87923987147536 172.36116407414633 172.84443952166393 173.3290700027207 173.81505931663224 174.30241127336657 174.7911296935745 175.2812184086196 175.77268126060764 176.26552210241738 176.75974479773012 177.2553532210609 177.75235125778775 178.25074280418306 178.75053176744373 179.2517220657221 179.75431762815606 180.25832239490038 180.7637403171574 181.2705753572083 181.7788314884435 182.2885126953946 182.79962297376505 183.31216633046162 183.8261467836261 184.34156836266627 184.85843510828798 185.3767510725265 185.89652031877856 186.41774692183384 186.94043496790735 187.4645885546712 187.99021179128667 188.51730879843657 189.04588370835765 189.57594066487266 190.107483823423 190.64051735110152 191.1750454266848 191.7110722406662 192.24860199528842 192.78763890457714 193.32818719437287 193.87025110236505 194.41383487812527 194.95894278313986 195.50557909084395 196.05374808665488 196.60345406800522 197.15470134437754 197.707494237337 198.26183708056612 198.8177342198983 199.37519001335195 199.93420883116485 200.49479505582852 201.05695308212188 201.62068731714655 202.18600218036067 202.75290210361413 203.32139153118305 203.8914749198046 204.463156738712 205.03644146966957 205.6113336070078 206.1878376576584 206.76595814119057 207.34569958984486 207.92706654857014 208.51006357505847 209.0946952397809 209.68096612602358 210.26888082992338 210.85844396050425 211.44966013971296 212.0425340024556 212.63707019663403 213.233273383182 213.83114823610165 214.43069944250087 215.03193170262884 215.63484972991407 216.23945825100063 216.84576200578545 217.45376574745524 218.0634742425242 218.6748922708712 219.28802462577698 219.90287611396192 220.5194515556238 221.1377557844757 221.75779364778353 222.37957000640415 223.0030897348239 223.62835772119607 224.25537886737985 224.88415808897844 225.5147003153777 226.14701048978466 226.78109356926657 227.41695452478945 228.0545983412572 228.69403001755072 229.33525456656687 229.97827701525802 230.62310240467164 231.26973578998908 231.91818224056598 232.56844683997173 233.22053468602925 233.87445089085486 234.53020058089874 235.18778889698473 235.84722099435083 236.5085020426895 237.1716372261884 237.83663174357085 238.50349080813663 239.17221964780276 239.84282350514476 240.51530763743727 241.18967731669585 241.8659378297178 242.54409447812415 243.2241525784004 243.90611746193915 244.58999447508114 245.27578897915754 245.96350635053204 246.65315198064286 247.34473127604497 248.0382496584523 248.73371256478077 249.4311254471907 250.13049377312905 250.831823025373 251.53511870207248 252.2403863167937 252.94763139856178 253.6568594919047 254.36807615689625 255.0812869691998 255.79649752011247 256.51371341660814 257.2329402813819 257.95418375289455 258.6774494854154 259.4027431490684 260.1300704298747 260.8594370297992 261.59084866679365 262.32431107484285 263.05983000400795 263.79741122047267 264.53706050658855 265.27878366091994 266.02258649828946 266.76847484982346 267.51645456299826 268.2665315016851 269.01871154619727 269.7730005933353 270.5294045564336 271.2879293654064 272.048580966795 272.81136532381356 273.5762884163963 274.34335624124435 275.112574811873 275.8839501586579 276.65748832888363 277.43319538679 278.2110774136202 278.9911405076685 279.77339078432755 280.55783437613707 281.34447743283164 282.1333261213881 282.92438662607515 283.7176651485011 284.5131679076628 285.310901139994 286.11087109941457 286.91308405737965 287.71754630292827 288.52426414273344 289.3332439011511 290.1444919202694 290.9580145599587 291.7738181979222 292.59190922974483 293.4122940689435 294.234979147018 295.0599709135012 295.8872758360093 296.7169004002931 297.5488511102877 298.3831344881652 299.2197570743844 300.05872542774284 300.9000461254279 301.7437257630681 302.589770954786 303.43818833324764 304.2889845497177 305.14216627410957 305.9977401950374 306.85571301987005 307.71609147478233 308.57888230480876 309.44409227389536 310.3117281649539 311.1817967799137 312.0543049397762 312.9292594846684 313.8066672738949 314.68653518599365 315.5688701187883 316.4536789894435 317.3409687345188 318.23074631002237 319.12301869146626 320.0177928739205 320.9150758720686 321.81487472026214 322.7171964725761 323.62204820286394 324.52943700481296 325.4393699920007 326.3518542979497 327.26689707618374 328.1845055002843 329.1046867639462 330.02744808103495 330.95279668564194 331.88073983214247 332.81128479525165 333.74443887008215 334.6802093722009 335.6186036376864 336.55962902318737 337.5032929059783 338.4496026840188 339.39856577601165 340.3501896214602 341.3044816807274 342.261449435094 343.22110038681643 344.18344205918754 345.1484819965934 346.11622776457364 347.08668694988114 348.05986716054014 349.035776025907 350.01442119673004 350.99581034520844 351.97995116505376 352.9668513715488 353.95651870160964 354.9489609138453 355.94418578861934 356.9422011281091 357.9430147563688 358.94663451939033 359.9530682851643 360.96232394374175 361.97440940729695 362.9893326101884 364.0071015090213 365.0277240827101 366.0512083325411 367.07756228223457 368.1067939780088 369.13891148864167 370.1739229055354 371.21183634277907 372.2526599372127 373.29640184849023 374.34307025914455 375.39267337465117 376.4452194234927 377.50071665722265 378.55917335053124 379.6205978013096 380.6849983307144 381.75238328323405 382.82276102675394 383.8961399526212 384.97252847571133 386.0519350344942 387.1343680910996 388.21983613138366 389.30834766499646 390.39991122544694 391.494535370171 392.59222868059885 393.69299976222095 394.796857244657 395.9038097817225 397.01386605149725 398.1270347563929 399.2433246232216 400.36274440326383 401.4853028723379 402.6110088308677 403.7398711039524 404.87189854143577 406.0071000179748 407.1454844331095 408.287060711334 409.43183780216435 410.5798246802101 411.73103034524416 412.88546382227366 414.0431341616106 415.2040504389423 416.3682217554037 417.5356572376472 418.7063660379155 419.8803573341126 421.0576403298762 422.23822425464937 423.4221183637535 424.60933193846023 425.799874286065 426.9937547399591 428.1909826597033 429.39156743110146 430.5955184662737 431.80284520373044 433.01355710844604 434.22766367193367 435.4451744123189 436.6660988744152 437.89044662979774 439.11822727687934 440.34945044098566 441.5841257744296 442.8222629565879 444.0638716939778 445.308961720331 446.5575427966714 447.8096247113921 449.06521728033084 450.3243303468473 451.58697378190135 452.8531574841283 454.1228913799193 455.3961854234965 456.6730495969924 457.95349391052855 459.2375284022931 460.5251631386193 461.8164082140656 463.11127375149374 464.40976990214904 465.7119068457384 467.01769479051194 468.3271439733419 469.64026465980334 470.95706714425455 472.2775617499174 473.60175882895885 474.92966876257213 476.26130196105726 477.5966688639028 478.93577993986906 480.2786456870687 481.62527663304957 482.9756833348777 484.329876379219 485.6878663824232 487.0496639906063 488.41527987973484 489.78472475570936 491.1580093544477 492.5351444419697 493.9161408144817 495.30100929846105 496.689760750741 498.0824060585959 499.47895613982575 500.8794219428431 502.28381444675813 503.69214466146485 505.1044236277269 506.52066241726544 507.9408721328446 509.36506390835916 510.7932489089215 512.2254383309495 513.6616434022543 515.1018753821286 516.5461455614329 517.9944652626872 519.4468458401576 520.9032986799461 522.363835200079 523.8284668505978 525.2972051136486 526.770061503571 528.2470475669891 529.7281748829021 531.2134550627753 532.7028997506313 534.1965206231389 535.6943293897091 537.1963377925831 538.7025576069253 540.2130006409161 541.7276787358455 543.2466037662027 544.7697876397733 546.2972422977293 547.828979714724 549.3650118989859 550.9053508924134 552.4500087706683 553.9989976432714 555.5523296536958 557.1100169794631 558.67207183224 560.2385064579324 561.8093331367805 563.3845641834594 564.9642119471699 566.54828881174 568.1368071957193 569.7297795524775 571.3272183703012 572.929136172493 574.5355455174692 576.1464589988572 577.7618892455956 579.3818489220322 581.0063507280242 582.6354073990381 584.2690317062466 585.9072364566338 587.5500344930905 589.1974386945177 590.8494619759274 592.5061172885423 594.1674176199 595.8333759939517 597.5040054711668 599.1793191486345 600.8593301601647 602.5440516763953 604.2334969048909 605.927679090248 607.6266115142 609.3303074957197 611.0387803911243 612.7520435941806 614.4701105362091 616.1929946861893 617.9207095508675 619.6532686748599 621.3906856407593 623.132974069243 624.8801476191777 626.6322199877284 628.3892049104649 630.1511161614686 631.9179675534425 633.6897729378182 635.4665462048637 637.248301283795 639.035052142882 640.8268127895609 642.6235972705416 644.425419671919 646.2322941192846 648.0442347778338 649.8612558524812 651.683371587969 653.510596268979 655.3429442202466 657.1804298066711 659.0230674334283 660.8708715460835 662.7238566307075 664.5820372139859 666.4454278633357 668.3140431870181 670.1878978342551 672.067006495342 673.9513839017637 675.8410448263103 677.7360040831921 679.6362765281566 681.5418770586045 683.4528206137071 685.3691221745227 687.2907967641139 689.2178594476659 691.150325332605 693.0882095687164 695.0315273482627 696.9802939061026 698.9345245198126 700.8942345098052 702.8594392394482 704.8301541151864 706.8063945866619 708.7881761468354 710.7755143321076 712.7684247224413 714.7669229414836 716.7710246566857 718.7807455794315 720.7961014651545 722.8171081134661 724.843781368276 726.8761371179183 728.9141912952758 730.9579598779051 733.0074588881613 735.0627043933235 737.1237125057212 739.1904993828613 741.2630812275531 743.3414742880366 745.4256948581091 747.5157592772539 749.6116839307671 751.7134852498872 753.8211797119232 755.9347838403846 758.0543142051102 760.1797874223978 762.3112201551356 764.4486291129311 766.5920310522441 768.7414427765165 770.8968811363039 773.0583630294111 775.2259054010183 777.3995252438195 779.5792395981537 781.765065552138 783.9570202418024 786.1551208512234 788.3593846126597 790.5698288066865 792.7864707623309 795.0093278572086 797.2384175176593 799.4737572188831 801.7153644850787 803.9632568895797 806.2174520549937 808.4779676533383 810.7448214061807 813.0180310847782 815.2976145102144 817.5835895535421 819.8759741359219 822.1747862287616 824.480043853858 826.7917650835394 829.109968040806 831.4346708994727 833.7658918843098 836.1036492711884 838.447961387222 840.7988466109101 843.1563233722843 845.5204101530497 847.8911254867327 850.268487958824 852.6525162069256 855.043228920897 857.4406448430004 859.8447827680498 862.2556615435561 864.6733000698766 867.0977173003621 869.5289322415053 871.9669639530903 874.4118315483431 876.8635541940805 879.322151110859 881.7876415731274 884.2600449093766 886.7393805022928 889.2256677889077 891.7189262607517 894.2191754640077 896.7264349996603 899.2407245236565 901.7620637470516 904.2904724361706 906.8259704127589 909.3685775541408 911.9183137933724 914.4751991193983 917.0392535772118 919.6104972680068 922.18895034934 924.7746330352851 927.3675655965947 929.9677683608575 932.5752617126558 935.1900660937296 937.8122020031334 940.4416899973988 943.0785506906938 945.7228047549867 948.3744729202062 951.0335759744047 953.7001347639222 956.3741701935471 959.0557032266831 961.7447548855114 964.4413462511574 967.1454984638538 969.8572327231082 972.5765702878673 975.3035324766865 978.038140667894 980.78041629976 983.5303808706647 986.2880559392662 989.0534631246705 991.8266241066004 994.6075606255647 997.3962944830304 1000.1928475415913 1002.997241725142 1005.8094990190481 1008.6296414703187 1011.4576911877793 1014.2936703422463 1017.1376011666987 1019.9895059564535 1022.8494070693422 1025.7173269258824 1028.593288009456 1031.4773128664845 1034.3694241066091 1037.2696444028618 1040.1779964918474 1043.0945031739234 1046.0191873133717 1048.9520718385857 1051.8931797422445 1054.8425340814974 1057.8001579781408 1060.766074618801 1063.7403072551176 1066.7228792039236 1069.7138138474302 1072.713134633408 1075.7208650753705 1078.7370287527624 1081.7616493111384 1084.7947504623544 1087.8363559847496 1090.8864897233352 1093.9451755899797 1097.012437563597 1100.0882996903342 1103.1727860837598 1106.265920925055 1109.3677284632 1112.4782330151652 1115.5974589661037 1118.72543076954 1121.8621729475624 1125.007710091017 1128.162066859697 1131.3252679825403 1134.4973382578196 1137.67830255334 1140.8681858066293 1144.0670130251392 1147.274809286437 1150.4915997384037 1153.7174095994335 1156.9522641586254 1160.19618877599 1163.4492088826412 1166.711349980997 1169.9826376449819 1173.2630975202271 1176.5527553242666 1179.851636846747 1183.159767949622 1186.477174567361 1189.803882707147 1193.1399184490854 1196.4853079464058 1199.8400774256686 1203.204253186967 1206.5778616041396 1209.9609291249694 1213.3534822713975 1216.7555476397283 1220.1671519008369 1223.5883218003826 1227.0190841590133 1230.4594658725784 1233.9094939123402 1237.3691953251844 1240.8385972338292 1244.3177268370462 1247.806611409865 1251.3052783037892 1254.8137549470152 1258.332068844643 1261.860247578891 1265.3983188093162 1268.9463102730283 1272.5042497849086 1276.0721652378256 1279.6500846028562 1283.2380359295046 1286.8360473459204 1290.4441470591216 1294.062363355214 1297.6907245996133 1301.3292592372682 1304.9779957928836 1308.6369628711413 1312.3061891569278 1315.985703415559 1319.675534493001 1323.3757113161043 1327.0862628928226 1330.8072183124439 1334.5386067458198 1338.2804574455934 1342.0327997464256 1345.795663065229 1349.5690769013959 1353.3530708370308 1357.1476745371817 1360.9529177500744 1364.7688303073437 1368.5954421242673 1372.4327832000029 1376.2808836178187 1380.1397735453336 1384.009483234751 1387.8900430230988 1391.7814833324644 1395.6838346702334 1399.597127629332 1403.5213928884618 1407.4566612123456 1411.402963451964 1415.3603305448 1419.3287935150804 1423.30838347402 1427.2991316200666 1431.3010692391372 1435.314227704878 1439.3386384788973 1443.3743331110186 1447.421343239528 1451.4797005914186 1455.5494369826426 1459.630584318357 1463.7231745931795 1467.827239891434 1471.9428123874047 1476.0699243455883 1480.2086081209457 1484.358896159157 1488.5208209968748 1492.6944152619792 1496.8797116738351 1501.0767430435467 1505.2855422742173 1509.5061423612026 1513.7385763923764 1517.9828775483838 1522.239079102904 1526.5072144229102 1530.7873169689335 1535.0794202953196 1539.3835580505 1543.6997639772487 1548.0280719129503 1552.3685157898653 1556.721129635394 1561.0859475723455 1565.4630038192042 1569.852332690397 1574.2539685965653 1578.6679460448295 1583.0942996390663 1587.5330640801772 1591.9842741663558 1596.4479647933679 1600.9241709548232 1605.4129277424438 1609.914270346347 1614.4282340553175 1618.954854257085 1623.4941664386008 1628.046206186315 1632.6110091864593 1637.1886112253233 1641.7790481895356 1646.3823560663461 1650.998570943908 1655.627729011561 1660.269866560112 1664.9250199821258 1669.5932257722009 1674.2745205272677 1678.9689409468642 1683.6765238334306 1688.397306092596 1693.1313247334679 1697.87861686892 1702.6392197158866 1707.4131705956536 1712.2005069341462 1717.0012662622305 1721.8154862160025 1726.6432045370846 1731.4844590729206 1736.3392877770732 1741.2077287095196 1746.0898200369559 1750.9856000330892 1755.8951070789394 1760.8183796631415 1765.7554563822503 1770.7063759410364 1775.6711771527937 1780.6498989396432 1785.6425803328375 1790.649260473067 1795.669978610768 1800.7047741064275 1805.7536864308945 1810.8167551656884 1815.8940200033098 1820.98552074755 1826.091297313806 1831.2113897293902 1836.3458381338476 1841.494682779266 1846.6579640305958 1851.8357223659652 1857.027998376996 1862.234832769123 1867.4562663619147 1872.6923400893893 1877.9430950003407 1883.2085722586542 1888.488813143636 1893.7838590503316 1899.0937514898524 1904.4185320897002 1909.7582425940957 1915.1129248643033 1920.48262087896 1925.8673727344062 1931.2672226450122 1936.6822129435136 1942.1123860813389 1947.557784628944 1953.018451276148 1958.4944288324652 1963.9857602274396 1969.4924885109876 1975.0146568537257 1980.5523085473183 1986.1054870048138 1991.6742357609814 1997.2585984726568 2002.8586189190848 2008.474341002258 2014.1058087472647 2019.7530663026355 2025.4161579406841 2031.0951280578568 2036.790021175084 2042.5008819381235 2048.2277551179145 2053.9706856109283 2059.7297184395165 2065.5048987522687 2071.2962718243652 2077.10388305793 2082.927777982389 2088.768002254826 2094.62460166034 2100.497622112403 2106.387109653224 2112.2931104541053 2118.2156708158113 2124.1548371689237 2130.110656074209 2136.08317422298 2142.072438437472 2148.0784956711996 2154.101393009326 2160.141177669036 2166.197896999907 2172.2715984842735 2178.3623297376075 2184.4701385088824 2190.595072680959 2196.7371802709526 2202.8965094306072 2209.0731084466843 2215.267025741327 2221.478309872454 2227.707009534127 2233.9531735569444 2240.216850908413 2246.498090693343 2252.7969421542234 2259.113454671611 2265.4476777645227 2271.799661090817 2278.1694544475836 2284.5571077715394 2290.9626711394167 2297.386194768352 2303.8277290162882 2310.2873243823597 2316.765031507295 2323.260901173812 2329.7749843070155 2336.307331974802 2342.8579953882436 2349.4270259020104 2356.0144750147606 2362.620394369546 2369.2448357542207 2375.8878511018397 2382.5494924910736 2389.229812146615 2395.928862439586 2402.6466958879478 2409.3833651569153 2416.138923059372 2422.913422556278 2429.7069167570858 2436.519458920164 2443.3511024532077 2450.2019009136575 2457.071908009127 2463.9611775978096 2470.8697636889137 2477.7977204430854 2484.745102172822 2491.7119633429115 2498.6983585708495 2505.7043426272726 2512.729970436385 2519.7752970763886 2526.840377779921 2533.9252679344804 2541.0300230828643 2548.154698923603 2555.2993513114034 2562.464036257574 2569.6488099304725 2576.8537286559476 2584.0788489177717 2591.3242273580936 2598.5899207778775 2605.875986137348 2613.18248055644 2620.509461315242 2627.856985854449 2635.225111775813 2642.613896842587 2650.023398979991 2657.4536762756543 2664.9047869800756 2672.3767895070823 2679.869742434282 2687.3837045035248 2694.9187346213707 2702.4748918595383 2710.052235455376 2717.6508248123273 2725.270719500395 2732.911979256605 2740.5746639854788 2748.2588337594957 2755.9645488195774 2763.691869575548 2771.440856606614 2779.2115706618342 2787.004072660602 2794.818423693118 2802.6546850208742 2810.5129180771223 2818.3931844673725 2826.295545969864 2834.220064536054 2842.1668022911017 2850.135821534359 2858.1271847398516 2866.1409545567767 2874.177193809989 2882.235965500495 2890.3173328059465 2898.421359081141 2906.5481078585035 2914.6976428486055 2922.870027940646 2931.065327202962 2939.2836048835306 2947.5249254104688 2955.7893533925417 2964.0769536196685 2972.387791063426 2980.721930877568 2989.0794383985253 2997.4603791459226 3005.864818823096 3014.292823317596 3022.7444587017208 3031.219791233022 3039.7188873548275 3048.2418136967613 3056.788637075271 3065.359424494145 3073.954243145041 3082.5731604080124 3091.2162438520363 3099.883561235543 3108.5751805069476 3117.291169805183 3126.031597460233 3134.7965319936707 3143.58604211919 3152.4001967431504 3161.239064965114 3170.1027160783874 3178.9912195705706 3187.904645124089 3196.8430626167533 3205.806542122294 3214.7951539109254 3223.808968449886 3232.848056403997 3241.912488636209 3251.0023362081643 3260.117670380751 3269.258562614663 3278.4250845709594 3287.6173081116276 3296.8353053001415 3306.079148402034 3315.348909885458 3324.64466242176 3333.9664788860414 3343.314432357736 3352.6885961211856 3362.089043666206 3371.5158486886708 3380.969085091084 3390.44882698316 3399.9551486824093 3409.4881247147155 3419.0478298149255 3428.6343389274266 3438.2477272067417 3447.8880700181153 3457.555442938107 3467.24992175518 3476.971582470297 3486.72050129752 3496.496754664598 3506.3004192135777 3516.1315718013943 3525.9902895004807 3535.876649599374 3545.7907296033077 3555.732607234836 3565.702360434434 3575.700067361107 3585.72580639301 3595.779656128063 3605.8616953845535 3615.9720032017713 3626.1106588406183 3636.2777417842303 3646.473331738607 3656.6975086332295 3666.950352621687 3677.2319440823126 3687.542363618804 3697.881692060861 3708.2500104648216 3718.647400114288 3729.073942520775 3739.5297194243394 3750.0148127942307 3760.5293048295225 3771.0732779597624 3781.646814845622 3792.2499983795406 3802.882911686374 3813.545638124051 3824.2382612842225 3834.960864992917 3845.7135333111987 3856.496350535827 3867.309401199917 3878.152770073603 3889.026542164703 3899.930802719383 3910.8656372228284 3921.8311313999093 3932.827371215862 3943.854442876949 3954.9124328311464 3966.001427768817 3977.121514623394 3988.2727805720547 3999.4553130364106 4010.66919968319 4021.9145284249266 4033.1913874206466 4044.4998650765597 4055.8400500467615 4067.2120312339102 4078.615897789941 4090.0517391167546 4101.519644866924 4113.019704944393 4124.552009505185 4136.1166489581055 4147.713713965455 4159.343295443735 4171.0054845643635 4182.700372754399 4194.428051697235 4206.1886133333355 4217.98214986096 4229.808753736866 4241.668517677058 4253.561534657497 4265.487897914835 4277.447700947141 4289.44103751465 4301.468001640473 4313.528687611365 4325.623189978435 4337.751603557903 4349.914023431835 4362.110544948903 4374.341263725114 4386.606275644572 4398.9056768602295 4411.239563794634 4423.608033140682 4436.011181862393 4448.449107195653 4460.921906648981 4473.429678004307 4485.972519317711 4498.550528920226 4511.163805418573 4523.812447695967 4536.496554912866 4549.216226507765 4561.971562197969 4574.762661980377 4587.5896261322605 4600.452555212054 4613.35155006015 4626.286711799668 4639.258141837285 4652.2659418639905 4665.310213855898 4678.3910600750605 4691.508583070249 4704.662885677772 4717.854071022268 4731.082242517532 4744.347503867308 4757.649959066115 4770.989712400055 4784.366868447634 4797.781532080579 4811.233808464663 4824.723803060533 4838.2516216245185 4851.817370209497 4865.421155165681 4879.063083141484 4892.743261084339 4906.461796241551 4920.218796161127 4934.014368692631 4947.848621988012 4961.721664502462 4975.633604995265 4989.584552530659 5003.574616478672 5017.603906515994 5031.672532626831 5045.780605103768 5059.928234548637 5074.115531873383 5088.342608300921 5102.6095753660275 5116.916544916215 5131.263629112576 5145.650940430707 5160.078591661562 5174.546695912347 5189.055366607397 5203.604717489087 5218.194862618691 5232.8259163773055 5247.497993466735 5262.21120891038 5276.96567805416 5291.761516567408 5306.598840443774 5321.477766002141 5336.398409887517 5351.360889071992 5366.365320855602 5381.411822867294 5396.500513065824 5411.631509740684 5426.804931513036 5442.020897336635 5457.279526498765 5472.580938621181 5487.92525366103 5503.312591911805 5518.743074004288 5534.216820907487 5549.733953929595 5565.294594718928 5580.898865264893 5596.546887898931 5612.238785295491 5627.974680472969 5643.754696794706 5659.5789579699185 5675.447588054695 5691.360711452955 5707.318452917434 5723.320937550645 5739.368290805884 5755.460638488189 5771.598106755335 5787.780822118838 5804.008911444924 5820.282501955534 5836.6017212293245 5852.96669720266 5869.377558170623 5885.8344327880095 5902.3374500703485 5918.88673939492 5935.482430501744 5952.1246534946185 5968.813538842137 5985.549217378703 6002.331820305559 6019.161479191824 6036.038325975507 6052.962492964565 6069.93411283792 6086.9533186465005 6104.020243814296 6121.1350221394005 6138.297787795051 6155.508675330697 6172.767819673035 6190.075356127078 6207.431420377218 6224.836148488286 6242.289676906619 6259.792142461123 6277.343682364355 6294.944434213602 6312.5945359919515 6330.294126069369 6348.043343203796 6365.842326542226 6383.691215621802 6401.590150370915 6419.539271110285 6437.538718554073 6455.588633810987 6473.689158385381 6491.840434178356 6510.0426034889015 6528.295809014979 6546.6001938546615 6564.9559015072455 6583.363075874375 6601.8218612611745 6620.33240237739 6638.894844338494 6657.509332666849 6676.176013292847 6694.895032556041 6713.6665372063 6732.490674404961 6751.367591725978 6770.2974371570745 6789.280359100919 6808.316506376276 6827.406028219176 6846.549074284085 6865.745794645072 6884.996339797004 6904.30086065671 6923.659508564162 6943.072435283672 6962.5397930050785 6982.061734344933 7001.6384123476955 7021.2699804869535 7040.956592666612 7060.69840322209 7080.495566921541 7100.3482389670735 7120.256574995957 7140.220731081844 7160.240863735994 7180.317129908501 7200.449686989531 7220.638692810538 7240.884305645517 7261.186684212238 7281.545987673499 7301.962375638361 7322.436008163409 7342.967045754 7363.555649365525 7384.201980404679 7404.9062007306975 7425.668472656669 7446.48895895077 7467.367822837556 7488.305227999243 7509.30133857699 7530.3563191721805 7551.470334847718 7572.643551129314 7593.876134006792 7615.168249935395 7636.520065837067 7657.931749101792 7679.403467588876 7700.935389628291 7722.527684021976 7744.180520045161 7765.894067447705 7787.668496455423 7809.503977771416 7831.400682577403 7853.358782535088 7875.378449787473 7897.45985696023 7919.603177163052 7941.8085839910045 7964.076251525881 7986.406354337586 8008.799067485481 8031.2545665197795 8053.773027482905 8076.35462691088 8098.999541834712 8121.7079497817695 8144.480028777185 8167.315957345251 8190.215914510809 8213.180079800673 8236.208633245005 8259.301755378752 8282.459627243066 8305.682430386705 8328.97034686746 8352.32355925358 8375.742250625224 8399.226604575875 8422.776805213774 8446.39303716339 8470.075485566833 8493.824336085363 8517.639774900756 8541.521988716842 8565.471164760947 8589.487490785343 8613.571155068736 8637.722346417731 8661.941254168336 8686.228068187407 8710.582978874178 8735.006177161724 8759.497854518471 8784.058202949695 8808.687414999027 8833.385683749955 8858.153202827356 8882.990166399006 8907.89676917708 8932.873206419712 8957.919673932507 8983.036368070083 9008.223485737602 9033.48122439233 9058.809782045157 9084.209357262174 9109.68014916624 9135.222357438493 9160.83618231998 9186.521824613172 9212.279485683572 9238.109367461268 9264.011672442542 9289.98660369146 9316.034364841416 9342.155160096785 9368.3491942345 9394.616672605656 9420.957801137121 9447.37278633315 9473.861835277012 9500.4251556326 9527.062955646074 9553.775444147474 9580.562830552373 9607.425324863525 9634.36313767249 9661.376480161309 9688.465564104126 9715.630601868876 9742.871806418956 9770.18939131487 9797.58357071591 9825.054559381846 9852.602572674603 9880.227826559947 9907.930537609192 9935.710923000863 9963.56920052244 9991.505588572038 10019.520306160137 10047.61357291127 10075.785609065802 10104.036635481578 10132.366873635718 10160.77654562635 10189.265874174285 10217.835082624859 10246.484394949606 10275.214035748051 10304.02423024947 10332.915204314626 10361.887184437588 10390.940397747478 10420.075072010231 10449.29143563044 10478.589717653093 10507.97014776538 10537.43295629851 10566.97837422949 10596.606633182986 10626.317965433082 10656.112603905123 10685.990782177549 10715.952734483722 10745.998695713759 10776.128901416365 10806.3435878007 10836.642991738217 10867.027350764529 10897.496903081234 10928.051887557856 10958.692543733647 10989.419111819494 11020.23183269981 11051.130947934409 11082.116699760392 11113.189331094074 11144.34908553285 11175.59620735715 11206.93094153232 11238.353533710557 11269.86423023283 11301.463278130794 11333.150925128773 11364.927419645666 11396.793010796877 11428.747948396333 11460.792482958372 11492.926865699748 11525.151348541596 11557.46618411139 11589.87162574494 11622.367927488373 11654.955344100124 11687.634131052937 11720.404544535857 11753.266841456236 11786.221279441796 11819.268116842544 11852.40761273293 11885.640026913768 11918.96561991434 11952.384652994398 11985.897388146232 12019.504088096717 12053.205016309383 12087.000436986476 12120.890615071014 12154.875816248874 12188.956306950895 12223.132354354939 12257.404226387998 12291.772191728285 12326.236519807353 12360.797480812207 12395.455345687413 12430.210386137214 12465.062874627687 12500.013084388856 12535.06128941685 12570.207764476028 12605.452785101168 12640.796627599599 12676.239569053365 12711.781887321411 12747.423861041776 12783.165769633737 12819.007893300022 12854.950513029034 12890.993910596992 12927.1383685702 12963.384170307221 12999.731599961113 13036.180942481667 13072.732483617634 13109.386509918946 13146.143308738998 13183.003168236863 13219.966377379586 13257.033225944426 13294.204004521134 13331.47900451424 13368.858518145322 13406.342838455306 13443.932259306757 13481.627075386199 13519.427582206408 13557.334076108727 13595.346854265405 13633.466214681926 13671.692456199313 13710.025878496523 13748.466782092759 13787.015468349828 13825.672239474517 13864.43739852095 13903.31124939299 13942.294096846595 13981.38624649219 14020.58800479711 14059.899679087981 14099.32157755312 14138.854009244955 14178.497284082458 14218.251712853578 14258.117607217644 14298.095279707852 14338.185043733687 14378.387213583392 14418.702104426424 14459.130032315934 14499.671314191228 14540.326267880266 14581.095212102171 14621.978466469702 14662.976351491736 14704.089188575843 14745.31730003076 14786.661009068928 14828.120639809036 14869.69651727855 14911.388967416255 14953.198317074834 14995.124894023433 15037.169026950174 15079.331045464807 15121.61128010124 15164.010062320154 15206.527724511605 15249.16459999761 15291.921023034782 15334.797328816943 15377.793853477724 15420.910934093265 15464.148908684783 15507.50811622128 15550.98889662217 15594.59159075995 15638.316540462863 15682.164088517615 15726.134578672025 15770.228355637704 15814.445765092809 15858.787153684734 15903.252869032805 15947.84325973103 15992.558675350827 16037.399466443749 16082.36598454425 16127.458582172447 16172.677612836847 16218.023431037162 16263.496392267074 16309.096853017 16354.8251707769 16400.681704039107 16446.666812301115 16492.780856068344 16539.024196857114 16585.397197197275 16631.90022063524 16678.533631736693 16725.297796089555 16772.1930803068 16819.219852029277 16866.378479928706 16913.669333710503 16961.092784116623 17008.64920292861 17056.338962970367 17104.162438111183 17152.12000326859 17200.21203441135 17248.43890856237 17296.801003801695 17345.298699269442 17393.93237516878 17442.70241276891 17491.609194408087 17540.653103496534 17589.834524519538 17639.15384304039 17688.611445703493 17738.2077202373 17787.943055457417 17837.817841269636 17887.832468672987 17937.987329762804 17988.28281773379 18038.71932688313 18089.297252613527 18140.01699143633 18190.87894097468 18241.883499966614 18293.031068268134 18344.322046856374 18395.75683783277 18447.335844426172 18499.059470996053 18550.928123035646 18602.942207175103 18655.102131184736 18707.40830397814 18759.86113561549 18812.461037306708 18865.208421414656 18918.10370145843 18971.14729211657 19024.339609230276 19077.681069806746 19131.17209202242 19184.813095226207 19238.604499942798 19292.546727876022 19346.64020191207 19400.885346122865 19455.282585769335 19509.832347304797 19564.535058378282 19619.3911478379 19674.401045734136 19729.565183323324 19784.883993070966 19840.357908655118 19895.98736496984 19951.7727981285 20007.71464546736 20063.813345548846 20120.069338165074 20176.48306434126 20233.05496633917 20289.785487660654 20346.675073051065 20403.724168502722 20460.93322125846 20518.30267981514 20575.832993927113 20633.52461460977 20691.37799414313 20749.393586075294 20807.571845226033 20865.91322769042 20924.418190842327 20983.087193338 21041.92069511976 21100.919157419474 21160.083042762275 21219.41281497014 21278.90893916553 21338.571881775024 21398.40211053303 21458.400094485387 21518.566303993073 21578.90121073591 21639.4052877162 21700.07900926254 21760.922851033403 21821.937290020993 21883.122804554878 21944.479874305835 22006.00898028956 22067.710604870445 22129.58523176535 22191.63334604741 22253.85543414983 22316.25198386972 22378.82348437189 22441.570426192702 22504.49330124391 22567.592602816487 22630.86882558457 22694.322465609268 22757.95402034256 22821.76398863121 22885.7528707207 22949.921168259094 23014.269384301042 23078.798023311654 23143.5075911705 23208.398595175524 23273.47154404715 23338.726947932104 23404.16531840751 23469.78716848485 23535.59301261406 23601.583366687497 23667.758748044023 23734.11967547302 23800.666669218463 23867.40025098306 23934.320943932275 24001.429272698453 24068.725763384937 24136.210943570157 24203.885342311834 24271.749490151058 24339.80391911651 24408.0491627286 24476.485756003618 24545.114235457975 24613.935139112404 24682.949006496165 24752.15637865128 24821.557798136786 24891.15380903293 24960.944956945557 25030.931789010236 25101.114853896677 25171.494701812946 25242.071884509805 25312.8469552851 25383.820468987986 25454.992982023334 25526.36505235615 25597.937239515843 25669.71010460067 25741.6842102821 25813.86012080931 25886.238402013518 25958.819621312425 26031.604347714732 26104.593151824527 26177.78660584579 26251.185283586892 26324.789760465083 26398.600613510982 26472.618421373103 26546.843764322453 26621.277224256988 26695.919384706245 26770.770830835885 26845.832149452275 26921.103929007153 26996.586759602116 27072.281232993377 27148.1879425963 27224.307483490138 27300.64045242265 27377.187447814747 27453.94906976529 27530.925920055706 27608.118602154707 27685.527721223065 27763.153884118317 27840.99769939956 27919.059777332175 27997.340729892676 28075.84117077343 28154.56171538754 28233.50298087361 28312.665586100633 28392.0501516728 28471.657299934395 28551.487654974666 28631.54184263272 28711.820490502414 28792.324227937286 28873.053686055493 28954.009497744766 29035.192297667323 29116.602722264943 29198.241409763847 29280.109000179757 29362.206135322907 29444.53345880309 29527.09161603466 29609.88125424164 29692.903022462768 29776.15757155657 29859.645554206538 29943.367624926133 30027.324440064 30111.516657809098 30195.944938195822 30280.609943109266 30365.51233629029 30450.65278334083 30536.03195172904 30621.650510794578 30707.509131753803 30793.6084877051 30879.949253634113 30966.532106419036 31053.357724835954 31140.42678956413 31227.73998319134 31315.29799021924 31403.101497068747 31491.15119208535 31579.44776554463 31667.991909657576 31756.784318575985 31845.825688398 31935.116717173525 32024.65810490969 32114.450553576324 32204.494767111486 32294.791451426972 32385.34131441387 32476.14506594807 32567.20341789585 32658.517084119474 32750.086780482747 32841.913224856646 32933.99713712501 33026.33923919005 33118.940254978166 33211.80091044549 33304.92193358361 33398.30405442534 33491.94800505036 33585.85451959108 33680.02433423814 33774.458187246535 33869.156818941105 33964.120971722485 34059.351390072945 34154.848820562096 34250.61401185283 34346.64771470722 34442.95068199233 34539.52366868615 34636.367431883606 34733.48273080225 34830.870326788514 34928.53098332341 35026.4654660288 35124.674542673085 35223.15898317745 35321.91955962177 35420.95704625078 35520.27221948007 35619.86585790221 35719.73874229275 35819.89165561646 35920.32538303349 36021.040711905356 36122.038431801295 36223.31933450437 36324.88421401764 36426.73386657051 36528.869090624816 36631.290686881206 36733.99945828543 36836.996210034464 36940.281749582944 37043.85688664964 37147.72243322354 37251.87920357034 37356.32801423879 37461.069684067195 37566.10503418976 37671.434888042924 37777.06007137204 37882.98141223767 37989.19974102213 38095.71589043604 38202.53069552484 38309.64499367523 38417.05962462189 38524.775430453985 38632.79325562173 38741.113946943085 38849.73835361041 38958.667327197014 39067.901721663875 39177.44239336639 39287.29020106109 39397.44600591226 39507.91067149881 39618.68506382099 39729.77005130717 39841.16650482067 39952.87529766659 40064.89730559867 40177.233406826104 40289.88448202046 40402.85141432258 40516.13508934957 40629.73639520154 40743.6562224688 40857.89546423877 40972.45501610288 41087.335776163716 41202.53864504192 41318.0645258835 41433.914324366604 41550.088948708915 41666.589309674484 41783.41632058108 41900.570897307254 42018.05395829962 42135.86642457995 42254.00921975231 42372.483270010554 42491.28950414538 42610.428853551755 42729.90225223603 42849.71063682347 42969.85494656547 43090.33612334691 43211.15511169357 43332.312858779645 43453.810314434966 43575.64843115258 43697.82816409623 43820.35047110771 43943.216312714554 44066.426652137416 44189.982455297664 44313.88469082499 44438.134330065004 44562.73234708684 44687.67971869069 44812.977424415665 44938.62644654729 45064.627770125255 45190.982382951224 45317.691275596495 45444.75544140974 45572.17587652487 45699.95357986879 45828.08955316927 45956.58480096279 46085.44033060237 46214.65715226551 46344.23627896206 46474.17872654232 46604.485513704785 46735.157662004254 46866.19619585981 46997.60214256288 47129.376532285234 47261.520398087094 47394.03477592526 47526.92070466121 47660.17922606921 47793.81138484449 47927.81822861151 48062.20080793206 48196.96017631356 48332.097390217365 48467.613509066956 48603.50959525622 48739.786714157985 48876.445934132076 49013.488326533945 49150.914965722906 49288.72692907066 49426.92529696967 49565.5111528417 49704.485583146205 49843.84967738901 49983.604528130665 50123.75123099515 50264.29088467839 50405.22459095692 50546.55345469647 50688.27858386062 50830.401089519575 50972.9220858588 51115.84269018777 51259.16402294875 51402.887207725544 51547.01337125228 51691.543643422374 51836.47915729722 51981.82104911514 52127.5704583004 52273.72852747194 52420.29640245249 52567.27523227755 52714.66616920421 52862.470368720424 53010.68898955391 53159.32319368136 53308.374146337446 53457.84301602392 53607.73097451892 53758.03919688605 53908.768861483644 54059.92114997397 54211.497247332445 54363.49834185706 54515.92562517759 54668.780292264935 54822.0635414406 54975.77657438594 55129.92059615169 55284.49681516734 55439.50644325063 55594.95069561709 55750.83079088956 55907.14795110762 56063.90340173735 56221.09837168084 56378.73409328582 56536.811802355405 56695.33273815768 56854.29814343542 57013.70926441596 57173.567350820755 57333.87365587542 57494.62943631935 57655.835952415626 57817.49446796105 57979.606250295816 58142.172570313545 58305.194702471344 58468.67392479962 58632.61151891224 58797.008770016546 58961.8669669234 59127.187402057236 59292.97137146637 59459.22017483293 59625.93511548326 59793.11750039797 59960.768640222326 60128.88984927636 60297.4824455653 60466.54775078992 60636.08709035676 60806.10179338875 60976.5931927353 61147.56262498307 61319.011430466206 61490.940953277095 61663.35254127665 61836.24754610499 62009.62732319214 62183.49323176843 62357.84663487531 62532.68889937601 62708.02139596631 62883.84549918509 63060.16258742529 63236.97404294473 63414.281251876775 63592.08560424134 63770.388493955776 63949.19131884581 64128.49548065637 64308.30238506271 64488.61344168142 64669.43006408142 64850.75366979509 65032.58568032931 65214.92752117673 65397.78062182687 65581.14641577729 65765.02634054486 65949.42183767704 66134.3343527632 66319.76533544596 66505.71623943246 66692.18852250582 66879.18364653668 67066.70307749443 67254.74828545879 67443.32074463158 67632.42193334784 67822.05333408773 68012.21643348811 68202.91272235407 68394.14369567076 68585.91085261504 68778.21569656726 68971.05973512295 69164.44448010481 69358.37144757445 69552.8421578442 69747.85813548922 69943.42090935932 70139.53201259107 70336.19298261956 70533.40536119077 70731.17069437337 70929.49053257116 71128.36643053495 71327.7999473748 71527.7926465723 71728.3460959929 71929.461867898 72131.14153895751 72333.38669026208 72536.19890733525 72739.57978014654 72943.53090312329 73148.05387516333 73353.15029964762 73558.82178445293 73765.06994196394 73971.89638908656 74179.30274726005 74387.29064247 74595.86170526122 74805.01757074994 75014.75987863734 75225.0902732219 75436.01040341258 75647.5219227417 75859.6264893776 76072.3257661381 76285.62142050327 76499.51512462845 76714.00855535766 76929.10339423628 77144.80132752476 77361.10404621135 77578.01324602569 77795.53062745203 78013.65789574246 78232.3967609304 78451.74893784393 78671.7161461193 78892.30011021426 79113.50255942171 79335.32522788335 79557.76985460313 79780.83818346084 80004.53196322588 80228.8529475709 80453.80289508562 80679.38356929069 80905.59673865128 81132.44417659112 81359.9276615064 81588.04897677964 81816.80991079361 82046.21225694561 82276.25781366132 82506.94838440885 82738.28577771306 82970.27180716967 83202.90829145923 83436.19705436191 83670.1399247713 83904.73873670911 84139.99532933916 84375.91154698217 84612.48923913 84849.73026046024 85087.63647085073 85326.20973539412 85565.4519244125 85805.36491347212 86045.95058339792 86287.21082028851 86529.14751553092 86771.76256581512 87015.05787314929 87259.03534487441 87503.69689367966 87749.04443761679 87995.07990011566 88241.80520999919 88489.22230149829 88737.3331142673 88986.13959339891 89235.64368943973 89485.84735840534 89736.75256179574 89988.3612666106 90240.6754453648 90493.69707610404 90747.42814241986 91001.87063346578 91257.02654397246 91512.89787426352 91769.48663027119 92026.79482355205 92284.82447130287 92543.57759637611 92803.05622729627 93063.26239827539 93324.19814922924 93585.86552579324 93848.26657933826 94111.4033669871 94375.27795163034 94639.89240194269 94905.248792399 95171.34920329074 95438.19572074222 95705.79043672698 95974.13544908396 96243.23286153424 96513.08478369749 96783.69333110838 97055.06062523316 97327.18879348654 97600.07996924798 97873.73629187877 98148.1599067386 98423.35296520244 98699.31762467753 98976.05604861987 99253.57040655176 99531.86287407833 99810.9356329049 100090.79087085396 100371.43078188227 100652.85756609819 100935.07342977884 101218.08058538743 101501.8812515905 101786.4776532755 102071.8720215682 102358.06659384993 102645.0636137755 102932.86533129042 103221.47400264896 103510.89189043136 103801.12126356194 104092.16439732663 104384.02357339115 104676.70107981839 104970.19921108687 105264.52026810833 105559.66655824604 105855.64039533272 106152.4440996887 106450.07999814027 106748.55042403772 107047.85771727365 107348.00422430155 107648.99229815385 107950.82429846068 108253.50259146804 108557.02955005674 108861.4075537607 109166.63898878575 109472.72624802818 109779.67173109378 110087.47784431635 110396.14700077675 110705.68162032175 111016.08412958296 111327.35696199606 111639.50255781961 111952.52336415427 112266.42183496214 112581.20043108574 112896.86162026762 113213.40787716916 113530.84168339071 113849.16552749046 114168.38190500425 114488.4933184649 114809.50227742217 115131.411298462 115454.22290522663 115777.93962843418 116102.56400589852 116428.09858254925 116754.54591045139 117081.90854882578 117410.18906406884 117739.39002977281 118069.5140267459 118400.56364303252 118732.54147393364 119065.450122027 119399.29219718762 119734.0703166082 120069.78710481965 120406.44519371184 120744.04722255381 121082.59583801497 121422.09369418539 121762.54345259696 122103.94778224411 122446.30935960475 122789.6308686611 123133.91500092109 123479.16445543893 123825.38193883697 124172.57016532627 124520.73185672823 124869.8697424958 125219.98655973494 125571.08505322602 125923.16797544544 126276.23808658714 126630.29815458413 126985.35095513039 127341.39927170258 127698.44589558171 128056.49362587517 128415.54526953863 128775.6036413982 129136.67156417214 129498.75186849327 129861.84739293114 130225.96098401415 130591.09549625199 130957.25379215802 131324.43874227165 131692.6532251808 132061.90012754453 132432.18234411578 132803.50277776376 133175.86433949714 133549.26994848647 133923.72253208718 134299.2250258628 134675.78037360765 135053.39152736985 135432.06144747484 135811.79310254828 136192.58946953947 136574.45353374459 136957.38828883017 137341.39673685643 137726.48188830126 138112.6467620833 138499.89438558565 138888.22779467967 139277.65003374932 139668.16415571424 140059.77322205406 140452.4803028323 140846.28847672066 141241.2008310229 141637.220461699 142034.35047338967 142432.5939794407 142831.95410192688 143232.43397167712 143634.0367282988 144036.76552020223 144440.6235046251 144845.61384765792 145251.7397242682 145659.00431832593 146067.41082262772 146476.96243892272 146887.66237793706 147299.5138593994 147712.520112066 148126.68437374625 148542.00989132762 148958.49992080152 149376.15772728866 149794.98658506467 150214.98977758578 150636.17059751446 151058.5323467455 151482.07833643167 151906.81188700948 152332.73632822573 152759.85499916328 153188.17124826726 153617.68843337154 154048.40992172444 154480.33909001583 154913.47932440342 155347.8340205391 155783.40658359556 156220.20042829323 156658.21897892674 157097.4656693923 157537.94394321393 157979.65725357085 158422.60906332458 158866.80284504592 159312.2420810424 159758.9302633852 160206.87089393684 160656.06748437858 161106.52355623784 161558.24264091617 162011.22827971628 162465.48402387032 162921.0134345676 163377.82008298254 163835.90755030265 164295.27942775632 164755.93931664122 165217.89082835295 165681.13758441253 166145.6832164952 166611.5313664591 167078.6856863735 167547.1498385476 168016.9274955592 168488.02234028306 168960.4380659208 169434.17837602898 169909.24698454814 170385.64761583257 170863.38400467875 171342.45989635537 171822.879046632 172304.6452218088 172787.7621987463 173272.23376489474 173758.06371832374 174245.25586775213 174733.81403257782 175223.74204290812 175715.043739589 176207.7229742354 176701.7836092622 177197.2295179136 177694.06458429378 178192.29270339772 178691.9177811408 179192.9437343904 179695.37449099624 180199.213989821 180704.4661807716 181211.13502482968 181719.2244940829 182228.73857175623 182739.68125224288 183252.05654113583 183765.8684552591 184281.12102269928 184797.8182828373 185315.96428637957 185835.56309539053 186356.61878332365 186879.13543505414 187403.11714691023 187928.5680267059 188455.49219377284 188983.89377899247 189513.776924829 190045.14578536127 190578.00452631555 191112.35732509833 191648.2083708287 192185.56186437162 192724.42201837056 193264.79305728065 193806.6792174018 194350.08474691192 194895.0139059002 195441.47096640032 195989.46021242422 196538.98593999568 197090.05245718377 197642.66408413678 198196.82515311602 198752.54000853 199309.81300696815 199868.64851723515 200429.05092038526 200991.02460975663 201554.57399100545 202119.70348214087 202686.41751355943 203254.7205280799 203824.6169809782 204396.11134002195 204969.2080855058 205543.91171028663 206120.2267198184 206698.1576321879 207277.70897814995 207858.88530116293 208441.6911574243 209026.13111590644 209612.20975839268 210199.9316795128 210789.30148677924 211380.32380062324 211973.00325443124 212567.34449458082 213163.3521804772 213761.03098459032 214360.38559249064 214961.4207028865 215564.14102766057 216168.55129190718 216774.65623396882 217382.46060547378 217991.9691713733 218603.1867099785 219216.11801299866 219830.76788557807 220447.14114633386 221065.24262739392 221685.07717443485 222306.64964671966 222929.96491713615 223555.02787223482 224181.8434122674 224810.4164512252 225440.75191687772 226072.8547508111 226706.72990846727 227342.3823591819 227979.81708622444 228619.03908683662 229260.05337227156 229902.86496783333 230547.47891291627 231193.90026104412 231842.1340799103 232492.185451417 233144.05947171568 233797.76125124647 234453.29591477846 235110.6686014495 235769.8844648076 236430.9486728498 237093.8664080638 237758.64286746824 238425.2832626534 239093.79281982206 239764.17677983042 240436.44039822946 241110.58894530602 241786.6277061237 242464.5619805649 243144.39708337217 243826.13834418962 244509.79110760492 245195.36073319145 245882.85259554983 246572.27208435003 247263.62460437455 247956.91557555928 248652.15043303746 249349.33462718135 250048.47362364532 250749.57290340879 251452.6379628186 252157.67431363315 252864.68748306442 253573.6830138223 254284.66646415726 254997.6434079046 255712.61943452794 256429.6001491624 257148.5911726597 257869.59814163114 258592.62670849235 259317.68254150785 260044.77132483467 260773.89875856772 261505.07055878403 262238.29245758755 262973.5702031542 263710.90955977706 264450.31630791194 265191.7962442208 265935.3551816207 266680.99894932494 267428.7333928928 268178.5643742728 268930.49777184986 269684.53948049084 270440.695411591 271198.9714931208 271959.3736696707 272721.9079024999 273486.58016958175 274253.39646565093 275022.3628022506 275793.48520777933 276566.76972753875 277342.22242378024 278119.84937575244 278899.6566797499 279681.6504491608 280465.8368145136 281252.2219235256 282040.81194115244 282831.6130496344 283624.63144854666 284419.87335484603 285217.3450029218 286017.052644643 286819.00254940847 287623.2010041947 288429.6543136069 289238.36879992706 290049.3508031638 290862.60668110196 291678.1428093534 292495.96558140573 293316.08140867326 294138.4967205465 294963.2179644435 295790.2516058597 296619.60412841913 297451.2820339244 298285.29184240894 299121.6400921868 299960.33333990467 300801.37816059287 301644.781147718 302490.548913233 303338.6880876294 304189.20531999075 305042.1072780432 305897.4006482082 306755.09213565453 307615.1884643518 308477.69637712254 309342.6226356951 310209.9740207566 311079.7573320067 311951.9793882099 312826.64702724956 313703.7671061816 314583.3465012881 315465.3921081314 316349.9108416076 317236.9096360016 318126.39544504083 319018.3752419499 319912.8560195053 320809.84479009005 321709.34858574974 322611.37445824547 323515.9294791115 324423.0207397094 325332.6553512832 326244.8404450166 327159.5831720879 328076.89070372627 328996.7702312677 329919.22896621213 330844.2741402787 331771.9130054642 332702.15283409815 333635.000918901 334570.4645730412 335508.5511301912 336449.2679445872 337392.62239108514 338338.62186521903 339287.27378325816 340238.58558226697 341192.5647201622 342149.21867577074 343108.55494888977 344070.5810603444 345035.30455204734 346002.73298705736 346972.8739496391 347945.73504532274 348921.3239009627 349899.6481647983 350880.71550651325 351864.5336172959 352851.11020989943 353840.4530187029 354832.5697997713 355827.4683309162 356825.1564117572 357825.641863783 358828.93253041257 359835.0362770565 360843.96099117893 361855.71458235924 362870.30498235417 363887.7401451602 364908.028047075 365931.17668676144 366957.1940853088 367986.08828629623 369017.8673558568 370052.53938273917 371090.1124783717 372130.594776926 373173.9944353806 374220.3196335856 375269.5785743253 376321.77948338387 377376.9306096098 378435.0402249796 379496.1166246631 380560.16812708904 381627.20307400957 382697.22983056575 383770.256785353 384846.2923504882 385925.3449616738 387007.42307826446 388092.5351833344 389180.6897837423 390271.8954101994 391366.1606173361 392463.4939837681 393563.90411216434 394667.3996293143 395773.9891861965 396883.68145804456 397996.4851444165 399112.40896926314 400231.46168099507 401353.65205255285 402478.98888147506 403607.4809899667 404739.1372249699 405873.9664582314 407011.97758637316 408153.17953096237 409297.581238581 410445.1916808955 411596.01985472743 412750.0747821251 413907.36551043246 415067.9011123611 416231.6906860608 417398.743355192 418569.0682689963 419742.6746023681 420919.57155592676 422099.7683560894 423283.27425514214 424470.0985313138 425660.2504888473 426853.7394580733 428050.574795484 429250.7658838054 430454.32213207113 431661.2529756965 432871.56787655264 434085.2763230401 435302.38783016347 436522.9119396063 437746.8582198054 438974.2362660257 440205.05570043664 441439.3261721863 442677.0573574781 443918.25895964535 445162.94070922834 446411.11236405047 447662.7837092945 448917.9645575802 450176.66474903957 451438.8941513949 452704.6626600366 453973.9801980999 455246.85671654367 456523.3021942269 457803.3266379887 459086.94008272537 460374.15259146964 461664.97425547 462959.4151942681 464257.4855557811 465559.1955163779 466864.55528096115 468173.57508304634 469486.2651848425 470802.63587733207 472122.69748035184 473446.4603426745 474773.93484208855 476105.1313854804 477440.0604089161 478778.7323777228 480121.1577865712 481467.3471595565 482817.31105028285 484171.060041945 485528.6047474113 486889.955809307 488255.1239000979 489624.11972217355 490996.9540079316 492373.63751986175 493754.1810506305 495138.59542316466 496526.89149073744 497919.08013705263 499315.172276331 500715.178853395 502119.110843754 503526.97925369226 504938.7951203533 506354.5695118274 507774.3135272377 509198.03829682834 510625.75498205057 512057.4747756508 513493.208901759 514932.96861597453 516376.76520545676 517824.60998901265 519276.5143171847 520732.4895723418 522192.54716876644 523656.6985527453 525124.9552026588 526597.3286290712 528073.8303748205 529554.4720151087 531039.265157594 532528.2214424803 534021.3525426084 535518.6701635486 537020.1860436915 538525.9119543416 540035.8596998068 541550.041117494 543068.4680779992 544591.1524852018 546118.1062763601 547649.3414221999 549184.8699270121 550724.703828747 552268.8551991066 553817.3361436398 555370.1588018385 556927.3353472316 558488.8779874803 560054.7989644753 561625.1105544317 563199.8250679838 564778.9548502852 566362.5122811014 567950.5097749111 569542.959781 571139.8747835597 572741.2673017862 574347.1498899776 575957.535137632 577572.4356695471 579191.864145917 580815.8332624357 582444.3557503928 584077.4443767741 585715.1119443632 587357.3712918399 589004.2352938824 590655.7168612671 592311.8289409705 593972.5845162711 595637.9966068498 597308.0782688933 598982.8425951955 600662.3027152611 602346.4717954074 604035.3630388685 605728.9896858986 607427.3650138755 609130.502337404 610838.4150084222 612551.1164163055 614268.6199879696 615990.9391879779 617718.0875186472 619450.0785201514 621186.9257706312 622928.6428862963 624675.2435215357 626426.7413690217 628183.15015982 629944.4836634963 631710.7556882246 633481.9800808931 635258.1707272166 637039.3415518424 638825.5065184609 640616.679629914 642412.8749283063 644214.1064951138 646020.388451295 647831.7349574021 649648.1602136914 651469.6784602331 653296.3039770268 655128.0510841088 656964.9341416678 658806.9675501571 660654.1657504056 662506.543223733 664364.1144920613 666226.8941180313 668094.8967051144 669968.1368977288 671846.629381352 673730.3888826382 675619.4301695337 677513.7680513917 679413.4173790881 681318.3930451383 683228.7099838151 685144.3831712638 687065.4276256213 688991.8584071331 690923.6906182709 692860.9394038524 694803.6199511583 696751.7474900527 698705.3372931019 700664.404675694 702628.9649961592 704599.0336558905 706574.6260994646 708555.757814761 710542.4443330867 712534.7012292956 714532.5441219109 716535.9886732476 718545.0505895364 720559.7456210451 722580.0895622036 724606.0982517261 726637.7875727377 728675.1734528969 730718.27186452 732767.098824709 734821.6703954737 736882.0026838613 738948.1118420796 741020.0140676248 743097.7256034091 745181.2627378877 747270.6418051843 749365.8791852234 751466.9913038552 753573.9946329863 755686.9056907073 757805.7410414234 759930.5172959843 762061.251111814 764197.9591930406 766340.6582906297 768489.3652025129 770644.0967737212 772804.8698965168 774971.7015105245 777144.6086028662 779323.6082082925 781508.7174093177 783699.9533363532 785897.3331678403 788100.8741303864 790310.5934989012 792526.5085967288 794748.6367957869 796976.9955167011 799211.6022289414 801452.4744509596 803699.6297503272 805953.0857438726 808212.8600978188 810478.9705279225 812751.4347996128 815030.2707281307 817315.4961786682 819607.1290665091 821905.1873571683 824209.6890665338 826520.6522610073 828838.0950576467 831162.0356243073 833492.4921797828 835829.4829939516 838173.0263879179 840523.1407341555 842879.844456651 845243.1560310503 847613.0939848019 849989.6768973024 852372.9234000427 854762.8521767524 857159.4819635496 859562.8315490843 861972.9197746876 864389.7655345186 866813.3877757139 869243.8054985331 871681.0377565115 874125.103656607 876576.0223593509 879033.8130789979 881498.4950836754 883970.0876955378 886448.6102909151 888934.0823004647 891426.5232093263 893925.9525572724 896432.389938862 898945.8550035943 901466.3674560634 903993.9470561118 906528.613618986 909070.3870154906 911619.2871721458 914175.334071343 916738.5477515013 919308.9483072248 921886.5558894586 924471.390705649 927063.4730199015 929662.8231531383 932269.4614832586 934883.408445299 937504.6845315925 940133.3102919292 942769.306333718 945412.6933221479 948063.4919803509 950721.7230895628 953387.4074892879 956060.5660774591 958741.2198106066 961429.3897040186 964125.096831907 966828.3623275728 969539.2073835713 972257.6532518797 974983.721244062 977717.4327314354 980458.8091452414 983207.8719768105 985964.6427777322 988729.1431600227 991501.3947962954 994281.4194199304 997069.2388252458 999864.8748676664 . Here we initialize the total population to be 50, then set the growth factor as 1.00005 (.005 percent change). It will print the population every 56th day until it reaches one million. It multiplies the current population by the growth factor in each iteration, and increments the day count. When the day count reaches 56, it prints the current population and resets the day count to 0. . Note! This simulation assumes that the growth factor remains constant as time progresses, which may not be a realistic assumption in real-world scenarios. . import matplotlib.pyplot as plt # Define the initial population and growth rate population = 100 growth_rate = 0.05 # Define the number of years to simulate num_years = 50 # Create lists to store the population and year values populations = [population] years = [0] # Simulate population growth for the specified number of years for year in range(1, num_years+1): # Calculate the new population size new_population = population + (growth_rate * population) # Update the population and year lists populations.append(new_population) years.append(year) # Set the new population as the current population for the next iteration population = new_population # Plot the population growth over time plt.plot(years, populations) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Population&#39;) plt.title(&#39;Population Growth Simulation&#39;) plt.show() . If we create quantative data, we can plot it using the Matplotlib library. . Example on how simplification can cause bias . import random beak = [&quot;small-beak&quot;, &quot;long-beak&quot;, &quot;medium-beak&quot;], wing = [&quot;small-wings&quot;, &quot;large-wings&quot;, &quot;medium-wings&quot;], height = [&quot;short&quot;, &quot;tall&quot;,&quot;medium&quot;] naturaldisaster = [&quot;flood&quot;, &quot;drought&quot;, &quot;fire&quot;, &quot;hurricane&quot;, &quot;dustbowl&quot;] print(&quot;When a&quot; , random.choice(naturaldisaster) , &quot;hit&quot;, random.choice(height), &quot;birds died&quot;) . When a hurricane hit tall birds died . How does this simulation have bias? . There&#39;s no correlation between the properties of the birds and the natural disaster. . JS examples . Dice Roll Binary Coin Flip Card Pull . Hacks . Answer all questions and prompts in the notes (0.2) | Create a simulation Create a simulation that uses iteration and some form of data collection (list, dictionary...) (0.4) try creating quantative data and using the Matplotlib library to display said data | Comment and describe function of each parts | How does your simulation help solve/mimic a real world problem? | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? | . | | Answer these simulation questions (0.3) | Bonus: take a real world event and make a pseudocode representation or pseudocode on a flowchart of how you would make a simulation for it (up to +0.1 bonus) | . import random rolls = [] # create an empty list to store the roll results for i in range(10): roll = random.randint(1, 6) # simulate rolling a die rolls.append(roll) # add the roll result to the list of rolls print(&quot;Results of 10 rolls:&quot;, rolls) print(&quot;Number of times each number was rolled:&quot;) for i in range(1, 7): count = rolls.count(i) # count how many times each number was rolled print(f&quot;{i}: {count}&quot;) . Results of 10 rolls: [6, 5, 5, 6, 6, 5, 1, 5, 4, 1] Number of times each number was rolled: 1: 2 2: 0 3: 0 4: 1 5: 4 6: 3 . Above code using matplotlib . import random import numpy as np import matplotlib.pyplot as plt rolls = [] # create an empty list to store the roll results for i in range(10000): roll = random.randint(1, 6) # simulate rolling a die rolls.append(roll) # add the roll result to the list of rolls # convert the list to a numpy array rolls_array = np.array(rolls) # calculate the frequency of each number rolled frequencies = np.zeros(6) for i in range(1, 7): count = np.sum(rolls_array == i) frequencies[i-1] = count / len(rolls_array) # plot a bar chart of the frequency data fig, ax = plt.subplots() ax.bar(range(1, 7), frequencies) ax.set_xlabel(&quot;Die Roll&quot;) ax.set_ylabel(&quot;Frequency&quot;) ax.set_title(&quot;Frequency of Die Rolls (n=10,000)&quot;) plt.show() . This simulation can be used to design and test games that involve dice rolls, such as board games or tabletop RPGs. By simulating many rolls and analyzing the results, game designers can ensure that the game mechanics are balanced and fair. There are biases in my simulation, the simulation assumes that the die is fair, meaning that each face of the die has an equal chance of being rolled. However, in reality, physical dice can have imperfections or be intentionally weighted, which can affect the probability of each face being rolled. . Answer to Simulation Questions . A &amp; B | A | A | D | B &amp; C | C |",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/student/2023/04/25/P3M-Simulations.html",
            "relUrl": "/student/2023/04/25/P3M-Simulations.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "P3-M 4/21 Binary Overview",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for binary digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called binary. | . | . Practice Questions: . How many bits are in 3 bytes? 24 bits . | What digital information can be represented by bits? Any digitial thing, can be represented by bits. . | Are bits an analog or digital form of storing data? What is the difference between the two? They are digital. The difference between analog and digital technologies is that in analog technology, information is translated into electric pulses of varying amplitude. In digital technology, translation of information is into binary format (zero or one) where each bit is representative of two distinct amplitudes. . | Examples . Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . binary is cool binary is cool binary is awesome binary is cool binary is awesome binary is cool binary is awesome binary is cool binary is awesome binary is awesome . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in __ or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? 31 . | One programing language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? 2^16 - 1 = 65,535 2^56 -1 = 72,057,594,037,927,935. The second language can store about 1,099,528,405,248 times more numbers than the first language. . | 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) Signed 5 Bit integer: 31 Unsigned 5 bit integer: 15 . | Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(5, 2) . 5^2 = 25.0 . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning eacht digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? The value a 5 digit based system can represent is 5^n depending on where it correlates to then the prior values can be added to each other to be able to get the total value of the number as for instance 001001 can be represent as (0 x 2^6) + (0 x 2^6) + (1 x 2^5) ... and how a similar concept can be used in a base 10 system we could do the exact same thing with a base 5 system. . | What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? Hexadecimals are base 16. This can range from 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f . | When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? In a base system above 10, letters are used to represent numbers past 9. To find the letter that represents a particular number in a given base system, we perform integer division and modulus operations. For example, to represent the number 23 in a base 30 system, we divide 23 by 30 and take the remainder, which is 23. The corresponding letter for the number 23 in base 30 is H, so 23 in base 30 is represented as the single digit H. Similarly, to represent the number 23 in a base 50 system, we divide 23 by 50 and take the remainder, which is 23. The corresponding letter for the number 23 in base 50 is X, so 23 in base 50 is represented as the single digit X. . | Examples . Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = 10 | 11100010 = 226 | 10 = 2 | | Fill in the blanks (convert to binary) . 12 = 1100 | 35 = 100011 | 256 = 100000000 | | . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . def bin_div(x, y): quotient = bin(int(x, 2) // int(y, 2))[2:] remainder = bin(int(x, 2) % int(y, 2))[2:] return quotient + &quot; remainder: &quot; + remainder def bin_sub(x, y): return bin(int(x, 2) - int(y, 2))[2:] def bin_add(x, y): return bin(int(x, 2) + int(y, 2))[2:] def bin_multi(x, y): return bin(int(x, 2) * int(y, 2))[2:] # operation table def bin_opp(x, y, opp): if opp == &#39;+&#39;: return bin_add(x, y) elif opp == &#39;-&#39;: return bin_sub(x, y) elif opp == &#39;*&#39;: return bin_multi(x, y) elif opp == &#39;/&#39;: return bin_div(x, y) else: return &quot;Invalid operator!&quot; addition = bin_opp(&#39;11110101&#39;, &#39;1110&#39;, &#39;+&#39;) print(f&#39;Results for addition: {addition}&#39;) subtraction = bin_opp(&#39;110111101&#39;, &#39;101&#39;, &#39;-&#39;) print(f&#39;Results for substraction: {subtraction}&#39;) multiplication = bin_opp(&#39;011101&#39;, &#39;11&#39;, &#39;*&#39;) print(f&#39;Results for multiplication: {multiplication}&#39;) division = bin_opp(&#39;1&#39;, &#39;101101&#39;, &#39;/&#39;) print(f&#39;Results for division: {division}&#39;) . Results for addition: 100000011 Results for substraction: 110111000 Results for multiplication: 1010111 Results for division: 0 remainder: 1 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/student/2023/04/21/P3M-BinaryLesson.html",
            "relUrl": "/student/2023/04/21/P3M-BinaryLesson.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "College Board Corrections Unit 4",
            "content": ". . Corrections: I put Regardless of the compression technique used, once a data file is compressed, it cannot be restored to its original state which is wrong. The correct answer is There are trade-offs involved in choosing a compression technique for storing and transmitting data. . . Corrections: I put B, Incorrect. There is no possible algorithm for solving an undecidable problem. C is correct, An undecidable problem is one for which no algorithm can be constructed that is always capable of providing a correct yes-or-no answer. There is no algorithmic solution that can solve all instances of the problem. . . Corrections: I put A which A which is Incorrect. The first number displayed must be 1. The second number displayed could be 1 or 2. The third number displayed could be 1, 2, or 3. The last number displayed could be 1, 2, 3, or 4. So 1 1 1 1 is a possible output. D is Correct. In the second iteration of the loop, i is equal to 2. Thus RANDOM(1, i) returns either 1 or 2. So, the output 1 3 2 4 is not possible. . . Corrections: I put C which is Incorrect. The first call to drawLine draws a line segment with endpoints (1, 5) and (6, 5). The second call to drawLine draws a line segment with endpoints (1, 5) and (8, 7). The third call to drawLine draws a line segment with endpoints (1, 5) and (8, 3). B is Correct. This code segment draws the three line segments shown in the figure. The first call to drawLine draws a line segment with endpoints (1, 5) and (6, 5). The second call to drawLine draws a line segment with endpoints (1, 5) and (6, 7). The third call to drawLine draws a line segment with endpoints (1, 5) and (6, 3). . . Corrections: I put C which is Incorrect. Algorithm I does not work correctly. In algorithm I, if two people are tied for the earliest birthday, they both sit down when they are eventually paired. B is Correct. Algorithm I does not work correctly. In algorithm I, if two people are tied for the earliest birthday, they both sit down when they are eventually paired. Algorithm II works correctly. Because algorithm II allows both people to remain standing when there is a tie, a person with the earliest birthday is not eliminated. Algorithm II continues until all remaining people have the same birthday, which is the earliest birthday. Algorithm III does not work correctly. Algorithm III chooses the person(s) with the earliest day, disregarding the month. For example, algorithm III will incorrectly determine that a person born on February 1 has an earlier birthday than a person born on January 5. . Reflection . Overall, I did this test with one of my friends and we tried to work together to figure out the questions and this helped a lot and even allowed me to learn new concepts because my friend taught me some things I was unaware of and I did the same with him. This coding gave me new things to learn and incorporate into my code and overall I think taking this test helped a lot. The usage of programs is very useful with databases. They help to be able to efficiently go through and get the data required. I learned the definition of heuristic solutions, how to deal with repeats and loops, and many other coding things that I can use when I try to code myself. The test took a long time also but there are a lot of different coding topics and languages that helped me and though the help of others, and looking up some of the answers to understand how to do certain things, I was able to take a lot from this experience and learn. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2028/2023/04/03/college-board-corrections-unit-4.html",
            "relUrl": "/week%2028/2023/04/03/college-board-corrections-unit-4.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Extra Credit Notes",
            "content": "Notes . John and Ashley, both from San Marcos, one from Comp Sci(John), other in physics(Ashley) | She works in a quantum computing group | Failed a bunch of classes, but still pushed to show that it doesn’t define her, doesn’t define the love she has for what she works on | John was at Palomar for about 3 years, transferred to San Marcos right when pandemic struck | Computer science can go in many different fields, very versatile, cannot run away from computer science, always somewhat tied to everything | Many different options and pathways for computer science when going to San Marcos | Lot of events to attend at San Marcos to see if you have interest in certain majors | Internships, going to local events(networking), great way to get internships, also can join clubs | Don’t really have to be a student there to get internships | Tips for internships, try to avoid ones that are unpaid, a lot of us may feel under qualified, just do it, worst they say is no | Lot of programs to better interest at Cal State San Marcos, summer scholar program, 10 week program to do research with an advisor, Ashley really enjoyed it an sparked interest in her, also get paid for it | . Scholarships &amp; Grants . Grant is government funded money to get to school, scholarship is private funded money | Scholarship is really on you, you can get it for pretty much anything, grades matter, kind of a socioeconomic status thing | Loan complicated, don’t get a loan if you don’t need to subsidized loan is part of the government, help you so you don’t go deep into the loan, don’t have to worry about all the interest in that loan until 6 month grace period after college | unsubsidized loan starts interest after the semester | . Life after College . Teacher credential program available at San Marcos | get aid to go to graduate school | if going for a Ph. D. you should be getting paid to stay that long | . Reflection/Takeaways . After this class presentation John and Ashley gave, this experienced has really enlightened me on the next steps of computer science that is outside of highschool, and next steps moving onto college in general. It was very powerful to hear that they said computer science will apply to literally any major or career you choose in some type of way, which is what Mr. Mort has been preaching as well. What I really learned a lot was about internships and how to know which ones is good for you, preferably the paid ones, and that even if you don’t feel like your prepared for it, just do it anyways, experience is the most important part. As a senior, I can relate to the scholarships and going to college part the most as it is only a couple more months until that becomes reality. I realized how much Cal State San Marcos has to offer, and I know that there are other great schools out there like that where I can do the same things. Even though I don’t see myself pursuing a computer science major, I know that it is still useful to know about it because we live it, and that I can apply the many things I learn in this class and about computer science to my career that I choose. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2027/2023/03/29/Extra-Cred-Blog.html",
            "relUrl": "/week%2027/2023/03/29/Extra-Cred-Blog.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a ___Dictionary__. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is __hashtable is O(1)_. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # # . {1, 2, 3} . What do you notice in the output? . What we can notice is that the output is a set containing the unique elements of the list [1, 2, 3, 2, 1]. The set data type in Python is an unordered collection of unique elements. When we create a set from a list using the set() function, it automatically removes any duplicates, which is why the output only contains the unique elements 1, 2, and 3. . Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? . Sets are similar to hash tables/hashtables in coding because both are implemented as hash tables in many programming languages, including Python. In a hash table, data is stored in an array-like structure, and the location of each element is determined by its hash value, which is calculated based on its key. . In the case of sets, each element in the set serves as its own key, and the value associated with each key is simply a placeholder value. This is similar to how hash tables work, where each element is stored at a location in the array based on its hash value, and the value associated with that location is the value of the element itself. . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Lists [square brackets are a list] and dictionaries {curvy brackets are a dictionary} # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . From the given code snippet, we can see the following data structures: . A dictionary: . lover_album is a dictionary that contains information about the album &quot;Lover&quot; by Taylor Swift. . A list: The value associated with the &quot;genre&quot; key in the lover_album dictionary is a list containing two strings, &quot;Pop&quot; and &quot;Synth-pop&quot;. Nested dictionaries: . The value associated with the &quot;tracks&quot; key in the lover_album dictionary is a nested dictionary, where each key-value pair represents a track number and the corresponding song title. Overall, we can see the usage of multiple data structures such as a dictionary, list, and nested dictionary to store and represent information related to the &quot;Lover&quot; album by Taylor Swift. . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Make it a set by adding set and parenthesis # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # Change tracks to genre and what number genre it is and put &quot;electropop&quot; instead of &quot;All Of The Girls You Loved Before&quot;. # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . {&#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;} . Hacks . Answer ALL questions in the code segments | Create a venn diagram or other compare and contrast tool related to hashmaps. What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . SavageMode2_album = { &quot;title&quot;: &quot;Savage Mode II&quot;, &quot;artist&quot;: &quot;21 Savage&quot;, &quot;year&quot;: 2020, &quot;genre&quot;: [&quot;Rap&quot;, &quot;Murder Music&quot;], &quot;tracks&quot;: { 1: &quot;Intro&quot;, 2: &quot;Runnin&quot;, 3: &quot;Glock in My Lap&quot;, 4: &quot;Mr. Right Now&quot;, 5: &quot;Rich Nigga Shit&quot;, 6: &quot;Slidin&quot;, 7: &quot;Many Man&quot;, 8: &quot;Snitches &amp; Rats&quot;, 9: &quot;My Dawg&quot;, 10: &quot;Steppin on Niggas&quot;, 11: &quot;Brand New Draco&quot;, 12: &quot;No Opp Left Behind&quot;, 13: &quot;RIP Luv&quot; } } print(SavageMode2_album) . {&#39;title&#39;: &#39;Savage Mode II&#39;, &#39;artist&#39;: &#39;21 Savage&#39;, &#39;year&#39;: 2020, &#39;genre&#39;: [&#39;Rap&#39;, &#39;Murder Music&#39;], &#39;tracks&#39;: {1: &#39;Intro&#39;, 2: &#39;Runnin&#39;, 3: &#39;Glock in My Lap&#39;, 4: &#39;Mr. Right Now&#39;, 5: &#39;Rich Nigga Shit&#39;, 6: &#39;Slidin&#39;, 7: &#39;Many Man&#39;, 8: &#39;Snitches &amp; Rats&#39;, 9: &#39;My Dawg&#39;, 10: &#39;Steppin on Niggas&#39;, 11: &#39;Brand New Draco&#39;, 12: &#39;No Opp Left Behind&#39;, 13: &#39;RIP Luv&#39;}} . SavageMode2_album = { &quot;title&quot;: &quot;Savage Mode II&quot;, &quot;artist&quot;: &quot;21 Savage&quot;, &quot;year&quot;: 2020, &quot;genre&quot;: [&quot;Rap&quot;, &quot;Murder Music&quot;], &quot;tracks&quot;: { 1: &quot;Intro&quot;, 2: &quot;Runnin&quot;, 3: &quot;Glock in My Lap&quot;, 4: &quot;Mr. Right Now&quot;, 5: &quot;Rich Nigga Shit&quot;, 6: &quot;Slidin&quot;, 7: &quot;Many Man&quot;, 8: &quot;Snitches &amp; Rats&quot;, 9: &quot;My Dawg&quot;, 10: &quot;Steppin on Niggas&quot;, 11: &quot;Brand New Draco&quot;, 12: &quot;No Opp Left Behind&quot;, 13: &quot;RIP Luv&quot; }, &quot;song_lengths&quot;: { 1: &quot;2:12&quot;, 2: &quot;3:16&quot;, 3: &quot;2:59&quot;, 4: &quot;4:08&quot;, 5: &quot;3:07&quot;, 6: &quot;3:09&quot;, 7: &quot;3:09&quot;, 8: &quot;2:56&quot;, 9: &quot;3:27&quot;, 10: &quot;2:27&quot;, 11: &quot;2:59&quot;, 12: &quot;3:05&quot;, 13: &quot;4:13&quot; } } def get_song_length(song_number): return SavageMode2_album[&quot;song_lengths&quot;][song_number] # Example usage song_number = 5 length = get_song_length(song_number) print(f&quot;The length of song {song_number} is {length}.&quot;) . The length of song 5 is 3:07. . print(SavageMode2_album.get(&#39;tracks&#39;)) # or print(SavageMode2_album[&#39;tracks&#39;]) . {1: &#39;Intro&#39;, 2: &#39;Runnin&#39;, 3: &#39;Glock in My Lap&#39;, 4: &#39;Mr. Right Now&#39;, 5: &#39;Rich Nigga Shit&#39;, 6: &#39;Slidin&#39;, 7: &#39;Many Man&#39;, 8: &#39;Snitches &amp; Rats&#39;, 9: &#39;My Dawg&#39;, 10: &#39;Steppin on Niggas&#39;, 11: &#39;Brand New Draco&#39;, 12: &#39;No Opp Left Behind&#39;, 13: &#39;RIP Luv&#39;} {1: &#39;Intro&#39;, 2: &#39;Runnin&#39;, 3: &#39;Glock in My Lap&#39;, 4: &#39;Mr. Right Now&#39;, 5: &#39;Rich Nigga Shit&#39;, 6: &#39;Slidin&#39;, 7: &#39;Many Man&#39;, 8: &#39;Snitches &amp; Rats&#39;, 9: &#39;My Dawg&#39;, 10: &#39;Steppin on Niggas&#39;, 11: &#39;Brand New Draco&#39;, 12: &#39;No Opp Left Behind&#39;, 13: &#39;RIP Luv&#39;} . print(SavageMode2_album.get(&#39;tracks&#39;)[3]) # or print(SavageMode2_album[&#39;tracks&#39;][3]) . Glock in My Lap Glock in My Lap . SavageMode2_album[&quot;producer&quot;] = set([&#39;Metro Boomin&#39;, &#39;Southside&#39;, &#39;Carlton Mays, Jr.&#39;, &#39;Oz Iskander 40&#39;]) # What can you change to make sure there are no duplicate producers? # Make it a set by adding set and parenthesis # # Printing the dictionary print(SavageMode2_album) . {&#39;title&#39;: &#39;Savage Mode II&#39;, &#39;artist&#39;: &#39;21 Savage&#39;, &#39;year&#39;: 2020, &#39;genre&#39;: [&#39;Rap&#39;, &#39;Murder Music&#39;], &#39;tracks&#39;: {1: &#39;Intro&#39;, 2: &#39;Runnin&#39;, 3: &#39;Glock in My Lap&#39;, 4: &#39;Mr. Right Now&#39;, 5: &#39;Rich Nigga Shit&#39;, 6: &#39;Slidin&#39;, 7: &#39;Many Man&#39;, 8: &#39;Snitches &amp; Rats&#39;, 9: &#39;My Dawg&#39;, 10: &#39;Steppin on Niggas&#39;, 11: &#39;Brand New Draco&#39;, 12: &#39;No Opp Left Behind&#39;, 13: &#39;RIP Luv&#39;}, &#39;song_lengths&#39;: {1: &#39;2:12&#39;, 2: &#39;3:16&#39;, 3: &#39;2:59&#39;, 4: &#39;4:08&#39;, 5: &#39;3:07&#39;, 6: &#39;3:09&#39;, 7: &#39;3:09&#39;, 8: &#39;2:56&#39;, 9: &#39;3:27&#39;, 10: &#39;2:27&#39;, 11: &#39;2:59&#39;, 12: &#39;3:05&#39;, 13: &#39;4:13&#39;}, &#39;producer&#39;: {&#39;Southside&#39;, &#39;Metro Boomin&#39;, &#39;Carlton Mays, Jr.&#39;, &#39;Oz Iskander 40&#39;}} . SavageMode2_album[&quot;tracks&quot;].update({14: &quot;Said N Done&quot;}) # How would add an additional genre to the dictionary, like electropop? # Change tracks to genre and what number genre it is and put &quot;electropop&quot; instead of &quot;All Of The Girls You Loved Before&quot;. # # Printing the dictionary print(SavageMode2_album) . {&#39;title&#39;: &#39;Savage Mode II&#39;, &#39;artist&#39;: &#39;21 Savage&#39;, &#39;year&#39;: 2020, &#39;genre&#39;: [&#39;Rap&#39;, &#39;Murder Music&#39;], &#39;tracks&#39;: {1: &#39;Intro&#39;, 2: &#39;Runnin&#39;, 3: &#39;Glock in My Lap&#39;, 4: &#39;Mr. Right Now&#39;, 5: &#39;Rich Nigga Shit&#39;, 6: &#39;Slidin&#39;, 7: &#39;Many Man&#39;, 8: &#39;Snitches &amp; Rats&#39;, 9: &#39;My Dawg&#39;, 10: &#39;Steppin on Niggas&#39;, 11: &#39;Brand New Draco&#39;, 12: &#39;No Opp Left Behind&#39;, 13: &#39;RIP Luv&#39;, 14: &#39;Said N Done&#39;}, &#39;song_lengths&#39;: {1: &#39;2:12&#39;, 2: &#39;3:16&#39;, 3: &#39;2:59&#39;, 4: &#39;4:08&#39;, 5: &#39;3:07&#39;, 6: &#39;3:09&#39;, 7: &#39;3:09&#39;, 8: &#39;2:56&#39;, 9: &#39;3:27&#39;, 10: &#39;2:27&#39;, 11: &#39;2:59&#39;, 12: &#39;3:05&#39;, 13: &#39;4:13&#39;}, &#39;producer&#39;: {&#39;Southside&#39;, &#39;Metro Boomin&#39;, &#39;Carlton Mays, Jr.&#39;, &#39;Oz Iskander 40&#39;}} . for k,v in SavageMode2_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Savage Mode II artist: 21 Savage year: 2020 genre: [&#39;Rap&#39;, &#39;Murder Music&#39;] tracks: {1: &#39;Intro&#39;, 2: &#39;Runnin&#39;, 3: &#39;Glock in My Lap&#39;, 4: &#39;Mr. Right Now&#39;, 5: &#39;Rich Nigga Shit&#39;, 6: &#39;Slidin&#39;, 7: &#39;Many Man&#39;, 8: &#39;Snitches &amp; Rats&#39;, 9: &#39;My Dawg&#39;, 10: &#39;Steppin on Niggas&#39;, 11: &#39;Brand New Draco&#39;, 12: &#39;No Opp Left Behind&#39;, 13: &#39;RIP Luv&#39;, 14: &#39;Said N Done&#39;} song_lengths: {1: &#39;2:12&#39;, 2: &#39;3:16&#39;, 3: &#39;2:59&#39;, 4: &#39;4:08&#39;, 5: &#39;3:07&#39;, 6: &#39;3:09&#39;, 7: &#39;3:09&#39;, 8: &#39;2:56&#39;, 9: &#39;3:27&#39;, 10: &#39;2:27&#39;, 11: &#39;2:59&#39;, 12: &#39;3:05&#39;, 13: &#39;4:13&#39;} producer: {&#39;Southside&#39;, &#39;Metro Boomin&#39;, &#39;Carlton Mays, Jr.&#39;, &#39;Oz Iskander 40&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if SavageMode2_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(SavageMode2_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . {1: &#39;Intro&#39;, 2: &#39;Runnin&#39;, 3: &#39;Glock in My Lap&#39;, 4: &#39;Mr. Right Now&#39;, 5: &#39;Rich Nigga Shit&#39;, 6: &#39;Slidin&#39;, 7: &#39;Many Man&#39;, 8: &#39;Snitches &amp; Rats&#39;, 9: &#39;My Dawg&#39;, 10: &#39;Steppin on Niggas&#39;, 11: &#39;Brand New Draco&#39;, 12: &#39;No Opp Left Behind&#39;, 13: &#39;RIP Luv&#39;, 14: &#39;Said N Done&#39;} . Improved Version . Here are a few suggestions for how I improved the code . Use a loop to allow the user to perform multiple searches without exiting the program. This would make the program more user-friendly and efficient. . Include error handling to catch any exceptions that may occur during runtime, such as if the user enters an invalid data type for the search parameter. . Provide more information to the user about what kinds of searches are available, such as a list of valid search terms or a brief explanation of what the program can do. . Consider using a more descriptive variable name than &quot;search&quot; to avoid confusion with the function name and improve readability. . def search_album(album_dict): while True: search_term = input(&quot;What would you like to know about the album? (type &#39;exit&#39; to quit) &quot;) if search_term == &#39;exit&#39;: break try: result = album_dict.get(search_term.lower()) if result == None: print(&quot;Invalid search term. Please try again.&quot;) else: print(result) except: print(&quot;An error occurred. Please try again.&quot;) print(&quot;Thanks for using the album search tool!&quot;) # Example usage SavageMode2_album = { &#39;title&#39;: &#39;Savage Mode II&#39;, &#39;artist&#39;: &#39;21 Savage and Metro Boomin&#39;, &#39;release_date&#39;: &#39;October 2, 2020&#39;, &#39;recorded&#39;: &#39;2020&#39;, &#39;studio&#39;: &#39;Private studios in Atlanta, Georgia and Los Angeles, California&#39;, &#39;genre&#39;: &#39;Hip hop, trap&#39;, &#39;length&#39;: &#39;44:07&#39;, &#39;label&#39;: &#39;Epic, Boominati, Republic&#39;, &#39;producers&#39;: [&#39;Metro Boomin&#39;, &#39;21 Savage&#39;] } search_album(SavageMode2_album) . 44:07 Thanks for using the album search tool! . c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS song_opinions (title text, opinion text, rating integer)&#39;&#39;&#39;) . NameError Traceback (most recent call last) /var/folders/rb/cg1zlcqx3kd5jwkb_g7zw1980000gn/T/ipykernel_87737/398191197.py in &lt;module&gt; -&gt; 1 c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS song_opinions 2 (title text, opinion text, rating integer)&#39;&#39;&#39;) NameError: name &#39;c&#39; is not defined . import sqlite3 # define the database connection and cursor conn = sqlite3.connect(&#39;song_opinions.db&#39;) c = conn.cursor() # create a table to store the song opinions if it doesn&#39;t exist c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS song_opinions (title text, opinion text, rating integer)&#39;&#39;&#39;) # define a dictionary to store the album information SavageMode2_album = { &#39;title&#39;: &#39;Savage Mode II&#39;, &#39;artist&#39;: &#39;21 Savage &amp; Metro Boomin&#39;, &#39;year&#39;: 2020, &#39;tracks&#39;: { &#39;Intro&#39;: 2.36, &#39;Runnin&#39;: 3.18, &#39;Glock in My Lap&#39;: 2.41, &#39;Mr. Right Now&#39;: 4.17, &#39;Rich Nigga Shit&#39;: 3.05, &#39;Slidin&#39;: 3.15, &#39;Many Men&#39;: 3.00, &#39;Snitches &amp; Rats (Interlude)&#39;: 2.10, &#39;Snitches &amp; Rats&#39;: 3.22, &#39;My Dawg&#39;: 3.12, &#39;Steppin on Niggas&#39;: 2.22, &#39;Brand New Draco&#39;: 2.57, &#39;No Opp Left Behind&#39;: 3.06, &#39;RIP Luv&#39;: 2.47, &#39;Said N Done&#39;: 3.22 } } # define a function to search for a song and add an opinion and rating def add_opinion(): # ask the user for the song title, their opinion, and their rating title = input(&quot;Enter the title of the song: &quot;) opinion = input(&quot;Enter your opinion of the song: &quot;) rating = int(input(&quot;Enter your rating out of 10: &quot;)) # search for the song in the album if title in SavageMode2_album[&#39;tracks&#39;]: # insert the title, opinion, and rating into the database c.execute(&quot;INSERT INTO song_opinions VALUES (?, ?, ?)&quot;, (title, opinion, rating)) conn.commit() print(&quot;Opinion added to the database!&quot;) else: print(&quot;Song not found in album.&quot;) # call the function to add an opinion add_opinion() # close the database connection conn.close() . Opinion added to the database! . def delete_opinion(): # define the database connection and cursor conn = sqlite3.connect(&#39;song_opinions.db&#39;) c = conn.cursor() # ask the user for the title of the song to delete title = input(&quot;Enter the title of the song to delete: &quot;) # delete the row corresponding to the specified song title c.execute(&quot;DELETE FROM song_opinions WHERE title=?&quot;, (title,)) conn.commit() # check if any rows were deleted if c.rowcount == 0: print(&quot;No opinions found for that song title.&quot;) else: print(f&quot;{c.rowcount} opinion(s) deleted from the database.&quot;) # close the database connection conn.close() # call the function to delete an opinion delete_opinion() . 1 opinion(s) deleted from the database. . import webbrowser song_videos = { &quot;My Dawg&quot;: &quot;https://www.youtube.com/watch?v=mVIHEE-nxl0&quot;, &quot;No Heart&quot;: &quot;https://www.youtube.com/watch?v=rGxE7jgZvzc&quot;, &quot;X&quot;: &quot;https://www.youtube.com/watch?v=szKxAdvlCCM&quot;, &quot;Savage Mode&quot;: &quot;https://www.youtube.com/watch?v=ztXU2b1v16Y&quot;, &quot;Bad Guy&quot;: &quot;https://www.youtube.com/watch?v=fTbKjLNSFv4&quot;, &quot;Mad High&quot;: &quot;https://www.youtube.com/watch?v=lZhC8NRKzbg&quot;, &quot;Feel It&quot;: &quot;https://www.youtube.com/watch?v=jY0tZXaK1Qg&quot;, &quot;Ocean Drive&quot;: &quot;https://www.youtube.com/watch?v=KHCbBnYVYDc&quot;, &quot;Savage Mode II&quot;: &quot;https://www.youtube.com/watch?v=quO7PekNYp8&quot;, &quot;Mr. Right Now&quot;: &quot;https://www.youtube.com/watch?v=f4RmrWhQxrM&quot;, &quot;Runnin&quot;: &quot;https://www.youtube.com/watch?v=jbdROU6eJVg&quot;, &quot;Glock in My Lap&quot;: &quot;https://www.youtube.com/watch?v=IShUzOqBqOk&quot;, &quot;Rich N***a Shit&quot;: &quot;https://www.youtube.com/watch?v=zlNCU09gzwc&quot;, &quot;Slidin&quot;: &quot;https://www.youtube.com/watch?v=9lVt20ogzoY&quot;, &quot;Many Men&quot;: &quot;https://www.youtube.com/watch?v=-k65rF9yfFc&quot;, &quot;My Legacy&quot;: &quot;https://www.youtube.com/watch?v=gSVfGHx1x7A&quot;, } song_title = input(&quot;Enter the title of a song from Savage Mode II: &quot;) if song_title in song_videos: webbrowser.open(song_videos[song_title]) else: print(&quot;Song not found.&quot;) . from googleapiclient.discovery import build from googleapiclient.errors import HttpError # Set up the YouTube Data API client with your API key api_key = &quot;AIzaSyAD45M4xe1J0MAuPOFdqzYkNY0tCBKOGqU&quot; youtube = build(&quot;youtube&quot;, &quot;v3&quot;, developerKey=api_key) # Retrieve the video link for a given song title def get_video_link(title): query = f&quot;{title} 21 Savage Metro Boomin&quot; try: # Use the YouTube search API to fetch the top result for the query search_response = youtube.search().list( q=query, type=&quot;video&quot;, part=&quot;id&quot;, maxResults=1 ).execute() # Get the video ID from the search response video_id = search_response[&quot;items&quot;][0][&quot;id&quot;][&quot;videoId&quot;] # Construct the video link using the video ID video_link = f&quot;https://www.youtube.com/watch?v={video_id}&quot; return video_link except HttpError as error: print(f&quot;An error occurred: {error}&quot;) return None # Example usage song_title = input(&quot;Enter a track title: &quot;) video_link = get_video_link(song_title) if video_link: print(f&quot;The video link for &#39;{song_title}&#39; is {video_link}&quot;) else: print(f&quot;&#39;{song_title}&#39; not found on YouTube&quot;) . The video link for &#39;glockk im lapp&#39; is https://www.youtube.com/watch?v=acYUqMd9k2I . yer .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/03/29/DS-hashmaps-copy.html",
            "relUrl": "/2023/03/29/DS-hashmaps-copy.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Extra 2.4 Hacks",
            "content": "Create . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . import datetime import json from datetime import datetime from sqlalchemy.exc import IntegrityError class Game(db.Model): __tablename__ = &#39;games&#39; # added this after getting an error that the table had already been defined __table_args__ = {&#39;extend_existing&#39;: True} id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(255), unique=True, nullable=False) price = db.Column(db.Float, nullable=False) release_date = db.Column(db.Date, nullable=False) developer = db.Column(db.String(255), nullable=False) publisher = db.Column(db.String(255), nullable=False) def __init__(self, name, price, release_date, developer, publisher): self.name = name self.price = price self.release_date = release_date self.developer = developer self.publisher = publisher @property def game_info(self): return self.read() def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;price&quot;: self.price, &quot;release_date&quot;: self.release_date, &quot;developer&quot;: self.developer, &quot;publisher&quot;: self.publisher, } def update(self, name=&quot;&quot;, price=&quot;&quot;, release_date=&quot;&quot;, developer=&quot;&quot;, publisher=&quot;&quot;): if len(name) &gt; 0: self.name = name if len(price) &gt; 0: self.price = price if len(release_date) &gt; 0: self.release_date = release_date if len(developer) &gt; 0: self.developer = developer if len(publisher) &gt; 0: self.publisher = publisher db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initGames(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; g1 = Game(name=&#39;Mario Party 9&#39;, price=169.00, release_date=datetime(2012, 2, 3), developer=&#39;NDcube&#39;, publisher=&#39;Nintendo&#39;) g2 = Game(name=&#39;Legend of Zelda: Tears of the Kingdom&#39;, price=69.99, release_date=datetime(2023, 5, 12), developer=&#39;Nintendo Entertaining Planning and Development&#39;, publisher=&#39;Nintendo&#39;) # locals include age, name, date of birth, user id, etc. # debugging allows you to go in to see if there is any problems with your code (ex. missing an attribute like user id) # once you have your users, your sqlite.db file is created games = [g1, g2] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for game in games: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = game.create() print(f&quot;Created new uid {object.name}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {game.name}, or error.&quot;) initGames() . Records exist uid Mario Party 9, or error. Records exist uid Legend of Zelda: Tears of the Kingdom, or error. . def find_by_name(Name): with app.app_context(): game = Game.query.filter_by(Name=Name).first() return game #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create . def create(): # optimize user time to see if uid exists name = input(&quot;Enter the name of your game:&quot;) game = find_by_name(name) try: print(&quot;Found n&quot;, game.read()) return except: pass # keep going # request value that ensure creating valid object price = float(input(&quot;Enter the price of your game&quot;)) developer = input(&quot;Enter the developer of your game&quot;) publisher = input(&quot;Enter the publisher of your game&quot;) # Initialize User object before date game = Game(name=name, price=price, developer=developer, publisher=publisher, release_date=datetime.today().date() ) # create user.dob, fail with today as dob release_date = input(&quot;Enter the date your game was (or is to be) released (YYYY-MM-DD)&quot;) try: game.release_date = datetime.strptime(release_date, &#39;%Y-%m-%d&#39;).date() except ValueError: game.release_date = datetime.today() print(f&quot;Invalid date {release_date} require YYYY-mm-dd, date defaulted to {game.release_date}&quot;) # write object to database with app.app_context(): try: object = game.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error name {name}&quot;) create() . Created {&#39;id&#39;: 4, &#39;name&#39;: &#39;Overwatch&#39;, &#39;price&#39;: 60.0, &#39;release_date&#39;: datetime.date(2016, 11, 20), &#39;developer&#39;: &#39;Blizzard&#39;, &#39;publisher&#39;: &#39;Activision&#39;} . Read . def read(): with app.app_context(): table = Game.query.all() json_ready = [game.read() for game in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Mario Party 9&#39;, &#39;price&#39;: 169.0, &#39;release_date&#39;: datetime.date(2012, 2, 3), &#39;developer&#39;: &#39;NDcube&#39;, &#39;publisher&#39;: &#39;Nintendo&#39;}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Legend of Zelda: Tears of the Kingdom&#39;, &#39;price&#39;: 69.99, &#39;release_date&#39;: datetime.date(2023, 5, 12), &#39;developer&#39;: &#39;Nintendo Entertaining Planning and Development&#39;, &#39;publisher&#39;: &#39;Nintendo&#39;}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Destiny 2&#39;, &#39;price&#39;: 60.0, &#39;release_date&#39;: datetime.date(2023, 3, 22), &#39;developer&#39;: &#39;Bungie&#39;, &#39;publisher&#39;: &#39;Activision&#39;}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Overwatch&#39;, &#39;price&#39;: 60.0, &#39;release_date&#39;: datetime.date(2016, 11, 20), &#39;developer&#39;: &#39;Blizzard&#39;, &#39;publisher&#39;: &#39;Activision&#39;}] . Update . def update(): # find the game to update name = input(&quot;Enter the name of the game to update: &quot;) game = find_by_name(name) if not game: print(&quot;Game not found&quot;) return # print the current values print(&quot;Current values:&quot;) print(game.read()) # prompt the user for new values, allowing them to skip new_name = input(f&quot;Enter a new name [{game.name}]: &quot;) if new_name: game.name = new_name new_price = input(f&quot;Enter a new price [{game.price}]: &quot;) if new_price: game.price = float(new_price) new_developer = input(f&quot;Enter a new developer [{game.developer}]: &quot;) if new_developer: game.developer = new_developer new_publisher = input(f&quot;Enter a new publisher [{game.publisher}]: &quot;) if new_publisher: game.publisher = new_publisher new_release_date = input(f&quot;Enter a new release date (YYYY-MM-DD) [{game.release_date}]: &quot;) if new_release_date: try: game.release_date = datetime.strptime(new_release_date, &#39;%Y-%m-%d&#39;).date() except ValueError: print(&quot;Invalid date format. Date not updated.&quot;) # update the game in the database with app.app_context(): try: updated_game = game.update() print(&quot;Updated values:&quot;) print(updated_game.read()) except: print(&quot;Error updating game&quot;) update() . Current values: {&#39;id&#39;: 4, &#39;name&#39;: &#39;Overwatch&#39;, &#39;price&#39;: 60.0, &#39;release_date&#39;: datetime.date(2016, 11, 20), &#39;developer&#39;: &#39;Blizzard&#39;, &#39;publisher&#39;: &#39;Activision&#39;} Updated values: {&#39;id&#39;: 4, &#39;name&#39;: &#39;Overwatch&#39;, &#39;price&#39;: 60.0, &#39;release_date&#39;: datetime.date(2016, 11, 21), &#39;developer&#39;: &#39;Blizzard&#39;, &#39;publisher&#39;: &#39;Activision&#39;} . Delete . def delete(): name = input(&quot;Enter the name of the game to delete:&quot;) game = find_by_name(name) try: print(&quot;Found n&quot;, game.read()) except: print(f&quot;Game with name {name} not found&quot;) return # confirm deletion confirm = input(&quot;Are you sure you want to delete this game? (y/n)&quot;) if confirm.lower() == &#39;y&#39;: with app.app_context(): try: game.delete() print(f&quot;Game with name {name} deleted&quot;) except: # error raised if object not deleted print(f&quot;Unknown error deleting game with name {name}&quot;) else: print(f&quot;Deletion of game with name {name} cancelled&quot;) delete() . Found {&#39;id&#39;: 3, &#39;name&#39;: &#39;Destiny 2&#39;, &#39;price&#39;: 60.0, &#39;release_date&#39;: datetime.date(2023, 3, 22), &#39;developer&#39;: &#39;Bungie&#39;, &#39;publisher&#39;: &#39;Activision&#39;} Game with name Destiny 2 deleted . Menu . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Created {&#39;id&#39;: 5, &#39;name&#39;: &#39;Fall Guys&#39;, &#39;price&#39;: 4.99, &#39;release_date&#39;: datetime.date(2020, 4, 15), &#39;developer&#39;: &#39;Ubisoft&#39;, &#39;publisher&#39;: &#39;Activision&#39;} .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/03/21/Using-Class.html",
            "relUrl": "/2023/03/21/Using-Class.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "2.4 Notes",
            "content": "Notes 2.4 a. . Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. “iterative and interactive way when processing information” Managing Data. “classifying data are part of the process in using programs”, “data files in a Table” Insight “insight and knowledge can be obtained from … digitally represented information” Filter systems. ‘tools for finding information and recognizing patterns” Application. “the preserve has two databases”, “an employee wants to count the number of book” PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data Imports and Flask Objects Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object The flask object implements a WSGI application and acts as the central object. It is passed the name of the module or package of the application. Once it is created it will act as a central registry for the view functions, the URL rules, template configuration and much more. SQLAlchemy db object SQLAlchemy is a library that facilitates the communication between Python programs and databases. Most of the times, this library is used as an Object Relational Mapper (ORM) tool that translates Python classes to tables on relational databases and automatically converts function calls to SQL statements. . Initial Data Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object db Object is organized in a structured manner. Create All tables creates the table. User Object Constructors User object constructors ensures model users are consistent and be used various of times. Try / Except This accounts for error. . Use of ORM Query object and custom methods to identify user to credentials uid and password . ORM = Object Relational Model - in SQLAlchemy, ORM on top of the python that works with databases. Comment on purpose of following User.query.filter_by Filters with the parameter, parameter is uid, so it filters by the username ids. user.password Checks to see if the password is correct, if yes, returns true, is not, returns false . Create a new User in table in Sqlite.db Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except User find by uid finds user by their usernames, checks through usernames until matches the same one input, if not, it passes or keeps going. user = User(…) This initializes the user object before date, getting the name, uid, and password first. user.dob and try/except Enter user’s date of birth, looks for one that matches with the try function, if not, goes to except with keeps going through all, if none can be found then it prints invalid date. user.create() and try/except Creates a new user for the data base, if try works the prints new user was created, except will happen if error occurred while creating new user. . Reading users table in sqlite.db Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all This is extracting all users from database and turns them into JSON, the user query all queues all users to read them. json_ready assignment, google List Comprehension Believe that it comprehends each user reading it, then adding it to the list. . 2.4 b. . What is the purpose of identity Column in SQL database? . In SQL databases, an identity column is a special type of column that automatically generates unique numeric values for each row that is inserted into a table. The purpose of an identity column is to provide a unique identifier for each row in the table, without requiring the user to manually enter a value for that column. . What is the purpose of a primary key in SQL database? . In SQL databases, a primary key is a column or set of columns that uniquely identifies each row in a table. The purpose of a primary key is to ensure that each row in the table can be uniquely identified and retrieved, and that the data in the table is organized and structured in a consistent and efficient manner. . What are the Data Types in SQL table? . Some example types are booleans, blob, string, integer, and binary. . Reading Users table in Sqlite.db . What is a connection object? After you google it, what do you think it does? . A connection object is an object that represents a connection to a database or other data source. It is used to establish a connection between an application and a database, and to manage that connection throughout the lifetime of the application. . Same for cursor object? After reading what it is on Google, I believe that it process each row that are queued in the database, and thats how it reads it in order to display the results. Look at conn object and cursor object in VSCode debugger. What attributes are in the object? Attributes in conn are create, menu, read, schema, database, file, ipykernel, os, sqlite3 and sys. Attributes in cursor are conn, create, meny, read, schema, database, file, ipykernel, os, sqlite3, sys. . Is “results” an object? How do you know? . Results is an object because an object has functions and data, which is what is shown when we debug it and look at the results, there are special variables, function variables, etc. . Create a new User in table in Sqlite.db . Compore create() in both SQL lessons. What is better or worse in the two implementations? . The 2.4a lesson does create by has try and excepts for each one individually, while this one lists all the things being created then has the try and except functions after. Im not to sure what is better or worse, but I think that off of looks that this cell below seems better when trying to create a lot of things at once. . Explain purpose of SQL INSERT. Is this the same as User init? . The purpose fo SQL insert is to add new data into the database, I think it is because user init initializes the data meaning it assigns an initial value for a variable or data object. However I think init should be used to make the dataset then insert should be just strictly for adding new data in. . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . I think that hacked part helps towards encrypting the password so it is not as easily accessible. Explain try/except, when would except occur? . Try would happen when a user wants to reset or make new password, I think except would occur if the problem was not that no user id has been found or row for password was changed, bur not entirely sure exactly what the problem would be for this to happen. . What code seems to be repeated in each of these examples to point, why is it repeated? . It seems to be close cursor or connection, I think it is done so that it finishes processing, therefore results can be displayed. . Delete a User in table in Sqlite.db . Is DELETE a dangerous operation? Why? . It is not dangerous because deleting is part of the process of data if things are put incorrectly, and you can always input new data anyways. . In the print statemements, what is the “f” and what does {uid} do? . I think f find the userid, the bracket uid displays that certain uid found . Menu Interface to CRUD operations . Why does the menu repeat? . Menu repeats because it is the main thing that connects you to CRUD or S. . Could you refactor this menu? Make it work with a List? . I am not entirely sure, but it does sound possible. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2020/2023/03/21/2.4-Notes-for-A-and-B.html",
            "relUrl": "/week%2020/2023/03/21/2.4-Notes-for-A-and-B.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "College Board Corrections 25Q",
            "content": ". . . Answer B is correct, filtering by photographer will remove any entries with unknown photographers. Filtering by year will remove any entries with unknown years. Sorting by year will sort the remaining entries in column C from least to greatest, putting the photograph with the lowest year value in the first row of the spreadsheet. D is correct which I did not put, sorting by year will sort the spreadsheet on column C from least to greatest. Filtering by year will remove any entries with unknown years. Filtering by photographer will remove any entries with unknown photographers. Since the order of the entries is not affected by the filters, the photograph with the lowest year value will be in the first row of the spreadsheet. I put C which is wrong, this sequence of steps does not remove any entries with an unknown year, so the entry in the first row of the spreadsheet will have a year value of -1. . Reflection . Overall, I did this test with one of my friends and we tried to work together to figure out the questions and this helped a lot and even allowed me to learn new concepts because my friend taught me some things I was unaware of and I did the same with him. This coding gave me new things to learn and incorporate into my code and overall I think taking this test helped a lot. The usage of programs is very useful with databases. They help to be able to efficiently go through and get the data required. I learned the definition of heuristic solutions, how to deal with repeats and loops, and many other coding things that I can use when I try to code myself. The test took a long time also but there are a lot of different coding topics and languages that helped me and though the help of others, and looking up some of the answers to understand how to do certain things, I was able to take a lot from this experience and learn. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2020/2023/03/20/college-board-corrections.html",
            "relUrl": "/week%2020/2023/03/20/college-board-corrections.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "2.2 and 2.3 Notes and Qs",
            "content": "Notes 2.4 a. . Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. “iterative and interactive way when processing information” Managing Data. “classifying data are part of the process in using programs”, “data files in a Table” Insight “insight and knowledge can be obtained from … digitally represented information” Filter systems. ‘tools for finding information and recognizing patterns” Application. “the preserve has two databases”, “an employee wants to count the number of book” PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data Imports and Flask Objects Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object The flask object implements a WSGI application and acts as the central object. It is passed the name of the module or package of the application. Once it is created it will act as a central registry for the view functions, the URL rules, template configuration and much more. SQLAlchemy db object SQLAlchemy is a library that facilitates the communication between Python programs and databases. Most of the times, this library is used as an Object Relational Mapper (ORM) tool that translates Python classes to tables on relational databases and automatically converts function calls to SQL statements. . Initial Data Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object db Object is organized in a structured manner. Create All tables creates the table. User Object Constructors User object constructors ensures model users are consistent and be used various of times. Try / Except This accounts for error. . Use of ORM Query object and custom methods to identify user to credentials uid and password . ORM = Object Relational Model - in SQLAlchemy, ORM on top of the python that works with databases. Comment on purpose of following User.query.filter_by Filters with the parameter, parameter is uid, so it filters by the username ids. user.password Checks to see if the password is correct, if yes, returns true, is not, returns false . Create a new User in table in Sqlite.db Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except User find by uid finds user by their usernames, checks through usernames until matches the same one input, if not, it passes or keeps going. user = User(…) This initializes the user object before date, getting the name, uid, and password first. user.dob and try/except Enter user’s date of birth, looks for one that matches with the try function, if not, goes to except with keeps going through all, if none can be found then it prints invalid date. user.create() and try/except Creates a new user for the data base, if try works the prints new user was created, except will happen if error occurred while creating new user. . Reading users table in sqlite.db Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all This is extracting all users from database and turns them into JSON, the user query all queues all users to read them. json_ready assignment, google List Comprehension Believe that it comprehends each user reading it, then adding it to the list. . 2.4 b. . What is the purpose of identity Column in SQL database? . In SQL databases, an identity column is a special type of column that automatically generates unique numeric values for each row that is inserted into a table. The purpose of an identity column is to provide a unique identifier for each row in the table, without requiring the user to manually enter a value for that column. . What is the purpose of a primary key in SQL database? . In SQL databases, a primary key is a column or set of columns that uniquely identifies each row in a table. The purpose of a primary key is to ensure that each row in the table can be uniquely identified and retrieved, and that the data in the table is organized and structured in a consistent and efficient manner. . What are the Data Types in SQL table? . Some example types are booleans, blob, string, integer, and binary. . Reading Users table in Sqlite.db . What is a connection object? After you google it, what do you think it does? . A connection object is an object that represents a connection to a database or other data source. It is used to establish a connection between an application and a database, and to manage that connection throughout the lifetime of the application. . Same for cursor object? After reading what it is on Google, I believe that it process each row that are queued in the database, and thats how it reads it in order to display the results. Look at conn object and cursor object in VSCode debugger. What attributes are in the object? Attributes in conn are create, menu, read, schema, database, file, ipykernel, os, sqlite3 and sys. Attributes in cursor are conn, create, meny, read, schema, database, file, ipykernel, os, sqlite3, sys. . Is “results” an object? How do you know? . Results is an object because an object has functions and data, which is what is shown when we debug it and look at the results, there are special variables, function variables, etc. . Create a new User in table in Sqlite.db . Compore create() in both SQL lessons. What is better or worse in the two implementations? . The 2.4a lesson does create by has try and excepts for each one individually, while this one lists all the things being created then has the try and except functions after. Im not to sure what is better or worse, but I think that off of looks that this cell below seems better when trying to create a lot of things at once. . Explain purpose of SQL INSERT. Is this the same as User init? . The purpose fo SQL insert is to add new data into the database, I think it is because user init initializes the data meaning it assigns an initial value for a variable or data object. However I think init should be used to make the dataset then insert should be just strictly for adding new data in. . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . I think that hacked part helps towards encrypting the password so it is not as easily accessible. Explain try/except, when would except occur? . Try would happen when a user wants to reset or make new password, I think except would occur if the problem was not that no user id has been found or row for password was changed, bur not entirely sure exactly what the problem would be for this to happen. . What code seems to be repeated in each of these examples to point, why is it repeated? . It seems to be close cursor or connection, I think it is done so that it finishes processing, therefore results can be displayed. . Delete a User in table in Sqlite.db . Is DELETE a dangerous operation? Why? . It is not dangerous because deleting is part of the process of data if things are put incorrectly, and you can always input new data anyways. . In the print statemements, what is the “f” and what does {uid} do? . I think f find the userid, the bracket uid displays that certain uid found . Menu Interface to CRUD operations . Why does the menu repeat? . Menu repeats because it is the main thing that connects you to CRUD or S. . Could you refactor this menu? Make it work with a List? . I am not entirely sure, but it does sound possible. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2020/2023/03/20/2.4-a-and-b-Notes.html",
            "relUrl": "/week%2020/2023/03/20/2.4-a-and-b-Notes.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "2.4 Hacks",
            "content": "import sqlite3 def create_connection(db): connection = None try: connection = sqlite3.connect(db) return connection except Error as e: print(e) return connection def create_table(connection, createTblSql): try: cursor = connection.cursor() cursor.execute(createTblSql) except Error as e: print(e) def main(): database = &#39;instance/basketball.db&#39; createTblSql = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS basketball ( _id integer PRIMARY KEY, _player text NOT NULL, _nationality text NOT NULL, _strengths text NOT NULL, _weaknesses text NOT NULL ); &quot;&quot;&quot; connection = create_connection(database) # create basketball table if connection is not None: create_table(connection, createTblSql) else: print(&#39;Connection Error&#39;) if __name__ == &#39;__main__&#39;: main() . Create . def create(): database = &#39;instance/basketball.db&#39; player = input(&quot;Enter the player name&quot;) nationality = input(&quot;Enter nationality&quot;) strengths = input(&quot;Enter player strengths&quot;) weaknesses = input(&quot;Enter your player weaknesses&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO basketball (_player, _nationality, _strengths, _weaknesses) VALUES (?, ?, ?, ?)&quot;, (player, nationality, strengths, weaknesses)) # Commit the changes connection.commit() print(f&quot;New player {player} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . New basketball with Mugsy Bogues is added. . Read . def read(): database = &#39;instance/basketball.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from basketball table results = cursor.execute(&#39;SELECT * FROM basketball&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No basketball&quot;) # Closing cursor and connection cursor.close() connection.close() read() . (1, &#39;Lebron James&#39;, &#39;American&#39;, &#39;Clutch&#39;, &#39;Shooting&#39;) (2, &#39;Kevin Durant&#39;, &#39;American&#39;, &#39;Shooting&#39;, &#39;Strength&#39;) (3, &#39;Mugsy Bogues&#39;, &#39;American&#39;, &#39;Dunking&#39;, &#39;Short&#39;) . Update . import sqlite3 # updating review def update(): database = &#39;instance/basketball.db&#39; basketballId = input(&quot;Enter a basketball id to update the review&quot;) weaknesses = input(&quot;Enter new weakness&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating review for the basketball cursor.execute(&quot;UPDATE basketball SET _weaknesses = ? WHERE _id = ?&quot;, (weaknesses, basketballId)) if cursor.rowcount != 0: print(f&quot;Review for the basketball is updated to {weaknesses}&quot;) connection.commit() else: print(f&quot;basketball not found&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() update() . Review for the basketball is updated to Shooting . Delete . import sqlite3 def delete(): database = &#39;instance/basketball.db&#39; basketballId = input(&quot;Enter basketball id to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM basketball WHERE _id = ?&quot;, (basketballId,)) if cursor.rowcount == 0: print(f&quot;{basketballId} does not exist&quot;) else: print(f&quot;Successfully deleted player with id {basketballId}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() delete() . Successfully deleted book with id 2 . Menu . def process(): endpoint = input(&quot;r for read, d for delete, u for update, c for create&quot;) if endpoint == &quot;r&quot;: with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready elif endpoint == &quot;d&quot;: delete() elif endpoint == &quot;u&quot;: update() elif endpoint == &quot;c&quot;: create() else: print(&#39;function not found&#39;) process() . New basketball with Micheal Jordan is added. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/03/20/2.4-Hacks.html",
            "relUrl": "/2023/03/20/2.4-Hacks.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 2.4b Using Programs with Data - NBA Addition",
            "content": "Database Programming is Program with Data . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Traceback (most recent call last): File &#34;_pydevd_bundle/pydevd_cython.pyx&#34;, line 1078, in _pydevd_bundle.pydevd_cython.PyDBFrame.trace_dispatch File &#34;_pydevd_bundle/pydevd_cython.pyx&#34;, line 297, in _pydevd_bundle.pydevd_cython.PyDBFrame.do_wait_suspend File &#34;/Users/lukeriggins/opt/anaconda3/lib/python3.9/site-packages/debugpy/_vendored/pydevd/pydevd.py&#34;, line 1976, in do_wait_suspend keep_suspended = self._do_wait_suspend(thread, frame, event, arg, suspend_type, from_this_thread, frames_tracker) File &#34;/Users/lukeriggins/opt/anaconda3/lib/python3.9/site-packages/debugpy/_vendored/pydevd/pydevd.py&#34;, line 2011, in _do_wait_suspend time.sleep(0.01) KeyboardInterrupt . KeyboardInterrupt Traceback (most recent call last) /var/folders/rb/cg1zlcqx3kd5jwkb_g7zw1980000gn/T/ipykernel_73546/27105271.py in &lt;module&gt; 21 conn.close() 22 &gt; 23 schema() /var/folders/rb/cg1zlcqx3kd5jwkb_g7zw1980000gn/T/ipykernel_73546/27105271.py in schema() 6 7 # Connect to the database file -&gt; 8 conn = sqlite3.connect(database) 9 10 # Create a cursor object to execute SQL queries /var/folders/rb/cg1zlcqx3kd5jwkb_g7zw1980000gn/T/ipykernel_73546/27105271.py in schema() 6 7 # Connect to the database file -&gt; 8 conn = sqlite3.connect(database) 9 10 # Create a cursor object to execute SQL queries _pydevd_bundle/pydevd_cython.pyx in _pydevd_bundle.pydevd_cython.SafeCallWrapper.__call__() _pydevd_bundle/pydevd_cython.pyx in _pydevd_bundle.pydevd_cython.PyDBFrame.trace_dispatch() _pydevd_bundle/pydevd_cython.pyx in _pydevd_bundle.pydevd_cython.PyDBFrame.trace_dispatch() _pydevd_bundle/pydevd_cython.pyx in _pydevd_bundle.pydevd_cython.PyDBFrame.trace_dispatch() _pydevd_bundle/pydevd_cython.pyx in _pydevd_bundle.pydevd_cython.PyDBFrame.do_wait_suspend() ~/opt/anaconda3/lib/python3.9/site-packages/debugpy/_vendored/pydevd/pydevd.py in do_wait_suspend(self, thread, frame, event, arg, exception_type) 1974 1975 with self._threads_suspended_single_notification.notify_thread_suspended(thread_id, stop_reason): -&gt; 1976 keep_suspended = self._do_wait_suspend(thread, frame, event, arg, suspend_type, from_this_thread, frames_tracker) 1977 1978 frames_list = None ~/opt/anaconda3/lib/python3.9/site-packages/debugpy/_vendored/pydevd/pydevd.py in _do_wait_suspend(self, thread, frame, event, arg, suspend_type, from_this_thread, frames_tracker) 2009 2010 self.process_internal_commands() -&gt; 2011 time.sleep(0.01) 2012 2013 self.cancel_async_evaluation(get_current_thread_id(thread), str(id(frame))) KeyboardInterrupt: . Reading Users table . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . OperationalError Traceback (most recent call last) /var/folders/rb/cg1zlcqx3kd5jwkb_g7zw1980000gn/T/ipykernel_73546/3854437116.py in &lt;module&gt; 22 conn.close() 23 &gt; 24 read() /var/folders/rb/cg1zlcqx3kd5jwkb_g7zw1980000gn/T/ipykernel_73546/3854437116.py in read() 9 10 # Execute a SELECT statement to retrieve data from a table &gt; 11 results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() 12 13 # Print the results OperationalError: no such table: users . Create a new User . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . The Flask app object is a core component of the Flask web framework, which is a popular Python web framework for building web applications. The purpose of the Flask app object is to provide a central interface for configuring and managing a Flask application. It is responsible for handling requests, routing URLs to appropriate view functions, managing configuration settings, and handling errors. When you create a Flask application, you create an instance of the Flask class, which represents the application. This instance is stored in the app variable and is the primary way you interact with the application. You can use the app object to register routes, create views, configure settings, and manage the application&#39;s overall behavior. It is also used to start the application&#39;s web server, allowing it to receive and respond to incoming HTTP requests. Overall, the Flask app object provides a convenient and flexible way to build and manage web applications in Python. . | | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///basketball.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . yer . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "2.2 and 2.3 Notes and Qs",
            "content": "Notes 2.2 . Files are shrunk in order to reduce the storage they take up and therefore make work faster | Lossy data shrinks data but is unable to recover the original data | Lossless data shrinks the data and is able to recover the original | It is important to be able to navigate through directories | We use various methods to go through directories on Windows and Mac 2.3 | Pandas and dataframes are things which people can use to create their careers | Pandas is python tool which lets us work with dataframes | Headers are usually metadata and the inner area is data(more essential) | It is important to clean data in order to analyze and use it | De Morgan’s Law: the complement of the product of all the terms is equal to the sum of the complement of each term | When using dataframes which are long, head refers to the front of the list and tail is the end of the list | Collegeboard Questions I completed all the collegeboard assignment and here is my reflection on the questions. I tried thinking of different applications of the knowledge. | . Data Compression Q1 . Q: Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? | A: A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. | This means that the lossless compression algorithm will be able to save all the data of a file, while a lossy compression algorithm will maintain mostly the essential information. | This can be applied to how a lossy compression algorithm can be used to reduce files to the smallest size possible and lossless compression algorithms can be used to maintain the same data of a file even after compression. Q2 | Q: A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? | A: Compressing the file using a lossless compression algorithm before uploading it | A lossless algorithm allows the original file to be restored, which may be the reason of the name of lossless | A lossless algorithm can help maintain information of a file but help cut down on file size. This could be used for important things like word processing or database records. Q3 | Q: A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? | A: Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. Lossy compression will reduce the image file to have only the minimum data necessary, but a lossless compression will be able to restore all data. So, it makes sense for lossy images to be able to transmit faster. | A lossy compressed image will be used when a lot of files need to be stored and something needs to be reduced to the minimum. Reflection | Lossy and lossless compression are very important to understand. They both have different implications for a file. They also have different pros and cons for files. Being able to understand when to use the different types of compressions will be important as a developer in order to create quality algorithms which fit my overall purpose well. | . Extracting Information from Data . Q1 . Q: Upon compiling the data, the researcher identifies a problem due to the fact that neither data source uses a unique ID number for each student. Which of the following best describes the problem caused by the lack of unique ID numbers? | A: Students who have the same name may be confused with each other. | Since both datasets had first name and last name, but no unique identification, it would be possible to confuse two students for the same person. | This shows how important it is to have distinct characteristics for each piece of data. Using ID numbers can help solve this problem. Q2 | Q: A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? | A: Different counties may organize data in different ways. | Not all areas would have the same way of ordering and organizing data, so there could be different forms of data sets. | This is why data cleaning is important for data collectors, in order to make all the data in the same style so that programs will be able to easily run on them. Q3 | Q: A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? | A: Users might enter abbreviations for the names of cities.; Users might misspell the name of the city. | There are many types of errors which can arise when taking in user input. So, it is important to have checks in order to make sure that there is no garbage which will be able to get into the data set. | Implementing checks will be able to ensure that the user gets the best experience. Q4 | Q: Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? | A: Average ticket price | Given that the total dollar amount of all tickets sold is given, dividing that number by average ticket price would give a good estimate of the amount of tickets which are sold. Q5 | Q: A camera mounted on the dashboard of a car captures an image of the view from the driver’s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car’s speed, the date and time, and the car’s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? | A: The number of bicycles the car passed on a particular day | The dashboard of the car will be able to tell how much distance is traveled, the time, or the speed. These can all be estimated, but will never be accurate. However, the number of bicycles passed will be able to be compiled from the photos, thus making this the correct answer. | This shows how some important things like metadata may not be able to be accessed from the direct photo, but from metadata, while other things can only be found in the photo. Thus, it is important to be able to identify where to get the data from. Q6 | Q: Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? Do students who enjoy the subject material tend to spend more time on homework each night than the other students do? Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do? Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do? | A: I and II | The last question can’t be answered because the data set does not include a way to reference the answers to a student, since it is anonymous. So, the third question can’t be answered. | It is important to be able to tell what type of data is stored in a data set to ensure there are efficient programs being used. | . Reflection These questions showed me the multiple ways that data can be received. They also show the importance of being able to go through databases and get the data which you want. This is essential to creating the algorithms which you want, because you want to be able to understand what the data you have can and can’t do. . Using Programs Q1 . Q: For a given row in the spreadsheet, suppose genre contains the genre as a string, num contains the number of copies in stock as a number, and cost contains the cost as a number. Which of the following expressions will evaluate to true if the book should be counted and evaluates to false otherwise? | A: (genre = “mystery”) AND ((1 ≤ num) AND (cost &lt; 10.00)) | This makes sure that all the necessary requirements are met through AND conditionals/ Q2 | Q: Using only the data collected during the 7-day period, which of the following statements is true? | A: The total number of items purchased on a given date can be determined by searching the data for all transactions that occurred on the given date and then adding the number of items purchased for each matching transaction. | This is the only answer choice which uses data from the given dataset, so it is the only correct answer. Q3 | Q: A new rechargeable battery pack is available for products that use AA batteries. Which of the following best explains how the data files in the table can be used to send a targeted e-mail to only those customers who have purchased products that use AA batteries to let them know about the new accessory? | A: Use the products file to generate a list of product IDs that use AA batteries, then use the list of product IDs to search the purchases file to generate a list of customer IDs, then use the list of customer IDs to search the customers file to generate a list of e-mail addresses | This answer specifically finds customers who have purchased products using AA batteries and emails them. This is important to a efficient algorithm which helps both the business and the consumers. Q4 | Q: Which of the following sequences of steps can be used to identify the desired entry? | A: Filter by photographer, then filter by year, then sort by year; Sort by year, then filter by year, then filter by photographer | These both make sure that the picture selected is of a confirmed photographer and year. This ensures all requirements are met. Q5 | Q: For a given row in the spreadsheet, suppose genre contains the genre as a string and day contains the day as a string. Which of the following expressions will evaluate to true if the show should be counted and evaluates to false otherwise? | A: (genre = “talk”) AND ((day = “Saturday”) OR (day = “Sunday”)) | This answer uses both AND and OR to meet the required conditions. This is important because one has to happen and one is either or. Q6 -Q: Which of the following explains how the two databases can be used to develop the interactive exhibit? | A: Both databases are needed. Each database can be searched by animal name to find all information to be displayed. | Each database has part of the information needed, but not all of it, so they need to be combined in order to help the interactive exhibit work. | . Reflection The usage of programs is very useful with databases. They help to be able to efficiently go through and get the data required. However, it is also essential to write good code which meets the requirements. It is also necessary to have a good understanding of the information the database can give you, in order to make sure you can get the most out of your code with good accuracy. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2020/2023/03/13/2.2-and2.3-Notes.html",
            "relUrl": "/week%2020/2023/03/13/2.2-and2.3-Notes.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . from PIL import Image dfimage = Image.open(&quot;../_notebooks/files/table_dataframe.png&quot;) display(dfimage) . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # The data which needs to be cleaned are the ones which are inconsistent(ex. words for grades, no student ids) # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? # A good time to clean would be when we are getting the data in. So, we could remove the garbage when getting data from the dataframe. . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . My Hacks . Testing Pandas by myself . I have decided to use a csv file to get my data. This csv file has data from the top streamed songs on Spotify. . Spotify contains many songs of many different genres, so this provides a very large sample size. | There is not bias in data for the top streamed songs in the data, since this is numerical data. However, this does not represent the most popular songs of all time because songs released when Spotify was an app are more likely to be streamed on Spotify, rather than older songs. | The data set is maintained by a user on kaggle, so there does not need to be cleaning. | The purpose of this data set is to track the top streamed songs on Spotify. | . import pandas as pd streamdf = pd.read_csv(&#39;files/streams.csv&#39;) # using csv file for top streamed spotify songs topsong = streamdf.iloc[0] streams = streamdf[&quot;Streams (Billions)&quot;] meanstreams = streams.mean() topstreams = streamdf[streamdf[&quot;Streams (Billions)&quot;] &gt; 2.5] print(&quot;The top streamed song on Spotify is:&quot;) print(topsong) print(&quot; Break &quot;) print(&quot;The mean number of streams(in billions) of songs on this database:&quot;) print(meanstreams) print(&quot; Break &quot;) print(&quot;The songs with over 2.5 billion streams are:&quot;) print(topstreams) . The top streamed song on Spotify is: Song Blinding Lights Artist The Weeknd Streams (Billions) 3.449 Release Date 29-Nov-19 Name: 0, dtype: object Break The mean number of streams of songs on this database: 1.895999999999999 Break The songs with over 2.5 billion streams are: Song Artist Streams (Billions) 0 Blinding Lights The Weeknd 3.449 1 Shape of You Ed Sheeran 3.398 2 Dance Monkey Tones And I 2.770 3 Someone You Loved Lewis Capaldi 2.680 4 Rockstar Post Malone featuring 21 Savage 2.620 5 Sunflower Post Malone and Swae Lee 2.575 6 One Dance Drake featuring Wizkid and Kyla 2.556 Release Date 0 29-Nov-19 1 06-Jan-17 2 10-May-19 3 08-Nov-18 4 15-Sep-17 5 18-Oct-18 6 05-Apr-16 . Working with others . Adi and Alex decided to use the tips dataframe, so I decided to work with them. We first imported the dataframe and figured out the columns of the database. . import seaborn as sns # Load the titanic dataset tips_data = sns.load_dataset(&#39;tips&#39;) print(&quot;Tips Data&quot;) print(tips_data.columns) # titanic data set fr print(tips_data.head()) . Tips Data Index([&#39;total_bill&#39;, &#39;tip&#39;, &#39;sex&#39;, &#39;smoker&#39;, &#39;day&#39;, &#39;time&#39;, &#39;size&#39;], dtype=&#39;object&#39;) total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 . Then, we decided to change some of the properties inside the dataframe and add new columns. . from sklearn.preprocessing import OneHotEncoder td = tips_data td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;Male&#39; else 0) td[&#39;time&#39;] = td[&#39;time&#39;].apply(lambda x: 1 if x == &#39;Dinner&#39; else 0) td[&#39;percentage&#39;] = (td[&#39;tip&#39;]/td[&#39;total_bill&#39;]) * 100 print(td.head()) . total_bill tip sex smoker day time size percentage 0 16.99 1.01 0 No Sun 0 2 5.944673 1 10.34 1.66 0 No Sun 0 3 16.054159 2 21.01 3.50 0 No Sun 0 3 16.658734 3 23.68 3.31 0 No Sun 0 2 13.978041 4 24.59 3.61 0 No Sun 0 4 14.680765 . We also used sklearn to create a plot and a linear regression line of the total bill vs the percentage tip given. Based on this, there appears to be a decreasing trend between cost of meal and the percentage of tip given. I learned that there are many ways to use dataframe data and they can help complete many tasks, from simple data storage to complex analysis. . from sklearn.linear_model import LinearRegression import matplotlib.pyplot as plt df = pd.DataFrame(td) model = LinearRegression() # fit the model to the data model.fit(df[[&#39;total_bill&#39;]], df[[&#39;percentage&#39;]]) # predict the y values using the model y_pred = model.predict(df[[&#39;total_bill&#39;]]) # plot the data and the regression line plt.scatter(df[&#39;total_bill&#39;], df[&#39;percentage&#39;]) plt.plot(df[&#39;total_bill&#39;], y_pred, color=&#39;red&#39;) plt.show() . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/nba.csv&#39;).sort_values(by=[&#39;Name&#39;], ascending=False) print(&quot;--Name Top 10&quot;) print(df.head(10)) print(&quot;--Name Bottom 10&quot;) print(df.tail(10)) . --Name Top 10 Name Team Number Position Age 237 Zaza Pachulia Dallas Mavericks 27.0 C 32.0 271 Zach Randolph Memphis Grizzlies 50.0 PF 34.0 402 Zach LaVine Minnesota Timberwolves 8.0 PG 21.0 270 Xavier Munford Memphis Grizzlies 14.0 PG 24.0 386 Wilson Chandler Denver Nuggets 21.0 SF 29.0 25 Willie Reed Brooklyn Nets 33.0 PF 26.0 141 Willie Cauley-Stein Sacramento Kings 0.0 C 22.0 385 Will Barton Denver Nuggets 5.0 SF 25.0 233 Wesley Matthews Dallas Mavericks 23.0 SG 29.0 97 Wesley Johnson Los Angeles Clippers 33.0 SF 28.0 Height Weight College Salary 237 6-11 275.0 NaN 5200000.0 271 6-9 260.0 Michigan State 9638555.0 402 6-5 189.0 UCLA 2148360.0 270 6-3 180.0 Rhode Island NaN 386 6-8 225.0 DePaul 10449438.0 25 6-10 220.0 Saint Louis 947276.0 141 7-0 240.0 Kentucky 3398280.0 385 6-6 175.0 Memphis 3533333.0 233 6-5 220.0 Marquette 16407500.0 97 6-7 215.0 Syracuse 1100602.0 --Name Bottom 10 Name Team Number Position Age Height 135 Alan Williams Phoenix Suns 15.0 C 23.0 6-8 368 Alan Anderson Washington Wizards 6.0 SG 33.0 6-6 428 Al-Farouq Aminu Portland Trail Blazers 8.0 SF 25.0 6-9 330 Al Jefferson Charlotte Hornets 25.0 C 31.0 6-10 312 Al Horford Atlanta Hawks 15.0 C 30.0 6-10 404 Adreian Payne Minnesota Timberwolves 33.0 PF 25.0 6-10 328 Aaron Harrison Charlotte Hornets 9.0 SG 21.0 6-6 356 Aaron Gordon Orlando Magic 0.0 PF 20.0 6-9 152 Aaron Brooks Chicago Bulls 0.0 PG 31.0 6-0 457 NaN NaN NaN NaN NaN NaN Weight College Salary 135 260.0 UC Santa Barbara 83397.0 368 220.0 Michigan State 4000000.0 428 215.0 Wake Forest 8042895.0 330 289.0 NaN 13500000.0 312 245.0 Florida 12000000.0 404 237.0 Michigan State 1938840.0 328 210.0 Kentucky 525093.0 356 220.0 Arizona 4171680.0 152 161.0 Oregon 2250000.0 457 NaN NaN NaN .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/python/2023/03/09/AP-unit2-3.html",
            "relUrl": "/python/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "College board Unit 2 corrections",
            "content": "Test Corrections for Unit 2 Test . . I put option C which is incorrect. In the simulation, the variable flip_counter represents the number of times a coin was flipped. When flip_counter equals 2, only two coins have been flipped. This information does not lead to knowledge about the result of the simulation. Option D is correct. It is because there are 4 trials in the simulation, and the goal is to determine if there were an equal number of head and tails, or, in other words, 2 heads. In Step 2, heads_counter is incremented when coin_flip represents heads. The simulation will result in an equal number of heads and tails if heads_counter = 2. . . I put option C thinking that there would be an actual number that show up but since it was not defined when to stop, the number count would still infinitley go up and therefore there would be no number displayed because it is an infinite loop. . . . I put option D and this option is incorrect. Only one number should display. Option A is correct. The initial value of count is 1, which is less than 5. The variable count is incremented to 2, then 3, then 4, then 5. At this point the condition count &lt; 5 is false, and the algorithm displays the value 5. . . I put answer D, This option is incorrect. The value of the variable j starts at 1 and increases by 2. If is replaced with the expression j &gt; 7, the expression will evaluate to true when j is 9 and the loop will end. Option A is correct. Because the value of the variable j starts at 1 and increases by 2, the value of j will always be odd. Thus the value of j will never equal 6. If is replaced with the expression j = 6, the expression will always evaluate to false, and the loop will never end. . . . I put answer C, this option is correct. After one iteration of the Repeat 2 times loop, the robot will end up in the upper-right square facing to the left. After the second iteration of the Repeat 2 times loop, the robot will end up in the upper-left square facing down. The robot has finished in the gray square. The other option I put was D, this option is incorrect. After completing the inner Repeat 2 times loop, the robot will be in the center square of the grid facing down. Since this loop is nested inside another Repeat 2 times loop, these commands are executed again. At the end of execution, the robot will be in the same position at which it started. . . I put A, this option is incorrect. In program II, the value of i starts at n and finishes at 1, so that result stores the sum of n + (n - 1) + … + 3 + 2 + 1. This is the same as 1 + 2 + 3 + … + n. The answer C is correct. In program I, the value of i starts at 1 and finishes at n, so that result stores the sum of 1 + 2 + 3 + … + n. In program II the value of i starts at n and finishes at 1, so that result stores the sum of n + ( n - 1 ) + … + 3 + 2 + 1. Both programs display the correct sum. . . I put answer A which is wrong. A was: When the problem can be solved in a reasonable time and an approximate solution is acceptable. The correct answer was C which is: When the problem cannot be solved in a reasonable time and an approximate solution is acceptable. This makes sense because a heuristic solution cannot be determined if not a lot of time is allotted to do so getting an approximation is better then doing it incorrect. . Reflection . Overall, I did this test with one of my friends and we tried to work together to figure out the questions and this helped a lot and even allowed me to learn new concepts because my friend taught me some things I was unaware of and I did the same with him. This coding gave me new things to learn and incorporate into my code and overall I think taking this test helped a lot. I learned the definition of heuristic solutions, how to deal with repeats and loops, and many other coding things that I can use when I try to code myself. The test took a long time also but there are a lot of different coding topics and languages that helped me and though the help of others, and looking up some of the answers to understand how to do certain things, I was able to take a lot from this experience and learn. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2025/2023/03/08/College-Board-Unit-Test-2.html",
            "relUrl": "/week%2025/2023/03/08/College-Board-Unit-Test-2.html",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab: Not every file type is compatible for the same type of resizing, compression, etc. For instance, a jpg and png file may not use the same type of compression method. | Size, height and width, number of pixels: When managing image files, the height, width, and size can be adjusted when compressing. Later on in my hacks, we can see how I reduced the height and width of an original jpg file by 4x. | Visual perception, lossy compression: Lossy compression is when the file size of an image is compressed, and the visual perception experience of the image deteriorates; for instance, an image&#39;s quality becomes more fuzzy and less clear. | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? I do not have too much experience with Windows because I have only used MacBooks. However, after some research, I learned that dir and cd are some commands which can be used with Windows to access files. | What are the command you use in Windows terminal to access files? I do not have too much experience with Windows because I have only used MacBooks. However, after some research, I learned that dir and cd are some commands which can be used with Windows to access files. | What are some of the major differences? Windows uses c:&quot;file path&quot; in order to find the file path, while Mac usually uses /. Additionally, Windows uses , while Linux and Mac use /. The letter in front of the file path generally represents the hard drive which the file is stored on. Provide what you observed, struggled with, or leaned while playing with this code. | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? Path is a big deal when working with images because it is important to have the right path or else the computer will not know which file or folder to access. | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython seems interesting because it allows Python to have a lot of capability. For example, IPython allows us to have an interactive shell which we can use for images. from IPython.display import Image, display | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal?: Base64 is similar to binary and hex, since it is an encoding format which can convert a normal string/number into a series of encoded characters. It is different from binary and hexadecimal in the base that it uses. Base64 uses base 64 (0-63), while binary uses base 2 (0-1) and hexadecimal uses base 16 (0-9 and A-F). . Translate first 3 letters of your name to Base64.: Var --&gt; VmFy My name in Base64 is THVrZQ | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering?:I have been a consumer of buffering on sites like YouTube and news sites with many ads. I have always been a consumer of buffering when I have a lot of tabs open.- From your consumer experience, what effects have you experienced from buffering? When my computer has buffering, things take time to load and my computer runs slowly. This is bad for the user because it makes them frustrated and less likely to use a website. | How do these effects apply to images?: When I have buffering, images don&#39;t load up instantly, which can make the website look confusing and bad for the user. | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed?:This code looks like a series of steps are being performed to take the image, convert it to base64, and then turn it into grey scale. | Describe Grey Scale algorithm in English or Pseudo code?: The steps are that program loads up all the images. Then, the values of the pixels are averaged up to get a grey scale representation and then a new image is recreated based on the new averages. | Describe scale image? What is before and after on pixels in three images?: What is before and after on pixels in three images? Scale image allows the images to be resized. Before the pixels are their normal size, but now they are averaged up to be able to compress the images. | . Is scale image a type of compression? If so, line it up with College Board terms described?:If so, line it up with College Board terms described? Scaling an image is lossy compression. The quality of the file is reduced but the file size is also compressed. | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def image_management_add_html_red(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ scaler = 255 - (pixel[0]) average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;red_data&#39;].append((scaler, average, average, pixel[3])) # PNG format else: image[&#39;red_data&#39;].append((scaler, average, average)) # end for loop for pixels img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def image_management_add_html_blue(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;blue_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ scaler = 255 - (pixel[1]) average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;blue_data&#39;].append((average, scaler, average, pixel[3])) # PNG format else: image[&#39;blue_data&#39;].append((average, scaler, average)) # end for loop for pixels img.putdata(image[&#39;blue_data&#39;]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def image_management_add_html_green(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;green_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ scaler = 255 - (pixel[2]) average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;green_data&#39;].append((average, average, scaler, pixel[3])) # PNG format else: image[&#39;green_data&#39;].append((average, average, scaler)) # end for loop for pixels img.putdata(image[&#39;green_data&#39;]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print(&quot; red scale image &quot;) image_management_add_html_red(image) display(HTML(image[&#39;html_red&#39;])) print(&quot; blue scale image &quot;) image_management_add_html_green(image) display(HTML(image[&#39;html_green&#39;])) print(&quot; green scale image &quot;) image_management_add_html_blue(image) display(HTML(image[&#39;html_blue&#39;])) print() . ModuleNotFoundError Traceback (most recent call last) Cell In[3], line 3 1 from IPython.display import HTML, display 2 from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f -&gt; 3 from PIL import Image as pilImage # as pilImage is used to avoid conflicts 4 from io import BytesIO 5 import base64 ModuleNotFoundError: No module named &#39;PIL&#39; . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL:Stands for Python Imaging Library, and it adds many capabilities for processing different types of images. It is an open-source library, and it is often used to manipulate imported image properties.- numpy: This is another type of library that allows for the processing of mathematical functions in programs. | base64: This is an encoding algorithm representing binary data as text. | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . Programming Paradigm . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_red(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;red_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;red_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;-- red image --&quot;) display(HTML(image[&#39;html&#39;])) print() . -- red image -- . .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/03/07/Unit-2.2.html",
            "relUrl": "/2023/03/07/Unit-2.2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "NATM2",
            "content": ". Night at the Museum . . One of the first things I noticed when walking into the ceramics room was the Orange octopus because of how skillfully crafted it was. As someone who has done ceramics in the past, I recognize how hard it is to produce small pieces that connect together because it is super easy for them to break apart. Another thing I liked about the octopus is the coloring od it because the orange and dark orange makes the photo look very cool. Last thing I want to praise in this photo is tat the octopus tenticals are all the ame length and width which is very hard to maintain. . . I also liked looking at Jefferys website. It was very well made because the frontend as well as the features he put in where very cool. When imputing things into the searchbar, actual results, although not fully working, displayed which shows the connection of an API which I can respect a lot because I personally tried to do that and was unsuccessful. . . I like the photo of Ben Lee going up for a basket when looking in the photo room because it perfectly shows the sport in action. I like the contrasting colors between te black and red torrey pines team and the white and blue of the Del Norte jersey colors. Another thing I liked is how the only orange in the photo is the basketball so my eye was drawn to the ball which seems to be the focal point of the image. There is also leading like in the photo from the lines on the court to the lines of the flag pointing downward. . reflection In all honesty Night at the Museum did not go that well for us because we came unprepared and willing to take a massive L. This was 100 percent our fault, all we had was a quiz made in the front end and nothing else. We showed a few people and all they could do was laugh. we should it to Mr.Yeung and he was dissapointed but I understood why. As a result we worked very hard to have a finished product by the end of break. Natm was a wake up call. Besides my experience personally the event was very cool because the ceramic was very ornate and well put together. The photos looked legit and taken by actual pros. One photo not depicted here was a photo of a flower which seems boring but the detail was breath taking and insane. The code i saw was lowkey dissapointing because most people did not have everything complete also. It gave us hope to keep working. Other Photos I took while there: .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2020/2023/02/27/Night-At-The-M-2.html",
            "relUrl": "/week%2020/2023/02/27/Night-At-The-M-2.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "NATM2",
            "content": ". Night at the Museum . . One of the first things I noticed when walking into the ceramics room was the Orange octopus because of how skillfully crafted it was. As someone who has done ceramics in the past, I recognize how hard it is to produce small pieces that connect together because it is super easy for them to break apart. Another thing I liked about the octopus is the coloring od it because the orange and dark orange makes the photo look very cool. Last thing I want to praise in this photo is tat the octopus tenticals are all the ame length and width which is very hard to maintain. . . I also liked looking at Jefferys website. It was very well made because the frontend as well as the features he put in where very cool. When imputing things into the searchbar, actual results, although not fully working, displayed which shows the connection of an API which I can respect a lot because I personally tried to do that and was unsuccessful. . . I like the photo of Ben Lee going up for a basket when looking in the photo room because it perfectly shows the sport in action. I like the contrasting colors between te black and red torrey pines team and the white and blue of the Del Norte jersey colors. Another thing I liked is how the only orange in the photo is the basketball so my eye was drawn to the ball which seems to be the focal point of the image. There is also leading like in the photo from the lines on the court to the lines of the flag pointing downward. . Other Photos I took while there: .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2020/2023/02/27/NATM2.html",
            "relUrl": "/week%2020/2023/02/27/NATM2.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Playing around with Java Script",
            "content": "Math.round(93.5); . 94 . const removeDuplicates = (arr) =&gt; [...new Set(arr)] removeDuplicates([31, 56, 12, 31, 45, 12, 31]) //[ 31, 56, 12, 45 ] . [ 31, 56, 12, 45 ] . const dayDif = (date1, date2) =&gt; Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000) dayDif(new Date(&quot;2022-09-30&quot;), new Date(&quot;2022-10-13&quot;)) . 13 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/02/26/Playing-around-Java-Script-copy.html",
            "relUrl": "/jupyter/2023/02/26/Playing-around-Java-Script-copy.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Vocab and Agile Notes",
            "content": "",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/02/26/NATM.html",
            "relUrl": "/2023/02/26/NATM.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Python Lists and Dictionaries",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Luke Riggins&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 17 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] # *I added bash as a language* print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) # *I changed the index from 0 to 3 so that the print command will print Bash instead of Python* print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Luke Riggins &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 17 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Luke Riggins&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Luke Riggins &lt;class &#39;str&#39;&gt; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Nyguen&quot;, &quot;DOB&quot;: &quot;October 3&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;EthanN45233@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;luker56233@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Volkswagon Passat&quot;] }) # PUTTING MY INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;Rancho Bernardo&quot;, &quot;Email&quot;: &quot;luke120204@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota&quot;] }) # PUTTING MY PARTER&#39;S INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Jeffery&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;jefferyl56783@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Honda Accord&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Nyguen&#39;, &#39;DOB&#39;: &#39;October 3&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;EthanN45233@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;luker56233@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Volkswagon Passat&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;Rancho Bernardo&#39;, &#39;Email&#39;: &#39;luke120204@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota&#39;]}, {&#39;FirstName&#39;: &#39;Jeffery&#39;, &#39;LastName&#39;: &#39;Lee&#39;, &#39;DOB&#39;: &#39;December 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;jefferyl56783@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Honda Accord&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Formatted output of List/Dictionary - for loop . Prepare a function to format the data . | Prepare a function to iterate through the list . | Activate your function . | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Alternate Methods for iteration . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Creating a For Loop with Index . for indx, record in enumerate(InfoDb): print(&quot;Record #&quot; + str(indx+1) + &quot;: &quot;, end = &quot;&quot;) print_data(record) . Record #1: Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Record #2: Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Record #3: Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Record #4: Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Reverse Order . for record in reversed(InfoDb): print_data(record) . Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/02/26/Dcitionaries-Lists-and-Dictionaries.html",
            "relUrl": "/jupyter/2023/02/26/Dcitionaries-Lists-and-Dictionaries.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 5 Stuff",
            "content": "5.4 Crowdsourcing . A crowdsourcing idea which I have is by having a form to be able take in consumer input on my Create Performance Task site. This would be able to be requested by anyone on Del Norte and they would answer questions about how they like my program and what could be done to improve it. I would do this because I would be able to get a lot of information about how to better meet the needs of the consumer. This will allow me to see viewpoints I did not see and have an overall better functioning program. | In CSP, with a wide variety of students in the class, we are lucky to be able to have lots of different viewpoints. This will help us develop code which is more accommodating of all people. A crowdsourcing idea which I have for CSP is creating an open source code repository for people to edit. This can be a copy of my own repository, and with the advice of many students, I will be able to see different ways to make my code more efficient. I could initiate this by advertising this during class or on Slack in order to be able to communicate with other students to inform them of the open source code. | At Night at the Museum, it would probably be best to supply a form which will allow people to provide their input on my program. I will have a form link at the end of my higher or lower game in order to get user input. I would probably asked for the rating of the game and also add comments or features which they believe they could improve the program. I could create a graph representing the rating of my program and also make outlines and potentially change my code to incorporate the user input into my program. | . 5.5 Legal and Ethical Concerns . Licenses are guidelines for distribution and usage of code | They help to give the author credit and help to keep things confidential | The GitHub repository must be public | Creative Commons Zero v1.0 Universal: Waives copyright interest | Allows to be accessed on public domain | Open Source MIT License: The usage of code is not restricted | Allows closed source projects to be distributed | Authors will be able to get credit. However, this could just mean a - simple name mention | Allows for GitHub repository to be private | GPL License: Almost any freedom with project, except distributing closed source versions | Are important for businesses and people to be able to get their money | They can be bad when ignored | Copyright ensures that people can own the work they produce | Can be good when people try to claim they own someone else’s work | an be bad when the owner constantly restricts usage of their work, even if it is not the main focus(ex. taking profit from creator using their work as background music) | Sites which “pirate” copyrighted things can be good and bad | Technically illegal under licensing rules, but give greater access to items which can educate people | Does not give creators credit | Can be on sketchy sites which perpetrate scams | Personal Fastpages: GPL License | People can see the project freely | Frontend/Backend of CPT Project: Open Source MIT License | People can use our project as an inspiration for projects they take upon | We would like to be cited for our work | Allows more freedom with what people want to do with our things | . 5.6 Safe Computing . Symmetric Encryption: When a single key is used to encrypt and decrypt data | Asymmetric encryption: When one key is used to encrypt data and another one is used to decrypt the data | One example of how we use encryption through AWS is how our repositories use SSH keys. These allow us to encrypt data for our repositiories. | I have seen lots of PII used in GitHub projects. I have seen examples of people using names, phone numbers, emails, and usernames for projects. | Good passwords are ones which are long and have a variety of symbols, numbers, and letters(upper and lowercase). Bad passwords are simple and reused. To authenticate passwords, websites can have checks on passwords to meet certain length and complexity requirements. Additionally, users may be able to download a program which tells them if one of their passwords is too similar to another one. | I think PII is important for being able to see information about a specific person. Everyone has their own information which makes them unique, like their awards and special hobbies and these can be shared online on a place like LinkedIn to further careers. Things like phone numbers and addresses are also available, but if they are in the wrong hands, they can be detrimental to people. Things like SSNs and bank numbers should not be in the hands of other people because they are very important to our lives. | Phishing schemes which I have learned about the hard way are ones where they slightly change the link of a website to look like they are the regular website, but are actually not. Other potential ways of phishing could be emails where someone impersonates a company or person or phone calls. It is important to pay attention to the details to determine if a call, email, or website is a scam. | .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2020/2023/02/13/5.4-to-5.6-Notes.html",
            "relUrl": "/week%2020/2023/02/13/5.4-to-5.6-Notes.html",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Unit 5 Stuff",
            "content": "5.1 . Main Idea Every invention whether it’s in computer science or something else, has its benefits and its downsides/ disruptions . Ex: Chat GPT . Chat GPT helps people create assignments just by running through it redfines the necessity and purpose of search engines | However, it discourages critical thinking | Also, Chat GPT is full of bias because there is only one answer and other answers are not considered | . Dopamine and its Benefits and Negatives . Dopamine is another example of something that has borth positive and negative effects . Rosner was a professional gamer who was an example of this. He was celebrated as a World of Warcraft builder and he got lots of dopamine from his success. However, this dopamine was although exciting, it was also detrimental for Rosner. He reported that his grades started tanking and found other healthier activities such as going to the gym and watching films. | Thus, there were both benefits and harmful effects to Dopamine | . Phone Trees . Phone Trees are another example where despite a reduction in need for employees, the process of getting the customer to where they want was time consuming and inconvenient (harmful effect) . Blog Post Reflection Most developers try to aim for positive effects. However, not every effect of a computing innovation is anticipated in advance. Some effects are harmful. For example, inventors of television, computers, mobile devices, and social media did not intend to unleash a slew of negative consequences for children. . shortened attention spans | lack of connection to nature | cyber bullying and hate groups | spread of misingormation and fake news The intention was to produce a convenient and modern form of entertainment which in some ways, these fields achieve their goals. | . Dopamine Issues are definetely real and I have experienced these issues myself. Sometimes, I can get caught up watching videos or scrolling through social media because of that instant dopamine effect which definetely prevented me from doing homework and affecting my academics. However, some forms of dopamine can definetely be beneficial.Finishing a project you worked long and hard on or helping others can serve as sources of dopamine that aren’t necessarily bad. . 5.2 . Digital Divide is the difference in access to technology. Deals with “To Have and Have Not” in relation to computers, internet, or technology in general. . Some people may have no access to the internet or have worn down computers | prevents students from being digitally equipped and being able to learn and perform | Comparatively, Del Norte High School has access to digital software and internet | Digital Divide between Del Norte and other schools | . Contributing factors to divide are socioeconomic, geographic, and demographic . In San Digeo, there is a regional divide marked by the interstate 8 | Some Religious groups like the amish choose not to use technology | . In education equity requires school to provide materials like computers and chromebooks. . However, there is still a digital divide in the way chromebooks a are hard for coding and have restrictions on them that prevent installation of coding platforms such as vscode | . Blog Post Reflection - Digital Empowerment . One can empower themselves in the digital world by using the resources they have to do the best in their field. A student may have a lack of resources but should still use free chromebooks, school internet, etc. to get their work done. Also, empowerment can be made if more,better resources can be provided. If everone had access to internet and functional computers, computation would be much more equal. | Someone that is empowered can help someone who is not empowered by sharing access to resources or donating unneeded materials. Someone who needs to create a physics project could greatly benefit from plastic, cardboard, scissors, tubes, etc. even if someone does not need them. | I believe red tape is the hindrance to digital empowerment because certain rules are unnecessary and prevent people from critically thinkng/ exploring. Website regulations, download regulations all affect a student’s learning. | . Reflection . Questions From Canvas This project can have many beneficial impacts . Help Educate people about sports | Help me learn to code | Allow people to keep up to date with their favorite teams if they do not have time | Entertaining for users to look through | . Potential Harms: . Can lead to people spending to much time | Could lead to people sports betting | the website could provide incorrect statistics | . Pros of Internet Blocker: . To help ensure that students go on school friendly sites | Helps students pay attention during school by blocking certain sites and social medias Cons of Internet Blockers: | Websites that are useful are not able to be used | Many Computer Science sites are not available because they haven’t been verified | Makes it harder for students to be able to study everything at school | . Due to the Digital Divide it can be harder for people without access to technology to be able to have access to the newest advancements and news on their devices. This would put these people at a disadvantage when trying to get into jobs or schools. Additionally, with lots of of complex technology, it could be very hard to be able to know everything. So, we would spend more and more time on our computers, which can be bad for our health and cause people to get more and more distracted. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2017/2023/01/31/Unit-5-stuff.html",
            "relUrl": "/week%2017/2023/01/31/Unit-5-stuff.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "Planning Preformance Task",
            "content": "Create Performance Task Planning . My task it to creat an API that updates day by day to show the stats of NBA players in order to predict their next stat line given their next game. . Program Purpose and Function . The API and program I have will serve as both a database and a way to entertain people and provide them with a source to practice sports trivia. | . Data Abstraction . I will store teams in lists based on their area and conference. Each team will have a conference assigned to them, which will hold their stats. I will then be able to have more in depth information. | . Managing Complexity . The list would be used to manage the teams and players. Without a list, the program would be inefficient, because it would have to call all players from a group before random selection. | . Procedural Abstraction . I will develop a procedure to randomly select the two players and create an output for the user. I will store the user’s response in a variable and use that to decide what to do on the next screen(game over or continue on). | . Algorithm Implementation . The algorithm which I will use will check if the user chose the player with more of a certain statistic. If so, then another challenge will be generated. The challenges will appear until the user gets one wrong. This shows sequencing, selection, and iteration. | . Testing . To test I will retry and repeat until it works. This will test the continuation feature of the game as well as the ending of the game. | . Video Planning This which I plan to show in my video: . User correctly selecting player | User incorrectly selecting player | Final screen after wrong answer | Game ending after player scores no points | Game ending after player scores some points | . I think the video will be able to be easily done under the given threshold of 60 seconds, since there are a few simple things to be shown. . Code Plan Potential code segments to submit to Collegeboard: . Usage of list to store list of players | Code which will determine whether user will get another question or if the game will end | Accessing the list storing the player data | . With the code segments, it will be important to have segments which can serve for multiple requirements. Based on the examples, it looks like there are only a limited amount of code segments which can be uploaded, so it is important to use each one to its maximum potential. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2017/2023/01/31/Preformance-Task-Planning.html",
            "relUrl": "/week%2017/2023/01/31/Preformance-Task-Planning.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "College Board Corrections",
            "content": "I took this test with the help of Arnav. He had already taken the test but went out of his way to help me and he taught me a lot about certain variables and how to read code in general. As a result, I got a 44/50, the same as him. . . Corrections . #21 I did not know how to do this, I put C not knowin anything.I learned to see that loop causes i to be reset to 1 every time, so it can never reach the value of 4. So the correct answer would be D, where the program loops forever. . #23 I originally selected the answer of D, where the count would displayed after every iteration. I did not take into account that the flowchart showed that count would only be displayed if it was over 5, so the correct answer would be A, 5. . #25 Initially I thought it was C because of the infinite loop.However, I missed the fact that j was initially 1, so that 2 would be added on every time to j. This meant that 7 would be a possible value for j, but 6 would not be. So, the correct answer would be j=6, or A. . #28 I got this question wrong because I did not select two options. I was planning to originally select A and C because they both would get the robot to the gray square, but I think I forget to select A. It is important to pay attention to my answers. . #32 I originally selected A for this problem, saying that only program 1 would get the correct answer. However, both programs would get the right answer for the question. I did not realize that the second program segment would add 1 to the program for every 1 in n(1 for 1, 2 for 2, 3 for 3, etc), and then would subtract 1 from n every time. So, this would end up yielding the same result as the other algorithm. This means that C, where both programs work, would be correct. . #45 . The sole reason I had no clue how to do this was I did not know the nessary vocab being heuristic. I did not know what heuristic meant, so this taught me a new word. After going over the meaning, I realized that this is good when you cannot get the specific solution to a problem, but can get an approximate one. I originally answered that a heuristic approach would be good for a problem when it could be solved in reasonable time and an approximate solution is needed(A). However, you could solve this by just finding the exact solution, and don’t need trial and error. However, if you don’t know how long it will take for a solution to be found, you can use trial and error(a heuristic approach) to get an approximate solution. So, the answer would be C. . Reflection . Overall, I found these questions very rewarding because they were not incredibly hard where there was no point of doing them but they were not easy where I did not learn anything. It was a good balance between easy and hard. hese hacks were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to perform the hacks well. The fact I had a person better at coding then me helping me was great and I learned a lot from it. Out of all the tests, I was able to retain a lot more from this one then others. Overall it was good and it helped me become a better coder. . fr .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2017/2023/01/31/College-Board-Test-2.html",
            "relUrl": "/week%2017/2023/01/31/College-Board-Test-2.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Model And Object Oriented Model",
            "content": "{ “cells”: [ { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Class and Object Terms n”, “The foundations of Object-Oriented Programming is defining a Class n”, “ n”, “In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. n”, “ n”, “A Class has … n”, “- a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self n”, “- a collection of Functions/Procedures. These are called Methods when they exist inside a Class definition. n”, “- An Object is created from the Class/Template. Characteristics of objects … n”, “- an Object is an Instance of the Class/Template n”, “- there can be many Objects created from the same Class n”, “- each Object contains its own Instance Data n”, “- the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class n”, “- all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) n”, “ n”, “A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions … n”, “- @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) n”, “- @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) n”, “- observe all instance data (self._name, self.email …) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email …) n” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Class and Object Code” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Test 1, find user 3 n”, “name: &quot;Thomas Edison&quot;, id: &quot;toby&quot;, psw: &quot;sha256$pn2…&quot; n”, “name: &quot;Nicholas Tesla&quot;, id: &quot;nick&quot;, psw: &quot;sha256$u0g…&quot; n”, “ name: &quot;Alexander Graham Bell&quot;, id: &quot;lex&quot;, psw: &quot;sha256$mHE…&quot; n”, “name: &quot;Eli Whitney&quot;, id: &quot;eli&quot;, psw: &quot;sha256$hM5…&quot; n”, “name: &quot;Hedy Lemarr&quot;, id: &quot;hedy&quot;, psw: &quot;sha256$YiQ…&quot; n”, “Test 2, change user 3 n”, “name: &quot;Thomas Edison&quot;, id: &quot;toby&quot;, psw: &quot;sha256$pn2…&quot; n”, “name: &quot;Nicholas Tesla&quot;, id: &quot;nick&quot;, psw: &quot;sha256$u0g…&quot; n”, “* name: &quot;John Mortensen&quot;, id: &quot;jm1021&quot;, psw: &quot;sha256$fw0…&quot; n”, “name: &quot;Eli Whitney&quot;, id: &quot;eli&quot;, psw: &quot;sha256$hM5…&quot; n”, “name: &quot;Hedy Lemarr&quot;, id: &quot;hedy&quot;, psw: &quot;sha256$YiQ…&quot; n”, “Test 3, make a dictionary n”, “[{&quot;_name&quot;: &quot;Thomas Edison&quot;, &quot;_uid&quot;: &quot;toby&quot;, &quot;_password&quot;: &quot;sha256$pn2SlfuWJNYSdWuf$c44366eb6ed3b16595871f347ec91f3d3ce8f8152d013b81eaa3577e2c79c7d3&quot;}, {&quot;_name&quot;: &quot;Nicholas Tesla&quot;, &quot;_uid&quot;: &quot;nick&quot;, &quot;_password&quot;: &quot;sha256$u0gEQlBSRzzKVbdZ$2357e295b91cbe7ad41202e6884c0c39bfff534b0d5a4dff74f58c8f41449cd5&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;, &quot;_password&quot;: &quot;sha256$fw0sZwDl8V3d05Xr$bfd7e7d75c82916494d7b2af6b219fb0151964713874fa08232839b13efe9649&quot;}, {&quot;_name&quot;: &quot;Eli Whitney&quot;, &quot;_uid&quot;: &quot;eli&quot;, &quot;_password&quot;: &quot;sha256$hM5X0RZi14Hs3GRq$c86cfb7a810633541d209b3da7485bfa09c7abcdd1d186a23eb1800084defb80&quot;}, {&quot;_name&quot;: &quot;Hedy Lemarr&quot;, &quot;_uid&quot;: &quot;hedy&quot;, &quot;_password&quot;: &quot;sha256$YiQRztA1yx5f8WJq$bf26508cecc10aed115c4813d765bcf16b2598d18d41ac4ef428beeb7913330e&quot;}] n”, “Test 4, make a dictionary n”, “[{&quot;_name&quot;: &quot;Thomas Edison&quot;, &quot;_uid&quot;: &quot;toby&quot;, &quot;_password&quot;: &quot;sha256$pn2SlfuWJNYSdWuf$c44366eb6ed3b16595871f347ec91f3d3ce8f8152d013b81eaa3577e2c79c7d3&quot;}, {&quot;_name&quot;: &quot;Nicholas Tesla&quot;, &quot;_uid&quot;: &quot;nick&quot;, &quot;_password&quot;: &quot;sha256$u0gEQlBSRzzKVbdZ$2357e295b91cbe7ad41202e6884c0c39bfff534b0d5a4dff74f58c8f41449cd5&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;, &quot;_password&quot;: &quot;sha256$fw0sZwDl8V3d05Xr$bfd7e7d75c82916494d7b2af6b219fb0151964713874fa08232839b13efe9649&quot;}, {&quot;_name&quot;: &quot;Eli Whitney&quot;, &quot;_uid&quot;: &quot;eli&quot;, &quot;_password&quot;: &quot;sha256$hM5X0RZi14Hs3GRq$c86cfb7a810633541d209b3da7485bfa09c7abcdd1d186a23eb1800084defb80&quot;}, {&quot;_name&quot;: &quot;Hedy Lemarr&quot;, &quot;_uid&quot;: &quot;hedy&quot;, &quot;_password&quot;: &quot;sha256$YiQRztA1yx5f8WJq$bf26508cecc10aed115c4813d765bcf16b2598d18d41ac4ef428beeb7913330e&quot;}] n” ] } ], “source”: [ “# Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) n”, “# A gateway in necessary as a web server cannot communicate directly with Python. n”, “# In this case, imports are focused on generating hash code to protect passwords. n”, “from werkzeug.security import generate_password_hash, check_password_hash n”, “import json n”, “ n”, “# Define a User Class/Template n”, “# – A User represents the data we want to manage n”, “class User: n”, “ # constructor of a User object, initializes the instance variables within object (self) n”, “ def init(self, name, uid, password): n”, “ self._name = name # variables with self prefix become part of the object, n”, “ self._uid = uid n”, “ self.set_password(password) n”, “ n”, “ # a name getter method, extracts name from object n”, “ @property n”, “ def name(self): n”, “ return self._name n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @name.setter n”, “ def name(self, name): n”, “ self._name = name n”, “ n”, “ # a getter method, extracts email from object n”, “ @property n”, “ def uid(self): n”, “ return self._uid n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @uid.setter n”, “ def uid(self, uid): n”, “ self._uid = uid n”, “ n”, “ # check if uid parameter matches user id in object, return boolean n”, “ def is_uid(self, uid): n”, “ return self._uid == uid n”, “ n”, “ @property n”, “ def password(self): n”, “ return self._password[0:10] + &quot;…&quot; # because of security only show 1st characters n”, “ n”, “ # update password, this is conventional setter n”, “ def set_password(self, password): n”, “ &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; n”, “ self._password = generate_password_hash(password, method=’sha256’) n”, “ n”, “ # check password parameter versus stored/encrypted password n”, “ def is_password(self, password): n”, “ &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; n”, “ result = check_password_hash(self._password, password) n”, “ return result n”, “ n”, “ # output content using str(object) in human readable form, uses getter n”, “ def str(self): n”, “ return f’name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;‘ n”, “ n”, “ # output command to recreate the object, uses attribute directly n”, “ def repr(self): n”, “ return f’Person(name={self._name}, uid={self._uid}, password={self._password})’ n”, “ n”, “ n”, “# tester method to print users n”, “def tester(users, uid, psw): n”, “ result = None n”, “ for user in users: n”, “ # test for match in database n”, “ if user.uid == uid and user.is_password(psw): # check for match n”, “ print(&quot;* &quot;, end=&quot;&quot;) n”, “ result = user n”, “ # print using str method n”, “ print(str(user)) n”, “ return result n”, “ n”, “ n”, “# place tester code inside of special if! This allows include without tester running n”, “if name == &quot;main&quot;: n”, “ n”, “ # define user objects n”, “ u1 = User(name=’Thomas Edison’, uid=’toby’, password=’123toby’) n”, “ u2 = User(name=’Nicholas Tesla’, uid=’nick’, password=’123nick’) n”, “ u3 = User(name=’Alexander Graham Bell’, uid=’lex’, password=’123lex’) n”, “ u4 = User(name=’Eli Whitney’, uid=’eli’, password=’123eli’) n”, “ u5 = User(name=’Hedy Lemarr’, uid=’hedy’, password=’123hedy’) n”, “ n”, “ # put user objects in list for convenience n”, “ users = [u1, u2, u3, u4, u5] n”, “ n”, “ # Find user n”, “ print(&quot;Test 1, find user 3&quot;) n”, “ u = tester(users, u3.uid, &quot;123lex&quot;) n”, “ n”, “ n”, “ # Change user n”, “ print(&quot;Test 2, change user 3&quot;) n”, “ u.name = &quot;John Mortensen&quot; n”, “ u.uid = &quot;jm1021&quot; n”, “ u.set_password(&quot;123qwerty&quot;) n”, “ u = tester(users, u.uid, &quot;123qwerty&quot;) n”, “ n”, “ n”, “ # Make dictionary n”, “ ‘’’ n”, “ The dict in Python represents a dictionary or any mapping object that is used to store the attributes of the object. n”, “ Every object in Python has an attribute that is denoted by dict. n”, “ Use the json.dumps() method to convert the list of Users to a JSON string. n”, “ ‘’‘ n”, “ print(&quot;Test 3, make a dictionary&quot;) n”, “ json_string = json.dumps([user.dict for user in users]) n”, “ print(json_string) n”, “ n”, “ print(&quot;Test 4, make a dictionary&quot;) n”, “ json_string = json.dumps([vars(user) for user in users]) n”, “ print(json_string)” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Hacks n”, “Add new attributes/variables to the Class. Make class specific to your CPT work. n”, “ n”, “- Add classOf attribute to define year of graduation n”, “ - Add setter and getter for classOf n”, “- Add dob attribute to define date of birth n”, “ - This will require investigation into Python datetime objects as shown in example code below n”, “ - Add setter and getter for dob n”, “- Add instance variable for age, make sure if dob changes age changes n”, “ - Add getter for age, but don’t add/allow setter for age n”, “- Update and format tester function to work with changes n”, “ n”, “Start a class design for each of your own Full Stack CPT sections of your project n”, “ n”, “- Use new code cell in this notebook n”, “- Define init and self attributes n”, “- Define setters and getters n”, “- Make a tester” ] }, { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Start Code for Hacks” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “from datetime import date n”, “ n”, “def calculate_age(born): n”, “ today = date.today() n”, “ return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) n”, “ n”, “dob = date(2004, 12, 31) n”, “age = calculate_age(dob) n”, “print(age)” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “2022-23 NBA Stats n”, “JSON ready string for 4 players: n”, “ [User(name=Lebron James, current_team=Los Angeles Lakers, stats=Rec Pts: 38,024), User(name=Kevin Durant, current_team=Brooklyn Nets, stats=Rush Pts: 26,684), User(name=Giannis Antetokounmpo, current_team=Milwaukee Bucks, stats=Rec Pts: 15,406), User(name=Nikola Jokic, current_team=Denver Nuggets, stats=Rec Pts: 11,327)] n”, “ n”, “Values for Lebron James: n”, “Raw Variables of object: n”, “ {‘_name’: ‘Lebron James’, ‘_team’: ‘Los Angeles Lakers’, ‘_stats’: ‘Rec Pts: 38,024’} n”, “ n”, “Raw Attributes and Methods of object: n”, “ [‘class’, ‘delattr’, ‘dict’, ‘dir’, ‘doc’, ‘eq’, ‘format’, ‘ge’, ‘getattribute’, ‘gt’, ‘hash’, ‘init’, ‘init_subclass’, ‘le’, ‘lt’, ‘module’, ‘ne’, ‘new’, ‘reduce’, ‘reduce_ex’, ‘repr’, ‘setattr’, ‘sizeof’, ‘str’, ‘subclasshook’, ‘weakref’, ‘_name’, ‘_stats’, ‘_team’, ‘dictionary’, ‘name’, ‘stats’, ‘team’, ‘uid’] n”, “ n”, “Representation to Re-Create the object: n”, “ User(name=Lebron James, current_team=Los Angeles Lakers, stats=Rec Pts: 38,024) n”, “ n”, “Values for Kevin Durant: n”, “Raw Variables of object: n”, “ {‘_name’: ‘Kevin Durant’, ‘_team’: ‘Brooklyn Nets’, ‘_stats’: ‘Rush Pts: 26,684’} n”, “ n”, “Raw Attributes and Methods of object: n”, “ [‘class’, ‘delattr’, ‘dict’, ‘dir’, ‘doc’, ‘eq’, ‘format’, ‘ge’, ‘getattribute’, ‘gt’, ‘hash’, ‘init’, ‘init_subclass’, ‘le’, ‘lt’, ‘module’, ‘ne’, ‘new’, ‘reduce’, ‘reduce_ex’, ‘repr’, ‘setattr’, ‘sizeof’, ‘str’, ‘subclasshook’, ‘weakref’, ‘_name’, ‘_stats’, ‘_team’, ‘dictionary’, ‘name’, ‘stats’, ‘team’, ‘uid’] n”, “ n”, “Representation to Re-Create the object: n”, “ User(name=Kevin Durant, current_team=Brooklyn Nets, stats=Rush Pts: 26,684) n”, “ n”, “Values for Giannis Antetokounmpo: n”, “Raw Variables of object: n”, “ {‘_name’: ‘Giannis Antetokounmpo’, ‘_team’: ‘Milwaukee Bucks’, ‘_stats’: ‘Rec Pts: 15,406’} n”, “ n”, “Raw Attributes and Methods of object: n”, “ [‘class’, ‘delattr’, ‘dict’, ‘dir’, ‘doc’, ‘eq’, ‘format’, ‘ge’, ‘getattribute’, ‘gt’, ‘hash’, ‘init’, ‘init_subclass’, ‘le’, ‘lt’, ‘module’, ‘ne’, ‘new’, ‘reduce’, ‘reduce_ex’, ‘repr’, ‘setattr’, ‘sizeof’, ‘str’, ‘subclasshook’, ‘weakref’, ‘_name’, ‘_stats’, ‘_team’, ‘dictionary’, ‘name’, ‘stats’, ‘team’, ‘uid’] n”, “ n”, “Representation to Re-Create the object: n”, “ User(name=Giannis Antetokounmpo, current_team=Milwaukee Bucks, stats=Rec Pts: 15,406) n”, “ n”, “Values for Nikola Jokic: n”, “Raw Variables of object: n”, “ {‘_name’: ‘Nikola Jokic’, ‘_team’: ‘Denver Nuggets’, ‘_stats’: ‘Rec Pts: 11,327’} n”, “ n”, “Raw Attributes and Methods of object: n”, “ [‘class’, ‘delattr’, ‘dict’, ‘dir’, ‘doc’, ‘eq’, ‘format’, ‘ge’, ‘getattribute’, ‘gt’, ‘hash’, ‘init’, ‘init_subclass’, ‘le’, ‘lt’, ‘module’, ‘ne’, ‘new’, ‘reduce’, ‘reduce_ex’, ‘repr’, ‘setattr’, ‘sizeof’, ‘str’, ‘subclasshook’, ‘weakref’, ‘_name’, ‘_stats’, ‘_team’, ‘dictionary’, ‘name’, ‘stats’, ‘team’, ‘uid’] n”, “ n”, “Representation to Re-Create the object: n”, “ User(name=Nikola Jokic, current_team=Denver Nuggets, stats=Rec Pts: 11,327) n”, “ n” ] } ], “source”: [ “from datetime import date n”, “import json n”, “ n”, “class Player: n”, “ n”, “ def init(self, name, team, stats): n”, “ self._name = name # variables with self prefix become part of the object, n”, “ self._team = team n”, “ self._stats = stats n”, “ n”, “ @property n”, “ def name(self): n”, “ return self._name n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @name.setter n”, “ def name(self, name): n”, “ self._name = name n”, “ n”, “ # a getter method, extracts email from object n”, “ @property n”, “ def team(self): n”, “ return self._team n”, “ n”, “ # a setter function, allows name to be updated after initial object creation n”, “ @team.setter n”, “ def uid(self, team): n”, “ self._team = team n”, “ n”, “ @property n”, “ def stats(self): n”, “ return self._stats n”, “ n”, “ @stats.setter n”, “ def stats(self, stats): n”, “ self._stats = stats n”, “ n”, “ @property n”, “ def dictionary(self): n”, “ dict = { n”, “ &quot;name&quot; : self.name, n”, “ &quot;current_team&quot; : self.team, n”, “ &quot;stats&quot; : self.stats, n”, “ } n”, “ return dict n”, “ n”, “ # output content using json dumps, this is ready for API response n”, “ def str(self): n”, “ return json.dumps(self.dictionary) n”, “ n”, “ # output command to recreate the object, uses attribute directly n”, “ def repr(self): n”, “ return f’User(name={self._name}, current_team={self.team}, stats={self._stats})’ n”, “ n”, “ n”, “if name == &quot;main&quot;: n”, “ p1 = Player(name=’Lebron James’, team=’Los Angeles Lakers’, stats=’Rec Pts: 38,024’) n”, “ p2 = Player(name=’Kevin Durant’, team=’Brooklyn Nets’, stats=’Rush Pts: 26,684’) n”, “ p3 = Player(name=’Giannis Antetokounmpo’, team=’Milwaukee Bucks’, stats=’Rec Pts: 15,406’) n”, “ p4 = Player(name=’Nikola Jokic’, team=’Denver Nuggets’, stats=’Rec Pts: 11,327’) n”, “ players = [p1, p2, p3, p4] n”, “ print(&quot;2022-23 NBA Stats&quot;) n”, “ print(&quot;JSON ready string for 4 players: n&quot;, players, &quot; n&quot;) n”, “ print(&quot;Values for Lebron James:&quot;) n”, “ print(&quot;Raw Variables of object: n&quot;, vars(p1), &quot; n&quot;) n”, “ print(&quot;Raw Attributes and Methods of object: n&quot;, dir(p1), &quot; n&quot;) n”, “ print(&quot;Representation to Re-Create the object: n&quot;, repr(p1), &quot; n&quot;) n”, “ print(&quot;Values for Kevin Durant:&quot;) n”, “ print(&quot;Raw Variables of object: n&quot;, vars(p2), &quot; n&quot;) n”, “ print(&quot;Raw Attributes and Methods of object: n&quot;, dir(p2), &quot; n&quot;) n”, “ print(&quot;Representation to Re-Create the object: n&quot;, repr(p2), &quot; n&quot;) n”, “ print(&quot;Values for Giannis Antetokounmpo:&quot;) n”, “ print(&quot;Raw Variables of object: n&quot;, vars(p3), &quot; n&quot;) n”, “ print(&quot;Raw Attributes and Methods of object: n&quot;, dir(p3), &quot; n&quot;) n”, “ print(&quot;Representation to Re-Create the object: n&quot;, repr(p3), &quot; n&quot;) n”, “ print(&quot;Values for Nikola Jokic:&quot;) n”, “ print(&quot;Raw Variables of object: n&quot;, vars(p4), &quot; n&quot;) n”, “ print(&quot;Raw Attributes and Methods of object: n&quot;, dir(p4), &quot; n&quot;) n”, “ print(&quot;Representation to Re-Create the object: n&quot;, repr(p4), &quot; n&quot;) “ ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.10.7 (v3.10.7:6cc6b13308, Sep 5 2022, 14:02:52) [Clang 13.0.0 (clang-1300.0.29.30)]” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/01/17/Model-and-Object-Oriented-Model.ipynb",
            "relUrl": "/2023/01/17/Model-and-Object-Oriented-Model.ipynb",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "4 Collegeboard corrections using rubric",
            "content": "Corrections for Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 | 0 | I put 0 because the information based on the triangle did not seem to make sense. After looking college board: I got it correct because The response does not specify the program’s purpose. Instead, it describes the function of theprogram, “to provide information about a triangle based on inputted side lengths.” Therefore, the response does not meet the program and purpose and function requirements | . Data Abstraction | 0 | 0 | I put 0 because the list looked more like a dict so I think it does not work. After looking college board: I got it wrong because I initially thought it made no sense, but in reality, according to college board, &quot;The response identifies what is stored in the list. The response states, “The data in the list contains the possible classifications by side lengths of the triangle.” This overall makes sense and fits the criteria that is data abstraction. | . Managing Complexity | 0 | 0 | I put 0 because some of yhe list is not neccesary for a program like this. After looking college board: I got it correct because I was right with college board in the fact that, &quot;The response includes a list that collects the four possible classifications in one place, but this is not necessary for the program. This use of the list does not manage complexity. | . Procedural Abstraction | 0 | 0 | I put 0 because I thought the parameters used were quite inaccurate because it did not fit the program. After looking college board: I agreed with college board that, &quot;The response includes a student-developed procedure, ratioCalculate, with three parameters that are used in the procedure. The response also includes another code fragment that calls the procedure ratioCalculate. | . Algorithm Implementation | 0 | 0 | This student met the requirements because they had all the necessary things such as an algorithm in the procedure and explains the procedure with lots of details. | . Testing | 1 | 1 | I put 0 because I think the Algorithm Implementation is not compatible with the data provided. After looking college board: The student-developed algorithm within procedure, ratioCalculate, includes sequencing, selection (if statement), and iteration (for in range loop). | . Corrections for Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | This earns the point because it fullfills all of the requirements for row 1. The video shows the code running and the written response includes the input and output. | . Data Abstraction | 1 | 1 | This earns the point because it fullfills all of the requirements for row 2. The written response shows both code segments and explains the list name and its functionality. | . Managing Complexity | 1 | 1 | This earns the point because it fullfills all of the requirements for row 3. It has a list that manages complexity and talks about what would happen if the list wasn’t present. | . Procedural Abstraction | 1 | 1 | This earns the point because it fullfills all of the requirements for row 4. It describes a procedure with four different parameters. | . Algorithm Implementation | 1 | 1 | This earns the point because it fullfills all of the requirements for row 5. It has sequencing, iteration, and selection. | . Testing | 1 | 1 | This earns the point because it fullfills all of the requirements for row 6. It shows the results of two calls and describes the two calls. | . Corrections for Submission 3 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 0 | I initally thought got full points for this section, but in reality they didn’t earn the point because they didn’t have the purpose defined. | . Data Abstraction | 1 | 1 | This earns the point because it fullfills all of the requirements for row 2. The written response shows both code segments and shows a list in a loop. | . Managing Complexity | 1 | 1 | This earns the point because it fullfills all of the requirements for row 3. It has a list and talks about what would happen if the list wasn’t present. | . Procedural Abstraction | 1 | 1 | This earns the point because it fullfills all of the requirements for row 4. It has a description of the functionality of a prodcedure and highlights the procedure itself. | . Algorithm Implementation | 1 | 1 | This earns the point because it fullfills all of the requirements for row 5. It has an algorithm with selection, iteration, and sequencing and decribes the algoirthm. | . Testing | 1 | 1 | This earns the point because it fullfills all of the requirements for row 6. It shows the results of two calls with two different results and the specific conditions being tested in each call. | . Corrections for Submission 4 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | The student got the point because they fullfilled all of the requirements for row 1. Their video and written response has the input, output, and program purpose + function clearly shown/described. | . Data Abstraction | 1 | 0 | I incorrectly thought that the student earned the point for this section. But college board didn’t agree. The student didn’t earn the point because the data stored in their list wasn’t in use in their program. | . Managing Complexity | 1 | 0 | I incorrectly thought that the student earned the point for this section. But college board didn’t agree. The student didn’t earn the point because their list isn’t being used in their code to manage complexity. | . Procedural Abstraction | 1 | 1 | The student got the point because they fullfilled all of the requirements for row 4. They had a good procedure and decribed the functionality of it. | . Algorithm Implementation | 1 | 1 | The student got the point because they fullfilled all of the requirements for row 5. Their algorithm has all three required parts and they describe iteration, selection, and sequencing. | . Testing | 0 | 0 | The student didn’t earn the point because they only describe the conditions tested, not the arguments of the code execution. | .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2018/2023/01/17/Four-Collegeboard-corrections-copy.html",
            "relUrl": "/week%2018/2023/01/17/Four-Collegeboard-corrections-copy.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "Collegeboard corrections using rubric",
            "content": "Corrections for Submission 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 | 1 | I put 0 because the information based on the triangle did not seem to make sense. After looking college board: I got it correct because The response does not specify the program’s purpose. Instead, it describes the function of theprogram, “to provide information about a triangle based on inputted side lengths.” Therefore, the response does not meet the program and purpose and function requirements | . Data Abstraction | 0 | 1 | I put 0 because the list looked more like a dict so I think it does not work. After looking college board: I got it wrong because I initially thought it made no sense, but in reality, according to college board, &quot;The response identifies what is stored in the list. The response states, “The data in the list contains the possible classifications by side lengths of the triangle.” This overall makes sense and fits the criteria that is data abstraction. | . Managing Complexity | 0 | 0 | I put 0 because some of yhe list is not neccesary for a program like this. After looking college board: I got it correct because I was right with college board in the fact that, &quot;The response includes a list that collects the four possible classifications in one place, but this is not necessary for the program. This use of the list does not manage complexity. | . Procedural Abstraction | 1 | 1 | I put 1 because I thought the parameters used were quite accurate because it fit the program. After looking college board: I agreed with college board that, &quot;The response includes a student-developed procedure, ratioCalculate, with three parameters that are used in the procedure. The response also includes another code fragment that calls the procedure ratioCalculate. | . Algorithm Implementation | 1 | 1 | This student met the requirements because they had all the necessary things such as an algorithm in the procedure and explains the procedure with lots of details. | . Testing | 0 | 1 | I put 0 because I think the Algorithm Implementation is not compatible with the data provided. After looking college board: The student-developed algorithm within procedure, ratioCalculate, includes sequencing, selection (if statement), and iteration (for in range loop). | . Corrections for Submission 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | I put 1 because the information seemed to lined up and seemed to make sense. After looking college board: I got it correct because The response does not specify the program’s purpose. Instead, it describes the function of theprogram, “The video demonstrates the running of the program, showing input into the program through the user placing tiles on a grid. Output includes the display of the game simulation. It also shows the user pausing, editing, and replaying the simulation. This satisfies the first three criteria for the video.&quot; | . Data Abstraction | 1 | 1 | I put 1 because the list looked more like a dict so I think it does work. After looking college board: I got it wrong because I initially thought it made no sense, but in reality, according to college board, &quot;The name of the list is identified as startGrid. The response identifies other lists, but theyare not considered in the scoring.” This overall makes sense and fits the criteria that is data abstraction | . Managing Complexity | 1 | 1 | I put 1 because some oftyhe list is neccesary for a program like this. After looking college board: I got it correct because I was right with college board in the fact that, &quot;The response includes code that uses a list to manage complexity by accessing and storing the status (1 or 0) of 10,800 items. This use of the list does not manage complexity. | . Procedural Abstraction | 1 | 1 | I put 1 because I thought the parameters used were quite accurate because it fit the program. After looking college board: I agreed with college board that, &quot;The response includes a student-developed procedure, createPoems, with four parameters that are used in the procedure. | . Algorithm Implementation | 1 | 1 | I put 1 because I agreed with what it was saying and it all made sense. The student-developed algorithm within procedure, createPoems, includes sequencing, selection (if statement), and iteration (while loop). | . Testing | 1 | 1 | I put 1 because I think the Algorithm Implementation is not compatible with the data provided. After looking college board: The response specifies the different results of the two procedure calls. The response states in the first case that “the final output poems will have “The” and “And” in the content.” The responses states in the second case that “the final output poems will not have “The” and “And” in the content.” | .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2017/2023/01/04/Collegeboard-corrections.html",
            "relUrl": "/week%2017/2023/01/04/Collegeboard-corrections.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Unit 3 Section 17 - 18",
            "content": "Unit 3 Lesson 17-18 . Notes . undecidable problem: problems for which no algorithms can be built that can provide a correct yes or no answer. . problem: description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. . decision problem: problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. . An algorithm’s efficiency is determine through formal or mathematical reasoning. . decidable problem: problems for which algorithms can be written to solve/produce a correct output for all possible inputs. . Hack 1 Decidable problems are those that can be solved through the use of an algorithm. An example is determining whether a number is even or odd. Undecidable problems cant be solved with an algorithmic procedure. An example is the halting problem which asks if the program will run forever or halt. . Hack 2 Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . Answer: C is the correct answer sicne you have to multiplky the numbers inside of the parantheses then take that value to the power of two . Hack 3 and 4 . . Using the data.sort function I was able to rewrite the code more efficiently ans easier to read . Hack 5 . . Explanation for Code: Imports the permutation method from the library itertools. Using this, we can use a built in command to create permutations. Using a for loop, we can iterate through all possible permutations, and print them. This is not only a much smaller piece of code, but it does not require recalling a variable multiple times, like in the former program. This is also more efficient for the developer, as it allows for the individual to code much less and in a simpler fashion. . Reflection . Overall, I found these questions very rewarding because they were not incredibly hard where there was no point of doing them but they were not easy where I did not learn anything. It was a good balance between easy and hard. hese hacks were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to perform the hacks well. The presentation was great and I learned a lot from it. Out of all the presentations, I was able to retain a lot more from this one then others. Overall it was good and it helped me become a better coder. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2016/2023/01/03/Units-17-to-18-Notes.html",
            "relUrl": "/week%2016/2023/01/03/Units-17-to-18-Notes.html",
            "date": " • Jan 3, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "Unit 3 Section 16",
            "content": "Unit 3 Lesson 16 . Unit 3 Lesson 16 Notes . The main difference between simulations and experiments is that simulations replicate real-world scenarios digitally, while experiments are conducted in the real world. Simulations are typically less expensive than experiments because they don’t require expensive equipment. However, experiments provide actual results, while simulations use models based on collected data to provide estimates of what is expected to happen. Simulations can be used to estimate outcomes for events that cannot be safely recreated in the real world, but they may not always be the most cost-effective or time-efficient solution. . A simulation is a tool used to imitate real-world environments for safety or logistical testing. It is important to use random numbers and consider biases when conducting a simulation, and to evaluate whether a simulation is the best solution for the situation at hand. . when making a simulation you should consider: . Removing details, which could be done using pseudo-random number generators Using other ideas from previous college board lessons; like procedure, flowcharts and conditionals . Hacks . Question Answer . Name(First+Last) | Luke Riggins | . 1 | none | . 2 | none | . 3 | C | . 4 | C | . 5 | C | . 6 | A | . 7 | A | . 8 | none | . 9 | B | . Explanations for Answers (3) Using a pseudo-random number generator in a simulation can make it less accurate, so it is better to avoid using one. . (4) In a flight simulation, the least likely factor to be removed for the sake of functionality is imperfections on aircraft. . (5) The main difference between an experiment and a simulation is the situation being considered. . (6) A car company can use simulation to determine the safety of their new car in the event of a crash, as it would be too dangerous to conduct such an experiment on real vehicles. . (7) An environmental group may use simulation to accurately predict the impact of the greenhouse effect on the environment, as it would be harmful to conduct an experiment on the actual environment. . (9) A teacher can use an experiment to find the average score on a final exam, as this will simply involve calculating the average and does not require simulation. . Extra Credit . . Reflection . Overall, I found these questions very rewarding because they were not incredibly hard where there was no point of doing them but they were not easy where I did not learn anything. It was a good balance between easy and hard. hese hacks were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to perform the hacks well. The presentation was great and I learned a lot from it. Out of all the presentations, I was able to retain a lot more from this one then others. Overall it was good and it helped me become a better coder. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2016/2023/01/03/Unit-16-Notes.html",
            "relUrl": "/week%2016/2023/01/03/Unit-16-Notes.html",
            "date": " • Jan 3, 2023"
        }
        
    
  
    
        ,"post40": {
            "title": "Grades",
            "content": "Section 1-2: 0.9/1 . Comments: Took a lot of notes and reflected, satisfied requirements . Section 3-4: 0.9/1 . Comments: He completed all the hacks and included notes and a reflection at the end. . Section 8 and 10: 0.9/1 . Comments: No extra, but complete . Section 9 and 11: 0.91/1 . Comments: Had notes, reflection, and did all of the hacks . Section 12-13: 0.75/1 . Comments: All there with extra but late . Section 14-15: 1/1 . Comments: Thorough reflection of lesson. Met all requirements + ec .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2016/2022/12/15/Grades.html",
            "relUrl": "/week%2016/2022/12/15/Grades.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Unit 14 Through 15 Notes",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Notes n”, “ n”, “Software libraries contain procedures used in creating novel programs n”, “Libraries and prewritten code can make writing algorithms much easier n”, “Libraries simplify complex programs n”, “APIs(application program interfaces) specify how procedures in libraries should behave and be utilized n”, “Reading documentation makes it much easier to understand how to use libraries/APIs n”, “Useful random functions include: n”, “random.randint(a, b): generates a random number. The values of a and b are required, as they are the start and stop values, placing an inclusive limit on the number to be generated. C is the step, which is optional, and is the interval at which the random numbers are generated at n”, “random.randrange(a, b, c): generates a random number. The values of a and b are required, as they are the start and stop values, placing an inclusive limit on the number to be generated. C is the step, which describes what kind of multiple can be generated. The potential value starts at a, or is a a + a multiple of c, and is less than b. n”, “random.shuffle: shuffles a list randomly to scramble contents n”, “ n”, “Vocab n”, “Documentation: Text that explains the what, how, or why of your code. n”, “Libraries: A collection of prewritten code or procedures that coders can use to maximize their efficiency n”, “Application Programming Interface: A type of software through several computers are able to communicate information amongst eachother n”, “ n”, “Multiple Choice Problems n”, “ n”, “B. A random integer from a to b inclusive n”, “The random(a, b) function is inclusive, and generates a number. This means that the random integer will be from a to b and inclusive. n”, “ n”, “A. x = start, y = stop, z = step n”, “X and Y describe the range in random(x, y, z). These are both required. Z is optional, and is the step, and shows the intervals for random numbers. n”, “ n”, “A. random.item n”, “random.item does not exist. random.random generates a float between 0 and 1. random.shuffle randomly shuffles a list. random.randint generates a random integer. n”, “ n”, “ n”, “Short Answer Questions n”, “ n”, “1. Using libraries allows users to access and reuse pre-written code. This allows algorithms to be made more efficient. Additionally, there are many libraries which are created for multiple different purposes, which makes it easier for programmers to create more complex algorithms. n”, “ n”, “2. First, the code segment imports the random library for use. Then, the program takes in names from user input, and puts them into a list(names). Then, the variable num_items finds the length of the list of names. The random_choice variable generates a random number which will be an index of the list. random_choice makes use of the random.randint function and generates a value from 0 to the maximum index(length of list minus 1). Then the program finds the person who is associated with the randomly generated value. Finally, the program prints that individual’s name. n” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Luke is going to buy the meal today! n” ] } ], “source”: [ “import random n”, “ n”, “# takes user input, puts it into a list of names n”, “names_string = input(&quot;Give me everybody’s names, seperated by a comma.&quot;) n”, “names = names_string.split(&quot;,&quot;) n”, “ n”, “num_items = len(names) n”, “ n”, “# uses random to choose a random number n”, “random_choice = random.randint(0, num_items - 1) n”, “ n”, “# associates random number with a name n”, “person_who_will_pay = names[random_choice] n”, “ n”, “# prints name n”, “print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Code Challenge n”, “ n”, “Question 1” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “[‘Shai’, ‘Lebron’, ‘Lebron’, ‘Nikola’, ‘Devin’] n” ] } ], “source”: [ “import random n”, “ n”, “names_list = [&quot;Lebron&quot;, &quot;Kevin&quot;, &quot;Stephen&quot;, &quot;Nikola&quot;, &quot;Giannis&quot;, &quot;Joel&quot;, &quot;Luka&quot;, &quot;Jason&quot;, &quot;Ja&quot;, &quot;Donovan&quot;, &quot;Anthony&quot;, &quot;Shai&quot;, &quot;Devin&quot;, &quot;Jaylen&quot;, &quot;James&quot;] n”, “random_list = [] n”, “ n”, “def addPeople(list, new_list): n”, “ count = 1 n”, “ while count &lt;= 5: n”, “ number = random.randint(0, len(list) - 1) n”, “ new_list.append(list[number]) n”, “ count += 1 n”, “ return new_list n”, “ n”, “print(addPeople(names_list, random_list))” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Documentation n”, “ n”, “ A random number is generated using the random.randint function, which generates a random integer from 0 to 1 less than the length of the list. This makes sure that when it calls the index to append into the new list, the index values fall in the range of the list of full names. Finally, the program returns the new list. This program generates 5 random names from a list. A list of names is predefined, as well as another empty list for the names to be put into. The function addPeople is defined for the sequence of code. It establishes a counter variable, which allows for 5 names to be appended to using a while loop, as the program runs while the counter variable is under a certain value.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Question 2” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Player 1 won with a score of 9 points! n”, “Player 1 won with a score of 11 points! n” ] } ], “source”: [ “import random n”, “score1 = 0 n”, “score2 = 0 n”, “ n”, “def DiceGame(): n”, “ score1 = random.randint(1, 6) + random.randint(1, 6) n”, “ score2 = random.randint(1, 6) + random.randint(1, 6) n”, “ if score1 &gt; score2: n”, “ print(&quot;Player 1 won with a score of &quot; + str(score1) + &quot; points!&quot;) n”, “ if score1 &lt; score2: n”, “ print(&quot;Player 2 won with a score of &quot; + str(score2) + &quot; points!&quot;) n”, “ if score1 == score2: n”, “ print(&quot;Both players tied with &quot; + str(score1) + &quot; points!&quot;) n”, “ n”, “DiceGame() n”, “DiceGame()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Documentation n”, “ n”, “ The random.randint function runs from 1 to 6, which represents a dice rolling a number from 1 to 6 equally. This is repeated for both players. Then, the scores are compared. If both scores are equal, a message is printed stating there is a tie. If one player has more points than the other, a statement saying that player with more points won is printed.The function must import the random library in order to replicate rolling a pair of dice. 2 variables are defined at first. Then, a function is created to represent the dice game. To give each player a score, the random.randint function is called twice, adding both random numbers to each other and storing that value.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Some more n”, “ n”, “Random maze” ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “0 x x 0 x n”, “x 0 0 0 x n”, “0 0 0 0 x n”, “0 0 S 0 x n”, “0 x 0 0 E n” ] } ], “source”: [ “import random n”, “ n”, “# defining constraints n”, “width = 5 n”, “height = 5 n”, “obstacles = 12 n”, “ n”, “# creates the maze n”, “maze = [[0 for i in range(width)] for j in range(height)] n”, “ n”, “# for loop to generate obstacles n”, “for i in range(obstacles): n”, “ x = random.randint(0, width - 1) n”, “ y = random.randint(0, height - 1) n”, “ maze[x][y] = ‘x’ # represents obstacles n”, “ n”, “# function to create a start and end position n”, “def startEnd(): n”, “ a = random.randint(0, width - 1) n”, “ b = random.randint(0, height - 1) n”, “ maze[a][b] = ‘S’ # represents the start position n”, “ c = random.randint(0, width - 1) n”, “ d = random.randint(0, height - 1) n”, “ maze[c][d] = ‘E’ # represents the end position n”, “ n”, “startEnd() n”, “ n”, “# function to print the maze n”, “for row in maze: n”, “ print(‘ ‘.join(str(cell) for cell in row))” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Reflection n”, “ n”, “ n”, “I overall liked this presentation anfd hacks in general because it helped a lot. It gave me new insights on useful skills for coding. Documentation makes it easy for someone to read my code, and many programs have a documentation which outlines usage for the users. The random library is used very frequently in Python programming. Randomization can be very useful in programs. A lot of programs which we see use randomization, such as games or websites. Using libraries will allow coding to be much easier, and use work that has already been developed. “ ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.10.7 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.10.7” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/12/14/Unit-14-through-15-notes.ipynb",
            "relUrl": "/2022/12/14/Unit-14-through-15-notes.ipynb",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Unit 3 Section 14 - 15",
            "content": "Notes . Software libraries contain procedures used in creating novel programs Libraries and prewritten code can make writing algorithms much easier Libraries simplify complex programs APIs(application program interfaces) specify how procedures in libraries should behave and be utilized Reading documentation makes it much easier to understand how to use libraries/APIs Useful random functions include: random.randint(a, b): generates a random number. The values of a and b are required, as they are the start and stop values, placing an inclusive limit on the number to be generated. C is the step, which is optional, and is the interval at which the random numbers are generated at random.randrange(a, b, c): generates a random number. The values of a and b are required, as they are the start and stop values, placing an inclusive limit on the number to be generated. C is the step, which describes what kind of multiple can be generated. The potential value starts at a, or is a a + a multiple of c, and is less than b. random.shuffle: shuffles a list randomly to scramble contents . Vocab Documentation: Text that explains the what, how, or why of your code. Libraries: A collection of prewritten code or procedures that coders can use to maximize their efficiency Application Programming Interface: A type of software through several computers are able to communicate information amongst eachother . Multiple Choice Problems . B. A random integer from a to b inclusive The random(a, b) function is inclusive, and generates a number. This means that the random integer will be from a to b and inclusive. . A. x = start, y = stop, z = step X and Y describe the range in random(x, y, z). These are both required. Z is optional, and is the step, and shows the intervals for random numbers. . A. random.item random.item does not exist. random.random generates a float between 0 and 1. random.shuffle randomly shuffles a list. random.randint generates a random integer. . Short Answer Questions . Using libraries allows users to access and reuse pre-written code. This allows algorithms to be made more efficient. Additionally, there are many libraries which are created for multiple different purposes, which makes it easier for programmers to create more complex algorithms. . | First, the code segment imports the random library for use. Then, the program takes in names from user input, and puts them into a list(names). Then, the variable num_items finds the length of the list of names. The random_choice variable generates a random number which will be an index of the list. random_choice makes use of the random.randint function and generates a value from 0 to the maximum index(length of list minus 1). Then the program finds the person who is associated with the randomly generated value. Finally, the program prints that individual’s name. . |",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2016/2022/12/14/14-through-15-Hacks.html",
            "relUrl": "/week%2016/2022/12/14/14-through-15-Hacks.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Unit 3 Section 13.2-13.3",
            "content": "3.12 Part 1 Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He’s currently working on a procedure to calculate average speed, based on this formula: Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate’s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion){ moreEnergy ← CONCAT(myEmotion, “!!!”) moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(“im mad”) . After that line of code runs, will nothing be displayed? . True, because it does not have DISPLAY in the procedure . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. PROCEDURE calcFlightFootprint(numMiles, numPassengers) { . CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Part 2 What is a? a – ? b – ? c – 9 PROCEDURE find a () { b &lt;– 9 9 a &lt;– b c Print (a) } . Answer: a is 9 . What is the cost? cost ⟵ 173 tax - 10% PROCEDURE applytax (cost, percentDiscounted){ . temp &lt;– 100 + percentTaxed temp &lt;– temp / 100 cost &lt;– cost x temp Print(cost)} Answer: The cost $190.30 . What is the celsius value? Temperature - 103 Degrees PROCEDURE convert Fahrenheit (temperature) { Celsius &lt;– temperature - 32 Celsius &lt;– Celsius x 5/9 Print (Celsius)} . Answer: 39.4 Celsius . 3.13 Parts 1 and 2 Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) PROCEDURE replaceTopRb(toprbyardspg(100), curerntrbyards(1260), totalgames){ If (currentRbYards(1260) &gt; toprbyardspg(100)){ toprbyardspg &lt;– currentRbYards } } Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } Which Is the Correct Way to define the Name of a Procedure? . A. PROCEDURE MYLIST B. PROCEDURE MyList C. procedure mylist . Answer: B. because procedure should be in all capitals and part of the the declared procedure should be capitalized, not all and not none. . Write A Procedure that gets the Santa to the Christmas Tree PROCEDURE SantaToTree{ count = 0 Move_Forward Rotate_Left Move_Forward( until count = 6) break Rotate_Left Move_Forward } What I have learned: I learned the basics in creating a procedure: that the name needs to be simple but make sense that you can use for and while loops and iteration to shorten the code Procedure in the code should be written in all caps like “PROCEDURE” In algorithms: there are many different algorithms to reach a certain solution you can also use for and while loops and iteration to shorten algorithms .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2015/2022/12/14/13.2-13.3-HW.html",
            "relUrl": "/week%2015/2022/12/14/13.2-13.3-HW.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Unit 3 Section 9-11",
            "content": "Unit 3 Lesson 9 and 11 Notes . Some Boolean expressions can be written as equivalent conditional statements . Different algorithms can be developed or used to solve the same problem . Algorithms can be written in different ways and still accomplish the same tasks . Algorithms that appear similar can yield different side effects or results . Some conditional statements can be written as equivalent Boolean expressions . Using existing correct algorithms as building blocks for constructing another algorithm has benefits such as reducing development time, reduce testing, and simplifying the identification of errors. . Knowledge of existing algorithms can help in constructing new ones. Some existing algorithms include: Determining the maximum or minimum value of two or more numbers. Computing the sum or average of two or more numbers. Identifying if an integer is or is not evenly divisible by another integer. Determining a robot’s path through a maze. . Vocab . Selection: is a decision or question. At some point in an algorithm there may need to be a question because the algorithm has reached a step where one or more options are available. . Algorithm: A process or set of rules to be followed in calculations or other problem solving operations, especially by a computer. . Iteration: Repeating steps, or instructions over and over again. ( this could be also often called a loop ) . . Question 4 . binary search tree for [1,2,3,4,6,9,11,69] . . Question 5 . To get 69, begin with the middle index and move on to the following numbers by dividing the first and last indexes by two. You continue until you reach number 69. . Question 6 . . Question 7 . [“Market”, ”Ralphs”, “store”, “Target”, ”Walmart”] . In alphabetical order . Question 8 . Binary search automatically rules out half of the options with each iteration,therefore, it is much faster than sequential search. Since you begin at the middle index, you can either select the group that is higher or lower than the middle index. . Question 9 . Binary Search Tree for [64,36,16,11,9] . . I would find the number 16 which would only take one check since it is the first middle index number . Reflection . Overall, I found these Hacks to be very helpful because they were not so hard where I had not clue what to do forcing me to get help from someone else, but instead offered a challenging yet doable problem set. I learned a lot because the questions got a ibt harder and harder throughout helping me build as I went along. These lessons were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to perform the hacks well. The presentation was great and I learned a lot from it. I think it was overall good. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2015/2022/12/12/Unit-9-through-11-HW.html",
            "relUrl": "/week%2015/2022/12/12/Unit-9-through-11-HW.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Vocab Fr",
            "content": "Section 8 Big Ideas/Learning Objectives . Understanding What is Iteration | Using for and while loops | . Section 10 Big Ideas/Learning Objectives . Understanding how to edit lists by adding, inserting, and removing data | Using loops to iterate through lists and abstract data | Determine the results or side effects of iteration statements | Write sorting algorithms using iteration | . Section 8 Necessary Vocabulary . Iteration - Repitition of a Process For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated . While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met . Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. . Condition - Allows the computer to know whether or not to keep repeating the loop. increment/decrement - Modifies the counter variable after each repetition. . Section 10 Necessary Vocabulary . Indexing / List Index - The position of an element in a list, starting from 0 append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. array - Another name for a list, depends on the language | . What is Iteration? An Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. . In College Board’s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. . The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. . A while loop is very similar to an if conditional, except that a while is continually executed until it’s no longer true and an if is only executed once. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/12/07/Vocab-fr.html",
            "relUrl": "/2022/12/07/Vocab-fr.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "8 Through 10 Fr copy",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Unit 3 Section 8-10 Blog n”, “- title: Unit 3 Section 3-4 Blog n”, “- tags: [week 14] n”, “- toc: true n”, “- comments: true” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Section 8 Big Ideas/Learning Objectives n”, “- Understanding What is Iteration n”, “- Using for and while loops n”, “ n”, “Section 10 Big Ideas/Learning Objectives n”, “- Understanding how to edit lists by adding, inserting, and removing data n”, “- Using loops to iterate through lists and abstract data n”, “- Determine the results or side effects of iteration statements n”, “- Write sorting algorithms using iteration n”, “ n”, “Section 8 Necessary Vocabulary n”, “ n”, “Iteration - Repitition of a Process n”, “For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated n”, “ n”, “While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met n”, “ n”, “Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. n”, “ n”, “Condition - Allows the computer to know whether or not to keep repeating the loop. n”, “increment/decrement - Modifies the counter variable after each repetition. n”, “ n”, “Section 10 Necessary Vocabulary n”, “- Indexing / List Index - The position of an element in a list, starting from 0 append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. n”, “- Elements [in a list] - An item in a list. n”, “- Nesting - Having one data type or function inside another data type or function, such as lists or loops. array - Another name for a list, depends on the language n”, “ n”, “What is Iteration? n”, “An Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. n”, “ n”, “In College Board’s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. n”, “ n”, “The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. n”, “ n”, “A while loop is very similar to an if conditional, except that a while is continually executed until it’s no longer true and an if is only executed once.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Practice n”, “ n”, “Consider the Following Code Segment. What is the Counter Variable and the Condition set as?” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “for (var i = 10; i &gt; 0; i–) { n”, “ println(i); n”, “}” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Answer:Counter Variable: 10, Condition: Greater than 0 n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Practice n”, “ n”, “Consider the Following Code Segment. How Many times will print(ln) be called?” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “for (var i = 1; i &lt;= 10; i++) { n”, “ for (var j = 1; j &lt;= 10; j++) { n”, “ println(i * j); n”, “ } n”, “}” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Answer: 100 Times.The computer will execute the outer for loop 10 times (starting at i = 1 and ending after i = 10). Each time that it executes the outer loop, it will execute the inner for loop 10 times (starting at j = 1 and ending after j = 10). Each inner execution will call println() once.10 times 10 times 1 is 100, so the computer will call println() 100 times. n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Practice n”, “ n”, “Consider the Following Code Segment. What is it initial value? What does the while loop check?” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “var numRabbits = 2; n”, “var numYears = 0; n”, “while (numRabbits &lt;= 100) { n”, “ numRabbits += (numRabbits/2 * 30); n”, “ numYears++; n”, “}” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “2 Rabbits. The while loop checks that the number of rabbits is less than 100. As long as the population is less the 100, the code inside the loop continues to run” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Exercise 1 n”, “ n”, “ n”, “ n”, “This exercise was quite easy since I overheard you talking about list.reverse, but the instructions asked us to do it with iteration, so I used a for loop and made it run for every value inside the list. The code that I used here was really simple, and all I did was take the original list and then reverse it into a new list and then print that. n”, “ n”, “ n”, “ n”, “ n”, “By using a for loop here, I was able to actually fufill the iteration requirement and able to print the reverse order. However, I am not sure if we were supposed to print each number on a separate line, but I could not figure that out. I assume we would use a for loop function and then print something like i, it would be interesting to find out how to do this, and see if I was close. n”, “ n”, “Excercise 2 n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] n”, “print(f&quot;array before sort {list}&quot;) n”, “def insertion_sort(list): n”, “ for index in range(1,len(list)): # repeats through length of the array n”, “ value = list[index] n”, “ i = index - 1 n”, “ while i &gt;= 0: n”, “ if value &lt; list[i]: n”, “ list[i+1] = list[i] # shift number in slot i to the right n”, “ list[i] = value # shift value left into slot i n”, “ i = i - 1 n”, “ else: n”, “ break n”, “ n”, “IS = insertion_sort(list) n”, “print(f&quot;array after sort {list}&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “I got Question #10 on the quiz because I wasn’t exactly sure how many for loops we needed to use, but I knew that we needed to use a for loop because. There was 3 lists in the list, so I thought we could just use one for loop in order to iterate through. I believe that using one for loop would work but be less efficient, I think that by using 2 for loops it iterates through the lists much faster.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Overall this homewortk was quite challenging but I think I learned a lot through trial and error. I did not eknow much at the start but I turned to learn how to do some of it making it easier and easier the more I did it. I felt like I knew everything from the quiz and could answer every question. I just had a little bit of a problem with Question 10. I was not sure how many loops are exactly needed to iterate through the lists efficiently. Overall, I felt that the quiz was pretty easy and everything that was in the quiz was covered during the lesson” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.10.7 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.10.7” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/12/06/8-through-10-fr-copy.ipynb",
            "relUrl": "/2022/12/06/8-through-10-fr-copy.ipynb",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 8 Through 10 copy",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Unit 3 Section 8-10 Blog n”, “- title: Unit 3 Section 3-4 Blog n”, “- tags: [week 14] n”, “- toc: true n”, “- comments: true” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Section 8 Big Ideas/Learning Objectives n”, “- Understanding What is Iteration n”, “- Using for and while loops n”, “ n”, “Section 10 Big Ideas/Learning Objectives n”, “- Understanding how to edit lists by adding, inserting, and removing data n”, “- Using loops to iterate through lists and abstract data n”, “- Determine the results or side effects of iteration statements n”, “- Write sorting algorithms using iteration n”, “ n”, “Section 8 Necessary Vocabulary n”, “ n”, “Iteration - Repitition of a Process n”, “For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated n”, “ n”, “While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met n”, “ n”, “Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. n”, “ n”, “Condition - Allows the computer to know whether or not to keep repeating the loop. n”, “increment/decrement - Modifies the counter variable after each repetition. n”, “ n”, “Section 10 Necessary Vocabulary n”, “- Indexing / List Index - The position of an element in a list, starting from 0 append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. n”, “- Elements [in a list] - An item in a list. n”, “- Nesting - Having one data type or function inside another data type or function, such as lists or loops. array - Another name for a list, depends on the language n”, “ n”, “What is Iteration? n”, “An Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. n”, “ n”, “In College Board’s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. n”, “ n”, “The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. n”, “ n”, “A while loop is very similar to an if conditional, except that a while is continually executed until it’s no longer true and an if is only executed once.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Practice n”, “ n”, “Consider the Following Code Segment. What is the Counter Variable and the Condition set as?” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “for (var i = 10; i &gt; 0; i–) { n”, “ println(i); n”, “}” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Answer:Counter Variable: 10, Condition: Greater than 0 n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Practice n”, “ n”, “Consider the Following Code Segment. How Many times will print(ln) be called? n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “ for (var i = 1; i &lt;= 10; i++) { n”, “ for (var j = 1; j &lt;= 10; j++) { n”, “ println(i * j); n”, “ } n”, “}” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Answer: 100 Times.The computer will execute the outer for loop 10 times (starting at i = 1 and ending after i = 10). Each time that it executes the outer loop, it will execute the inner for loop 10 times (starting at j = 1 and ending after j = 10). Each inner execution will call println() once.10 times 10 times 1 is 100, so the computer will call println() 100 times. n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Practice n”, “ n”, “Consider the Following Code Segment. What is it initial value? What does the while loop check?” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “var numRabbits = 2; n”, “var numYears = 0; n”, “while (numRabbits &lt;= 100) { n”, “ numRabbits += (numRabbits/2 * 30); n”, “ numYears++; n”, “} n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “2 Rabbits. The while loop checks that the number of rabbits is less than 100. As long as the population is less the 100, the code inside the loop continues to run” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Exercise 1 n”, “ n”, “ n”, “ n”, “This exercise was quite easy since I overheard you talking about list.reverse, but the instructions asked us to do it with iteration, so I used a for loop and made it run for every value inside the list. The code that I used here was really simple, and all I did was take the original list and then reverse it into a new list and then print that. n”, “ n”, “ n”, “ n”, “ n”, “By using a for loop here, I was able to actually fufill the iteration requirement and able to print the reverse order. However, I am not sure if we were supposed to print each number on a separate line, but I could not figure that out. I assume we would use a for loop function and then print something like i, it would be interesting to find out how to do this, and see if I was close. n”, “ n”, “Excercise 2 n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] n”, “array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] n” ] } ], “source”: [ “list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] n”, “print(f&quot;array before sort {list}&quot;) n”, “def insertion_sort(list): n”, “ for index in range(1,len(list)): # repeats through length of the array n”, “ value = list[index] n”, “ i = index - 1 n”, “ while i &gt;= 0: n”, “ if value &lt; list[i]: n”, “ list[i+1] = list[i] # shift number in slot i to the right n”, “ list[i] = value # shift value left into slot i n”, “ i = i - 1 n”, “ else: n”, “ break n”, “ n”, “IS = insertion_sort(list) n”, “print(f&quot;array after sort {list}&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “ n”, “ n”, “ n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “I got Question #10 on the quiz because I wasn’t exactly sure how many for loops we needed to use, but I knew that we needed to use a for loop because. There was 3 lists in the list, so I thought we could just use one for loop in order to iterate through. I believe that using one for loop would work but be less efficient, I think that by using 2 for loops it iterates through the lists much faster.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Overall this homewortk was quite challenging but I think I learned a lot through trial and error. I did not eknow much at the start but I turned to learn how to do some of it making it easier and easier the more I did it. I felt like I knew everything from the quiz and could answer every question. I just had a little bit of a problem with Question 10. I was not sure how many loops are exactly needed to iterate through the lists efficiently. Overall, I felt that the quiz was pretty easy and everything that was in the quiz was covered during the lesson” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.10.7 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.10.7” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/12/05/Unit-8-through-10-copy.html",
            "relUrl": "/2022/12/05/Unit-8-through-10-copy.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Unit 3 Section 1-2",
            "content": "Unit 3 Sections 1-2 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2014/2022/12/02/Blog-About-Grades-on-Hacks.html",
            "relUrl": "/week%2014/2022/12/02/Blog-About-Grades-on-Hacks.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Second Group Blog",
            "content": "",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/11/30/Second-Group-Blog.html",
            "relUrl": "/2022/11/30/Second-Group-Blog.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Unit 3 Section 3-4 Blog",
            "content": "Notes . -When a coder chooses between two possible results, this is called selection. . -Iteration is the process of repeating a step until the requirement is met. . -Programs created using programming languages can execute algorithms that have been expressed in a variety of ways. . -Sequencing, selection, and iteration can be combined to create any algorithm. . -We humans use algorithms on a daily basis; an algorithm is a finite set of instructions that accomplishes a certain task. . -Implementing steps sequentially entails, for instance, carrying out the first action before moving on to the second, third, etc. . Vocab . sequencing- outline or set of steps that we do and follow in order that they are given . variable- you can store an actual value, the value of a variable in another variable, the result of an operation, or result of a procedural call . String: a sequence of characters . algorithm- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . selection- a section of code is run only if a condition is met. . iteration- repeating steps or instructions over and over again . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Sequencing: all pf the steps . Iteration:They go through all the numbers in the step &quot;for I in numbers:&quot; . Selection: &quot;if (numbers[i]% 2 == 0)&quot; due to the fact that they sort each number to discover the even ones, . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . a = 1, b = 7, c = 3, d = 7 . consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true | the value of hot is false, the value of cold is true | the value of hot is true, the value of cold is false | the value of hot is false, the value of cold is false | Answer: 1. the value of hot is true, the value of cold is true . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . | What would the result be? . Hint: var = &quot;B&quot; name = &quot;SmithB&quot; . Answer: SmithB@gmail.com . | . . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . Answer:ompuook . | . Reflection . The presentation was very interesting because it was interactive.These lessons were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to answer the questions correctly. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/11/30/Second-Group-Blog-fr.html",
            "relUrl": "/2022/11/30/Second-Group-Blog-fr.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Unit 3 Section 3-4 Blog",
            "content": "Notes . -Programs created using programming languages can execute algorithms that have been expressed in a variety of ways. . -Sequencing, selection, and iteration can be combined to create any algorithm. . -We humans use algorithms on a daily basis; an algorithm is a finite set of instructions that accomplishes a certain task. . -Implementing steps sequentially entails, for instance, carrying out the first action before moving on to the second, third, etc. . -When a coder chooses between two possible results, this is called selection. . -Iteration is the process of repeating a step until the requirement is met. . Vocab . algorithm- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. . selection- a section of code is run only if a condition is met. . iteration- repeating steps or instructions over and over again . sequencing- outline or set of steps that we do and follow in order that they are given . variable- you can store an actual value, the value of a variable in another variable, the result of an operation, or result of a procedural call . String: a sequence of characters . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Sequencing: all pf the steps . Iteration:They go through all the numbers in the step &quot;for I in numbers:&quot; . Selection: &quot;if (numbers[i]% 2 == 0)&quot; due to the fact that they sort each number to discover the even ones, . i = 1 starString = &quot;*&quot; while i &lt;= 5: j = 1 while j &lt;= i: print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 . * ** *** **** ***** . Sequence: all steps . Iteration: &quot;While I &lt;&gt;= 5:&quot; since they keep going until i&#39;s 5. . Selection: &quot;While j &lt;&gt;= I&quot; since this is where they choose what j is, . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . a = 1, b = 7, c = 3, d = 7 . consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true | the value of hot is false, the value of cold is true | the value of hot is true, the value of cold is false | the value of hot is false, the value of cold is false | Answer: 1. the value of hot is true, the value of cold is true . Sequencing | num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 # num2 is now the new num1 + num3 . Answer num1 = 6, num2 = 11 . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . | What would the result be? . Hint: var = &quot;B&quot; name = &quot;SmithB&quot; . Answer: SmithB@gmail.com . | . . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . Answer:ompuook . | . Reflection . These lessons were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to answer the questions correctly. The presentation was great and I learned a lot from it. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/11/30/Group-2-blog.html",
            "relUrl": "/2022/11/30/Group-2-blog.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Unit 3 Section 1-2",
            "content": "Notes . -elements:a single value in a list that has a special index. An index also makes references to elements. . -index:using natural integers when referring entries in a list . -All types of elements can be stored in lists. . -All list operations result in an error notice and program termination if a list index is less than 1 or more than the list length. . -Data abstraction creates a barrier between a data type’s abstract properties and the specifics of its representation. . -A program’s abstraction that may store a value is known as a variable. Each variable has a corresponding data storage that holds a single value at a time, but that value may be a list or other collection, which in turn may hold numerous values. . -The readability of program code and comprehension of the values that the variables represent are improved by using sensible variable names. . -Some computer languages offer data types, which are referred to by variables, to represent data. Numbers, Booleans, lists, and strings are some of these types. . -One form of datum is more appropriate for representing some values than another. . -a variable is an abstraction inside a program that can hold a value . -assign stored values to a variable . Vocab . Applications programming interface (API): which is a list of constructors and instance methods or operations, used to specify the behavior of an abstract data type . list: a sequence of several variables grouped together . variable: a way of storing information in a computer program, which could later be changed, referenced, and used . data types: a set of values and operations on those values . abstract data types: a data type whose internal representation is hidden from the client . client: a program that uses a data type . objects: a structure that can take on a data-type value . Section 1 Assignment 1 . Answers 1 3 1 2 1 4 . Questions I wrote . Determine the type of data that should be used to answer the following question: . What are the most popular pets? Answer: string . True or false, basketball is the best sport? Answer:Boolean . How many colleges have you applied to? Answer: integer . Section 1 Assignment 2 . Answers 3 2 4 2 2 3 1 . Section 2 Assignment . Answers 4 1 3 4 4 2 3 2 6 . Reflection . These lessons were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to answer the questions correctly. The presentation was great and I learned a lot from it .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2014/2022/11/30/First-Group-Blog.html",
            "relUrl": "/week%2014/2022/11/30/First-Group-Blog.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Unit 3 Section 1-2",
            "content": "Notes . -A program’s abstraction that may store a value is known as a variable. Each variable has a corresponding data storage that holds a single value at a time, but that value may be a list or other collection, which in turn may hold numerous values. . -The readability of program code and comprehension of the values that the variables represent are improved by using sensible variable names. . -Some computer languages offer data types, which are referred to by variables, to represent data. Numbers, Booleans, lists, and strings are some of these types. . -One form of datum is more appropriate for representing some values than another. . -a variable is an abstraction inside a program that can hold a value . -assign stored values to a variable . -elements:a single value in a list that has a special index. An index also makes references to elements. . -index:using natural integers when referring entries in a list . -All types of elements can be stored in lists. . -All list operations result in an error notice and program termination if a list index is less than 1 or more than the list length. . -Data abstraction creates a barrier between a data type’s abstract properties and the specifics of its representation. . Vocab . list: a sequence of several variables grouped together . variable: a way of storing information in a computer program, which could later be changed, referenced, and used . data types: a set of values and operations on those values . abstract data types: a data type whose internal representation is hidden from the client . client: a program that uses a data type . objects: a structure that can take on a data-type value . Applications programming interface (API): which is a list of constructors and instance methods or operations, used to specify the behavior of an abstract data type . Section 1 Assignment 1 . Answers 1 3 1 2 1 4 . 3 of my own questions . Determine the type of data that should be used to answer the following question: . What are the colors of the rainbow? Answer: string . True or false, coding is fun? Answer:Boolean . How many commits do you have on github? Answer: integer . Section 1 Assignment 2 . Answers 3 2 4 2 2 3 1 . Section 2 Assignment . Answers 4 1 3 4 4 2 3 2 6 . Reflection . These lessons were a bit challenging at first but with perserverance I was able to understand the concepts which allowed me to answer the questions correctly. The presentation was great and I learned a lot from it .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2014/2022/11/29/Group-1-blog.html",
            "relUrl": "/week%2014/2022/11/29/Group-1-blog.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Unit 3 Section 5-7",
            "content": "Unit 3 Notes Section 5 Learning Objective: For relationships between two variables expressions or values- write expressions using relational operators . Essential Knowledge: -A Boolean Value is either true or false -The exam reference sheet provides the following relational operators:=,≠,&gt;,&lt;,≥, and≤. These are used to test the relationship between two variables, expressions, or values. A comparison using a relational operator evaluates to a Boolean value. For example, a=b evaluates to true if a and ba are equal otherwise it evaluates to false . Learning Objective: Represent a step-by-step algorithmic process using sequential code statements . Essential Knowledge: -Sequencing is the application of each step of an algorithm in the order in which the code statements are given -A code statement is a part of program code that expresses an action to be carried out -A expression can consist of a value, a variable, an operator, or a procedure call that returns a value -Expressions are evaluated to produce a single value -The evaluation of expressions follows a set order of operation defined by the programming language -Sequential statements execute in the order they appear in the code segment -Clarity and readability are important considerations when expressing an algorithm in a programming language . Learning Objective: Evaluate expressions that use arithmetic operators . Essential Knowledge: . -Arithmetic operators are part of most programming languages and include addition, subtraction, multiplication, division, and modulus operators -The exam reference sheet provides a MOD b, which evaluates to the remainder when a is divide by b. Assume that a is an integer greater than or equal to 0 and b is an integer greater than 0. For example, 17 MOD 5 evaluates to 2 -The order of operations used in mathematics applies when evaluating expressions. The MOD operator has the same precedence as the * and / operators . Section 6 Learning Objective: Express an algorithm that uses selection without using a programming language . Essential Knowledge: -Selection determines which part of an algorithm are executed based on a condition being true or false . Learning Objective: For selection-a.write conditional statements, b.determine the result of conditional statements . Essential Knowledge: -Conditional statements, or “if-statements,” affect the sequential flow of control by executing different statements based on the value of a Boolean expression . Section 7 Learning Objective:For nested selection-a. Write nested conditional statements, b.determine the result of nested conditional statements . Essential Knowledge: -nested conditional statements consist of conditional statements within conditional statements . Brainstorming Hacks Create a step-by-step algorithmic process using sequential code statements and evaluate Write a nested conditonal statement and determine the result of the statements .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/11/18/Notes.html",
            "relUrl": "/jupyter/2022/11/18/Notes.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Tri 1 Corrections",
            "content": "Tri 1 Corrections . . Which of the following is the most appropriate documentation to appear with the printNums procedure? . A Prints all positive even integers that are less than or equal to max. . B Prints all positive odd integers that are less than or equal to max. . C Prints all positive even integers that are greater than max. . D Prints all positive odd integers that are greater than max. . Corrections: I put A and the correct answer is B. The reason for this as put from collegeboard, “The procedure initializes count to 1. Inside the loop, the value of count is displayed, then count is incremented by 2 to the next odd integer. The loop terminates when count exceeds max, so all positive odd integers less than or equal to max are printed.”. The function starts at 1 and adds two, and all the numbers are positive so therefore they are all odd and positive integers and the count has to be less then the max so the only plausible answer is B. . . Corrections: I but D and it is wrong because “ The procedure does not interchange the values of j and k. Rather, it returns a new list with the values at indices j and k interchanged.” This means that this,: newList[j] ← numList[k] . newList[k] ← numList[j] . Does not mean they are interchanged but instead the values at indices j and k are interchanged. The right answer is B because college board says, “The procedure creates a copy of numList called newList. The element at newList[j] is assigned the element at numList[k], and the element at newList[k] is assigned the element at numList[j]. Therefore, the difference between numList and newList is that the elements at indices j and k are interchanged. The procedure only works if j and k are valid list indices, so it is important to document that j and k are both between 1 and LENGTH(numList), inclusive.”. I now understand what the function is. . . What I got wrong: Collegeboard says, “The Internet was not designed to be completely secure. The protocols used on the Internet do not ensure that all communications are secure.” This means that open protocols and the internet in general was not created to be secure and instead have a different purpose. . Correction: Answer D is correct because collegeboard says, “Protocols are agreed-upon sets of rules that specify the behavior of a system. Protocols used on the Internet enable devices from different manufacturers to communicate in a standard way.” This means the use of open protocols are for their to be an open connection between devices via the internet. . . What I did wrong: I put A and it is wrong because according to Collegeboard, “Statement II is true because colors can be encoded as sequences of bits. Statement III is true because sequences of bits can be used to represent sound.” This basicly just means that I thought binary did not have the capabilities that I thought because it can be used to ehelp encode colors as sequences of bits and for sound as well. . Correction: Answer is D because Binary can do all of these capablities. According to collegeboard, “ All digital data is represented at the lowest level as sequences of bits. Statement I is true because strings of characters can be represented by sequences of bits. Statement II is true because colors can be encoded as sequences of bits. Statement III is true because sequences of bits can be used to represent sound.” This means that binary can do much more then I thought. . . What I did wrong: I put B and it is wrong according to collegeboard because, “Binary 1011 is equivalent to decimal 11 and should be placed before decimal 12.” This is wrong because decimal 12 is greater then binary 1101 since it is 11. . Corrections: The answer is A because sccording to collegeboard, “Binary 1011 is equivalent to 2^3+2^1+2^0, or decimal 11, and binary 1101 is equivalent to 2^3+2^2+2^0, or decimal 13. The order of the numbers (written in their equivalent decimal format) is 5, 11, 12, 13.” I learned more about the numerical values that are associated with binary now. . . What I did wrong: I put D and it is wrong because according to collegeboard, “Instead of using a numeric variable to represent whether the student is absent, it would be more appropriate to use a Boolean variable because the status could be represented using only the values true and false.” This is wrong because a Boolean variable can be defined as it either happens or not which is true or false. . Corrections: The answer is C because according to collegeboard, “A student name is best represented using a string. The status of whether a student is absent can be represented using only the values true and false, so a Boolean variable is most appropriate. For both variables, using meaningful variable names helps with the readability of the code segment.” You use true false logic because it either means they are false or not false. . . What I did wrong: According to Collegeboard it is not C because,”Using a list does not prevent a program from changing the value of a variable.” This means what I put is simply not true because I did not understand the nature of a list. . Corrections: The correct answer is B because according to collegeboard, “Using a list as a data abstraction can result in a program that is easier to develop and maintain. It is easier to apply the same algorithm to every element in a list than to apply the same algorithm to many separate variables.” This shows how a list can help easily develop and maintain as a data abstraction of a program. . . What I did wrong: The character “e” is the character at index 2 of the string element at index 2 in wordList. This is wrong because it is clearly not index 3 of the wordlist. . Corrections: According to collegeboard the answer is C because “The element at index 3 in wordList is “ghi”. The character at index 2 of “ghi” is “h”.” No explanation when reading it, it makes perfect sense in retrospect. . . What I did wrong: I selected answer B but it is wrong because according to collegeboard, “The last assignment statement assigns a copy of myList to yourList, so the contents of yourList are changed.” So therefore it is the opposite of what I actually did. . Correction: According to collegeboard, “The last assignment statement assigns a copy of myList to yourList. Since myList contains [10, 30, 50, 70], yourList will also contain [10, 30, 50, 70].” which basically means that due to the function your list will also have the odd numbers so it is therefore A. . . What I did wrong: I put C but according to collegeboard, it id wrong because, “This code segment assigns maxPS the value 50 when time &gt; 120 and assigns maxPS the value 30 otherwise.” This basically means 120 was not put in the right order because the if-else statement was wrong. 30 and 50 should be switched. . Correction: The correct answer is D and collegeboard says, “This code segment uses the IF statement to set maxPS to 30 when time &gt; 120 and uses the ELSE statement to set maxPS to 50 otherwise.” This makes more sense because 50 should come after the else statement. . . Corrections: According to collegeboard, “ The first three statements assign values to the variables. Since num1 &lt; num2 evaluates to false, the body of the ELSE block is executed and num3 is assigned the value 4. Since num2 ≥ num3 evaluates to true, the body of the second IF block is executed and num1 is assigned the value 8. Lastly, sum is assigned the value of 8 + 4 + 4, or 16.” I instead did 8 + 4 and just that. I forgot to include the other 4. . . What I did wrong: It is clear when reading “The code segment iterates through each element in the list, incrementing count1 for each positive value and incrementing count2 otherwise. There are only two positive values in the list, not five.” that the values I picked did not match up. . Corrections: According to collegeboard, “The code segment iterates through each element in the list, incrementing count1 for each positive value and incrementing count2 otherwise. The list contains two positive values, so count1 is 2 and count2 is 3.” This makes a lot more sense when you look at the coding. . . Corrections: C is clearly the only option correct because according to collegeboard, “The first three statements assign values to the variables. The fourth statement assigns the value of y (which is 50) to x. The fifth statement assigns the value of z (which is 75) to y. The sixth statement assigns the value of x (which is 50) to z. Therefore, x and z both have the value 50.” When the statement is executed, the top line of Y points to x which has a value of 25 which therefore puts the number under 50. . . Corrections: The Answer I put was B because I had no idea what to do, but the answer is A because according to collegeboard, “This statement will correctly form the initials. It uses calls to prefix to obtain the first letters of each name, then uses a call to concat to concatenate the two letters in the correct order.” This now helps me understand how to cormat initials and names. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/11/07/Corrections.html",
            "relUrl": "/jupyter/2022/11/07/Corrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Title",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter b is the 2 letter in the alphabet . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter b is the 1 letter in the alphabet . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) del newNumbers[0] print(&quot;list after deleteing 0: &quot;, newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] list after deleteing 0: [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99,} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Luke&#39;s Diner Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #code should prompts the user multiple times, until they type &quot;Done&quot; while True: item = input(&quot;Please select an item from the menu, or type Done&quot;) if item == &quot;Done&quot; : break elif item in menu: total += menu[item] else: print (&quot;Invalid item!&quot;) #code adds price of the menu items selected by the user print(&quot;Your total bill is: $&quot; + str(total)) . Luke&#39;s Diner Menu burger $3.99 fries $1.99 drink $0.99 Invalid item! Your total bill is: $10.96 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/10/18/Corrections.html",
            "relUrl": "/2022/10/18/Corrections.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Title",
            "content": "Examples of APIs . # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;2348020badmshecfd384514830c4p1f8a42jsn72e4bf449cdf&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text),code that was here, and prints data but not organized # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: print(f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) . BTC Bitcoin 19319.010248550865 ETH Ethereum 1298.5373263339568 USDT Tether USD 1.0042914822031264 USDC USDC 1.0033426475380618 BNB Binance Coin 271.99903725788334 XRP XRP 0.4670249588334815 BUSD Binance USD 1.0046787901796796 ADA Cardano 0.36234791981912234 SOL Solana 30.079347713948852 DOGE Dogecoin 0.05954176340368893 MATIC Polygon 0.8418230219658197 DOT Polkadot 6.111645460783446 DAI Dai 1.0018636812091348 SHIB Shiba Inu 0.000010070780267767 TRX TRON 0.06210744215685524 WETH Wrapped Ether 1301.448403173206 UNI Uniswap 6.474269303096446 WBTC Wrapped BTC 19334.29792021206 AVAX Avalanche 15.834363139223417 CAKE PancakeSwap 4.4521595241644185 OKB OKB 16.65450028901999 ATOM Cosmos 12.266523398282382 LTC Litecoin 51.27956765904166 FTT FTX Token 23.50563446495291 ETC Ethereum Classic 23.49423351862973 XMR Monero 146.68419417150588 XLM Stellar 0.11137118902545307 ALGO Algorand 0.31825150928458706 BTCB Bitcoin BEP2 19419.051868679657 CRO Cronos 0.10764922282684228 BCH Bitcoin Cash 108.04270318039102 WEMIX WEMIX TOKEN 2.003006717281343 QNT Quant 195.71054623554437 ENS EnergySwap 18.950517432838012 NEAR NEAR Protocol 2.929763822112119 LUNC Terra Classic 0.000250507699702107 HT Huobi Token 7.792767485827178 FLOW Flow 1.5146727376138875 FIL Filecoin 5.108727276596857 VET VeChain 0.022727498272554873 HBAR Hedera 0.06164337265531565 MANA Decentraland 0.6261628362964291 FRAX Frax 1.0021877097270047 EGLD Elrond 56.7868482212396 ICP Internet Computer (DFINITY) 4.906419137898225 XTZ Tezos 1.3619123720360558 IMX Immutable X 0.6120427035515059 LDO Lido DAO Token 1.4594240484897618 SAND The Sandbox 0.7664611182124907 AAVE Aave 80.35405565927665 . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;561be3d3dcmsh26da5c03e252f9fp1d2d4fjsn25f9e92f38d8&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . &lt;bound method Response.json of &lt;Response [200]&gt;&gt; World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/10/18/Another-API.html",
            "relUrl": "/2022/10/18/Another-API.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "College Board Criteria for Final Project",
            "content": "Program Purpose and Function: To assist in learning more about NBA data, we will create a website that makes it seemless as well as include games within the website to guiz the users. . Data Abstraction: Collect data from varoius existing NBA databases . Managing Complexity: Use a list with various NBA data(PPG,APG,Accolade counts) and use a list to track it . Procedural Abstraction: will define our own funtions for formatting the page and displaying the data . Algorithm Implementation: will use iteration (lists for each funtion) and selection (if/else statements) and sequencing (step by step processes) . Testing: We will test every aspect of our project (and often) to ensure we identify and correct our mistakes. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/10/15/Final-Project-Collegeboard-Criteria.html",
            "relUrl": "/jupyter/2022/10/15/Final-Project-Collegeboard-Criteria.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;0bde326e5amsh275ea78168cb1c5p1be85bjsn66111b219215&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;countries_stat&#34;:[{&#34;country_name&#34;:&#34;USA&#34;,&#34;cases&#34;:&#34;82,649,779&#34;,&#34;deaths&#34;:&#34;1,018,316&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;80,434,925&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,465&#34;,&#34;active_cases&#34;:&#34;1,196,538&#34;,&#34;total_cases_per_1m_population&#34;:&#34;247,080&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,044&#34;,&#34;total_tests&#34;:&#34;1,000,275,726&#34;,&#34;tests_per_1m_population&#34;:&#34;2,990,303&#34;},{&#34;country_name&#34;:&#34;India&#34;,&#34;cases&#34;:&#34;43,057,545&#34;,&#34;deaths&#34;:&#34;522,193&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;42,519,479&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;698&#34;,&#34;active_cases&#34;:&#34;15,873&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,657&#34;,&#34;deaths_per_1m_population&#34;:&#34;372&#34;,&#34;total_tests&#34;:&#34;834,717,702&#34;,&#34;tests_per_1m_population&#34;:&#34;594,319&#34;},{&#34;country_name&#34;:&#34;Brazil&#34;,&#34;cases&#34;:&#34;30,345,654&#34;,&#34;deaths&#34;:&#34;662,663&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,364,400&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8,318&#34;,&#34;active_cases&#34;:&#34;318,591&#34;,&#34;total_cases_per_1m_population&#34;:&#34;140,954&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,078&#34;,&#34;total_tests&#34;:&#34;63,776,166&#34;,&#34;tests_per_1m_population&#34;:&#34;296,238&#34;},{&#34;country_name&#34;:&#34;France&#34;,&#34;cases&#34;:&#34;28,244,977&#34;,&#34;deaths&#34;:&#34;145,020&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;25,852,832&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,677&#34;,&#34;active_cases&#34;:&#34;2,247,125&#34;,&#34;total_cases_per_1m_population&#34;:&#34;430,996&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,213&#34;,&#34;total_tests&#34;:&#34;266,484,045&#34;,&#34;tests_per_1m_population&#34;:&#34;4,066,333&#34;},{&#34;country_name&#34;:&#34;Germany&#34;,&#34;cases&#34;:&#34;24,109,433&#34;,&#34;deaths&#34;:&#34;134,624&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;21,243,000&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,980&#34;,&#34;active_cases&#34;:&#34;2,731,809&#34;,&#34;total_cases_per_1m_population&#34;:&#34;286,106&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,598&#34;,&#34;total_tests&#34;:&#34;122,332,384&#34;,&#34;tests_per_1m_population&#34;:&#34;1,451,714&#34;},{&#34;country_name&#34;:&#34;UK&#34;,&#34;cases&#34;:&#34;21,933,206&#34;,&#34;deaths&#34;:&#34;173,352&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,782,350&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;339&#34;,&#34;active_cases&#34;:&#34;977,504&#34;,&#34;total_cases_per_1m_population&#34;:&#34;320,054&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,530&#34;,&#34;total_tests&#34;:&#34;514,985,782&#34;,&#34;tests_per_1m_population&#34;:&#34;7,514,777&#34;},{&#34;country_name&#34;:&#34;Russia&#34;,&#34;cases&#34;:&#34;18,137,137&#34;,&#34;deaths&#34;:&#34;374,902&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;17,474,628&#34;,&#34;new_deaths&#34;:&#34;168&#34;,&#34;new_cases&#34;:&#34;8,446&#34;,&#34;serious_critical&#34;:&#34;2,300&#34;,&#34;active_cases&#34;:&#34;287,607&#34;,&#34;total_cases_per_1m_population&#34;:&#34;124,187&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,567&#34;,&#34;total_tests&#34;:&#34;273,400,000&#34;,&#34;tests_per_1m_population&#34;:&#34;1,871,995&#34;},{&#34;country_name&#34;:&#34;S. Korea&#34;,&#34;cases&#34;:&#34;16,895,194&#34;,&#34;deaths&#34;:&#34;22,133&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;109&#34;,&#34;new_cases&#34;:&#34;64,725&#34;,&#34;serious_critical&#34;:&#34;726&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;329,028&#34;,&#34;deaths_per_1m_population&#34;:&#34;431&#34;,&#34;total_tests&#34;:&#34;15,804,065&#34;,&#34;tests_per_1m_population&#34;:&#34;307,778&#34;},{&#34;country_name&#34;:&#34;Italy&#34;,&#34;cases&#34;:&#34;16,079,209&#34;,&#34;deaths&#34;:&#34;162,609&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;14,684,371&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;409&#34;,&#34;active_cases&#34;:&#34;1,232,229&#34;,&#34;total_cases_per_1m_population&#34;:&#34;266,648&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,697&#34;,&#34;total_tests&#34;:&#34;211,365,630&#34;,&#34;tests_per_1m_population&#34;:&#34;3,505,156&#34;},{&#34;country_name&#34;:&#34;Turkey&#34;,&#34;cases&#34;:&#34;15,016,270&#34;,&#34;deaths&#34;:&#34;98,676&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;14,854,475&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;975&#34;,&#34;active_cases&#34;:&#34;63,119&#34;,&#34;total_cases_per_1m_population&#34;:&#34;174,654&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,148&#34;,&#34;total_tests&#34;:&#34;158,110,923&#34;,&#34;tests_per_1m_population&#34;:&#34;1,838,986&#34;},{&#34;country_name&#34;:&#34;Spain&#34;,&#34;cases&#34;:&#34;11,786,036&#34;,&#34;deaths&#34;:&#34;103,908&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,261,340&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;339&#34;,&#34;active_cases&#34;:&#34;420,788&#34;,&#34;total_cases_per_1m_population&#34;:&#34;251,906&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,221&#34;,&#34;total_tests&#34;:&#34;471,036,328&#34;,&#34;tests_per_1m_population&#34;:&#34;10,067,575&#34;},{&#34;country_name&#34;:&#34;Vietnam&#34;,&#34;cases&#34;:&#34;10,563,502&#34;,&#34;deaths&#34;:&#34;43,013&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,086,075&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;8,813&#34;,&#34;serious_critical&#34;:&#34;612&#34;,&#34;active_cases&#34;:&#34;1,434,414&#34;,&#34;total_cases_per_1m_population&#34;:&#34;106,789&#34;,&#34;deaths_per_1m_population&#34;:&#34;435&#34;,&#34;total_tests&#34;:&#34;85,789,114&#34;,&#34;tests_per_1m_population&#34;:&#34;867,262&#34;},{&#34;country_name&#34;:&#34;Argentina&#34;,&#34;cases&#34;:&#34;9,060,923&#34;,&#34;deaths&#34;:&#34;128,344&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,895,999&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;412&#34;,&#34;active_cases&#34;:&#34;36,580&#34;,&#34;total_cases_per_1m_population&#34;:&#34;197,215&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,793&#34;,&#34;total_tests&#34;:&#34;35,716,069&#34;,&#34;tests_per_1m_population&#34;:&#34;777,376&#34;},{&#34;country_name&#34;:&#34;Netherlands&#34;,&#34;cases&#34;:&#34;8,035,603&#34;,&#34;deaths&#34;:&#34;22,206&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,643,520&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;94&#34;,&#34;active_cases&#34;:&#34;369,877&#34;,&#34;total_cases_per_1m_population&#34;:&#34;467,096&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,291&#34;,&#34;total_tests&#34;:&#34;21,107,399&#34;,&#34;tests_per_1m_population&#34;:&#34;1,226,938&#34;},{&#34;country_name&#34;:&#34;Japan&#34;,&#34;cases&#34;:&#34;7,621,562&#34;,&#34;deaths&#34;:&#34;29,284&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,135,403&#34;,&#34;new_deaths&#34;:&#34;27&#34;,&#34;new_cases&#34;:&#34;43,721&#34;,&#34;serious_critical&#34;:&#34;195&#34;,&#34;active_cases&#34;:&#34;456,875&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,596&#34;,&#34;deaths_per_1m_population&#34;:&#34;233&#34;,&#34;total_tests&#34;:&#34;46,690,473&#34;,&#34;tests_per_1m_population&#34;:&#34;371,215&#34;},{&#34;country_name&#34;:&#34;Iran&#34;,&#34;cases&#34;:&#34;7,216,040&#34;,&#34;deaths&#34;:&#34;140,975&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,966,954&#34;,&#34;new_deaths&#34;:&#34;13&#34;,&#34;new_cases&#34;:&#34;528&#34;,&#34;serious_critical&#34;:&#34;1,046&#34;,&#34;active_cases&#34;:&#34;108,111&#34;,&#34;total_cases_per_1m_population&#34;:&#34;83,972&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,641&#34;,&#34;total_tests&#34;:&#34;50,811,054&#34;,&#34;tests_per_1m_population&#34;:&#34;591,284&#34;},{&#34;country_name&#34;:&#34;Colombia&#34;,&#34;cases&#34;:&#34;6,091,094&#34;,&#34;deaths&#34;:&#34;139,771&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,924,433&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;342&#34;,&#34;active_cases&#34;:&#34;26,890&#34;,&#34;total_cases_per_1m_population&#34;:&#34;117,448&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,695&#34;,&#34;total_tests&#34;:&#34;34,355,022&#34;,&#34;tests_per_1m_population&#34;:&#34;662,433&#34;},{&#34;country_name&#34;:&#34;Indonesia&#34;,&#34;cases&#34;:&#34;6,043,768&#34;,&#34;deaths&#34;:&#34;156,067&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,868,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2,771&#34;,&#34;active_cases&#34;:&#34;19,450&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,682&#34;,&#34;deaths_per_1m_population&#34;:&#34;560&#34;,&#34;total_tests&#34;:&#34;94,877,499&#34;,&#34;tests_per_1m_population&#34;:&#34;340,374&#34;},{&#34;country_name&#34;:&#34;Poland&#34;,&#34;cases&#34;:&#34;5,991,197&#34;,&#34;deaths&#34;:&#34;115,948&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,334,375&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;344&#34;,&#34;serious_critical&#34;:&#34;1,588&#34;,&#34;active_cases&#34;:&#34;540,874&#34;,&#34;total_cases_per_1m_population&#34;:&#34;158,616&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,070&#34;,&#34;total_tests&#34;:&#34;36,027,053&#34;,&#34;tests_per_1m_population&#34;:&#34;953,808&#34;},{&#34;country_name&#34;:&#34;Mexico&#34;,&#34;cases&#34;:&#34;5,733,514&#34;,&#34;deaths&#34;:&#34;324,117&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,033,892&#34;,&#34;new_deaths&#34;:&#34;57&#34;,&#34;new_cases&#34;:&#34;802&#34;,&#34;serious_critical&#34;:&#34;4,798&#34;,&#34;active_cases&#34;:&#34;375,505&#34;,&#34;total_cases_per_1m_population&#34;:&#34;43,641&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,467&#34;,&#34;total_tests&#34;:&#34;15,762,889&#34;,&#34;tests_per_1m_population&#34;:&#34;119,981&#34;},{&#34;country_name&#34;:&#34;Australia&#34;,&#34;cases&#34;:&#34;5,689,377&#34;,&#34;deaths&#34;:&#34;6,991&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,274,197&#34;,&#34;new_deaths&#34;:&#34;21&#34;,&#34;new_cases&#34;:&#34;34,769&#34;,&#34;serious_critical&#34;:&#34;135&#34;,&#34;active_cases&#34;:&#34;408,189&#34;,&#34;total_cases_per_1m_population&#34;:&#34;218,537&#34;,&#34;deaths_per_1m_population&#34;:&#34;269&#34;,&#34;total_tests&#34;:&#34;68,845,476&#34;,&#34;tests_per_1m_population&#34;:&#34;2,644,452&#34;},{&#34;country_name&#34;:&#34;Ukraine&#34;,&#34;cases&#34;:&#34;4,997,224&#34;,&#34;deaths&#34;:&#34;108,306&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;177&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;115,517&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,504&#34;,&#34;total_tests&#34;:&#34;19,521,252&#34;,&#34;tests_per_1m_population&#34;:&#34;451,259&#34;},{&#34;country_name&#34;:&#34;Malaysia&#34;,&#34;cases&#34;:&#34;4,427,067&#34;,&#34;deaths&#34;:&#34;35,491&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,310,599&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;89&#34;,&#34;active_cases&#34;:&#34;80,977&#34;,&#34;total_cases_per_1m_population&#34;:&#34;133,690&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,072&#34;,&#34;total_tests&#34;:&#34;58,332,799&#34;,&#34;tests_per_1m_population&#34;:&#34;1,761,549&#34;},{&#34;country_name&#34;:&#34;Thailand&#34;,&#34;cases&#34;:&#34;4,165,874&#34;,&#34;deaths&#34;:&#34;27,778&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,954,945&#34;,&#34;new_deaths&#34;:&#34;126&#34;,&#34;new_cases&#34;:&#34;17,784&#34;,&#34;serious_critical&#34;:&#34;1,496&#34;,&#34;active_cases&#34;:&#34;183,151&#34;,&#34;total_cases_per_1m_population&#34;:&#34;59,414&#34;,&#34;deaths_per_1m_population&#34;:&#34;396&#34;,&#34;total_tests&#34;:&#34;17,270,775&#34;,&#34;tests_per_1m_population&#34;:&#34;246,317&#34;},{&#34;country_name&#34;:&#34;Austria&#34;,&#34;cases&#34;:&#34;4,104,859&#34;,&#34;deaths&#34;:&#34;18,047&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,989,860&#34;,&#34;new_deaths&#34;:&#34;12&#34;,&#34;new_cases&#34;:&#34;5,810&#34;,&#34;serious_critical&#34;:&#34;121&#34;,&#34;active_cases&#34;:&#34;96,952&#34;,&#34;total_cases_per_1m_population&#34;:&#34;451,125&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,983&#34;,&#34;total_tests&#34;:&#34;181,825,734&#34;,&#34;tests_per_1m_population&#34;:&#34;19,982,688&#34;},{&#34;country_name&#34;:&#34;Israel&#34;,&#34;cases&#34;:&#34;4,054,342&#34;,&#34;deaths&#34;:&#34;10,658&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,009,152&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;220&#34;,&#34;active_cases&#34;:&#34;34,532&#34;,&#34;total_cases_per_1m_population&#34;:&#34;434,735&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,143&#34;,&#34;total_tests&#34;:&#34;41,373,364&#34;,&#34;tests_per_1m_population&#34;:&#34;4,436,346&#34;},{&#34;country_name&#34;:&#34;Belgium&#34;,&#34;cases&#34;:&#34;4,015,791&#34;,&#34;deaths&#34;:&#34;31,319&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,726,457&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;169&#34;,&#34;active_cases&#34;:&#34;258,015&#34;,&#34;total_cases_per_1m_population&#34;:&#34;343,798&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,681&#34;,&#34;total_tests&#34;:&#34;33,456,470&#34;,&#34;tests_per_1m_population&#34;:&#34;2,864,259&#34;},{&#34;country_name&#34;:&#34;Czechia&#34;,&#34;cases&#34;:&#34;3,895,544&#34;,&#34;deaths&#34;:&#34;40,081&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,838,099&#34;,&#34;new_deaths&#34;:&#34;5&#34;,&#34;new_cases&#34;:&#34;911&#34;,&#34;serious_critical&#34;:&#34;43&#34;,&#34;active_cases&#34;:&#34;17,364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;362,550&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,730&#34;,&#34;total_tests&#34;:&#34;55,117,064&#34;,&#34;tests_per_1m_population&#34;:&#34;5,129,629&#34;},{&#34;country_name&#34;:&#34;Portugal&#34;,&#34;cases&#34;:&#34;3,791,744&#34;,&#34;deaths&#34;:&#34;22,162&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;61&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;373,827&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,185&#34;,&#34;total_tests&#34;:&#34;40,748,372&#34;,&#34;tests_per_1m_population&#34;:&#34;4,017,371&#34;},{&#34;country_name&#34;:&#34;South Africa&#34;,&#34;cases&#34;:&#34;3,759,689&#34;,&#34;deaths&#34;:&#34;100,298&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,632,572&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;175&#34;,&#34;active_cases&#34;:&#34;26,819&#34;,&#34;total_cases_per_1m_population&#34;:&#34;61,981&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,653&#34;,&#34;total_tests&#34;:&#34;24,313,334&#34;,&#34;tests_per_1m_population&#34;:&#34;400,824&#34;},{&#34;country_name&#34;:&#34;Canada&#34;,&#34;cases&#34;:&#34;3,695,585&#34;,&#34;deaths&#34;:&#34;38,777&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,426,082&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;426&#34;,&#34;active_cases&#34;:&#34;230,726&#34;,&#34;total_cases_per_1m_population&#34;:&#34;96,391&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,011&#34;,&#34;total_tests&#34;:&#34;60,536,359&#34;,&#34;tests_per_1m_population&#34;:&#34;1,578,955&#34;},{&#34;country_name&#34;:&#34;Philippines&#34;,&#34;cases&#34;:&#34;3,684,500&#34;,&#34;deaths&#34;:&#34;60,182&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,610,658&#34;,&#34;new_deaths&#34;:&#34;3&#34;,&#34;new_cases&#34;:&#34;205&#34;,&#34;serious_critical&#34;:&#34;289&#34;,&#34;active_cases&#34;:&#34;13,660&#34;,&#34;total_cases_per_1m_population&#34;:&#34;32,835&#34;,&#34;deaths_per_1m_population&#34;:&#34;536&#34;,&#34;total_tests&#34;:&#34;29,427,586&#34;,&#34;tests_per_1m_population&#34;:&#34;262,246&#34;},{&#34;country_name&#34;:&#34;Switzerland&#34;,&#34;cases&#34;:&#34;3,579,867&#34;,&#34;deaths&#34;:&#34;13,816&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,378,507&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;90&#34;,&#34;active_cases&#34;:&#34;187,544&#34;,&#34;total_cases_per_1m_population&#34;:&#34;408,247&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,576&#34;,&#34;total_tests&#34;:&#34;20,666,182&#34;,&#34;tests_per_1m_population&#34;:&#34;2,356,766&#34;},{&#34;country_name&#34;:&#34;Peru&#34;,&#34;cases&#34;:&#34;3,559,343&#34;,&#34;deaths&#34;:&#34;212,724&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;356&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;105,303&#34;,&#34;deaths_per_1m_population&#34;:&#34;6,293&#34;,&#34;total_tests&#34;:&#34;29,592,270&#34;,&#34;tests_per_1m_population&#34;:&#34;875,489&#34;},{&#34;country_name&#34;:&#34;Chile&#34;,&#34;cases&#34;:&#34;3,544,463&#34;,&#34;deaths&#34;:&#34;57,375&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,368,772&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;286&#34;,&#34;active_cases&#34;:&#34;118,316&#34;,&#34;total_cases_per_1m_population&#34;:&#34;182,588&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,956&#34;,&#34;total_tests&#34;:&#34;36,711,724&#34;,&#34;tests_per_1m_population&#34;:&#34;1,891,147&#34;},{&#34;country_name&#34;:&#34;Greece&#34;,&#34;cases&#34;:&#34;3,277,557&#34;,&#34;deaths&#34;:&#34;28,867&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,151,717&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;277&#34;,&#34;active_cases&#34;:&#34;96,973&#34;,&#34;total_cases_per_1m_population&#34;:&#34;317,250&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,794&#34;,&#34;total_tests&#34;:&#34;78,872,546&#34;,&#34;tests_per_1m_population&#34;:&#34;7,634,431&#34;},{&#34;country_name&#34;:&#34;Denmark&#34;,&#34;cases&#34;:&#34;2,959,040&#34;,&#34;deaths&#34;:&#34;6,072&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,929,091&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;15&#34;,&#34;active_cases&#34;:&#34;23,877&#34;,&#34;total_cases_per_1m_population&#34;:&#34;507,639&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,042&#34;,&#34;total_tests&#34;:&#34;127,141,200&#34;,&#34;tests_per_1m_population&#34;:&#34;21,811,751&#34;},{&#34;country_name&#34;:&#34;Romania&#34;,&#34;cases&#34;:&#34;2,888,318&#34;,&#34;deaths&#34;:&#34;65,427&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,606,660&#34;,&#34;new_deaths&#34;:&#34;6&#34;,&#34;new_cases&#34;:&#34;494&#34;,&#34;serious_critical&#34;:&#34;216&#34;,&#34;active_cases&#34;:&#34;216,231&#34;,&#34;total_cases_per_1m_population&#34;:&#34;151,968&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,442&#34;,&#34;total_tests&#34;:&#34;22,594,702&#34;,&#34;tests_per_1m_population&#34;:&#34;1,188,815&#34;},{&#34;country_name&#34;:&#34;Sweden&#34;,&#34;cases&#34;:&#34;2,498,388&#34;,&#34;deaths&#34;:&#34;18,656&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,464,421&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;19&#34;,&#34;active_cases&#34;:&#34;15,311&#34;,&#34;total_cases_per_1m_population&#34;:&#34;244,630&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,827&#34;,&#34;total_tests&#34;:&#34;18,493,218&#34;,&#34;tests_per_1m_population&#34;:&#34;1,810,763&#34;},{&#34;country_name&#34;:&#34;Iraq&#34;,&#34;cases&#34;:&#34;2,324,141&#34;,&#34;deaths&#34;:&#34;25,204&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,295,947&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;20&#34;,&#34;active_cases&#34;:&#34;2,990&#34;,&#34;total_cases_per_1m_population&#34;:&#34;55,534&#34;,&#34;deaths_per_1m_population&#34;:&#34;602&#34;,&#34;total_tests&#34;:&#34;18,450,939&#34;,&#34;tests_per_1m_population&#34;:&#34;440,871&#34;},{&#34;country_name&#34;:&#34;Serbia&#34;,&#34;cases&#34;:&#34;2,001,144&#34;,&#34;deaths&#34;:&#34;15,953&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,967,786&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;25&#34;,&#34;active_cases&#34;:&#34;17,405&#34;,&#34;total_cases_per_1m_population&#34;:&#34;230,710&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,839&#34;,&#34;total_tests&#34;:&#34;9,427,662&#34;,&#34;tests_per_1m_population&#34;:&#34;1,086,907&#34;},{&#34;country_name&#34;:&#34;Bangladesh&#34;,&#34;cases&#34;:&#34;1,952,532&#34;,&#34;deaths&#34;:&#34;29,127&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,893,131&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,297&#34;,&#34;active_cases&#34;:&#34;30,274&#34;,&#34;total_cases_per_1m_population&#34;:&#34;11,646&#34;,&#34;deaths_per_1m_population&#34;:&#34;174&#34;,&#34;total_tests&#34;:&#34;13,956,056&#34;,&#34;tests_per_1m_population&#34;:&#34;83,245&#34;},{&#34;country_name&#34;:&#34;Hungary&#34;,&#34;cases&#34;:&#34;1,890,953&#34;,&#34;deaths&#34;:&#34;46,048&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,776,617&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;45&#34;,&#34;active_cases&#34;:&#34;68,288&#34;,&#34;total_cases_per_1m_population&#34;:&#34;196,645&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,789&#34;,&#34;total_tests&#34;:&#34;11,295,119&#34;,&#34;tests_per_1m_population&#34;:&#34;1,174,608&#34;},{&#34;country_name&#34;:&#34;Slovakia&#34;,&#34;cases&#34;:&#34;1,774,808&#34;,&#34;deaths&#34;:&#34;19,839&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,730,712&#34;,&#34;new_deaths&#34;:&#34;10&#34;,&#34;new_cases&#34;:&#34;1,155&#34;,&#34;serious_critical&#34;:&#34;88&#34;,&#34;active_cases&#34;:&#34;24,257&#34;,&#34;total_cases_per_1m_population&#34;:&#34;324,794&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,631&#34;,&#34;total_tests&#34;:&#34;7,057,901&#34;,&#34;tests_per_1m_population&#34;:&#34;1,291,611&#34;},{&#34;country_name&#34;:&#34;Jordan&#34;,&#34;cases&#34;:&#34;1,694,216&#34;,&#34;deaths&#34;:&#34;14,048&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,678,941&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;124&#34;,&#34;active_cases&#34;:&#34;1,227&#34;,&#34;total_cases_per_1m_population&#34;:&#34;163,125&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,353&#34;,&#34;total_tests&#34;:&#34;16,670,254&#34;,&#34;tests_per_1m_population&#34;:&#34;1,605,074&#34;},{&#34;country_name&#34;:&#34;Georgia&#34;,&#34;cases&#34;:&#34;1,654,255&#34;,&#34;deaths&#34;:&#34;16,800&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,635,791&#34;,&#34;new_deaths&#34;:&#34;3&#34;,&#34;new_cases&#34;:&#34;92&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,664&#34;,&#34;total_cases_per_1m_population&#34;:&#34;416,129&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,226&#34;,&#34;total_tests&#34;:&#34;16,807,205&#34;,&#34;tests_per_1m_population&#34;:&#34;4,227,861&#34;},{&#34;country_name&#34;:&#34;Pakistan&#34;,&#34;cases&#34;:&#34;1,527,856&#34;,&#34;deaths&#34;:&#34;30,369&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,493,998&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;105&#34;,&#34;serious_critical&#34;:&#34;186&#34;,&#34;active_cases&#34;:&#34;3,489&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,683&#34;,&#34;deaths_per_1m_population&#34;:&#34;133&#34;,&#34;total_tests&#34;:&#34;28,048,307&#34;,&#34;tests_per_1m_population&#34;:&#34;122,679&#34;},{&#34;country_name&#34;:&#34;Ireland&#34;,&#34;cases&#34;:&#34;1,509,536&#34;,&#34;deaths&#34;:&#34;6,996&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,415,949&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;41&#34;,&#34;active_cases&#34;:&#34;86,591&#34;,&#34;total_cases_per_1m_population&#34;:&#34;299,669&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,389&#34;,&#34;total_tests&#34;:&#34;12,016,948&#34;,&#34;tests_per_1m_population&#34;:&#34;2,385,571&#34;},{&#34;country_name&#34;:&#34;Norway&#34;,&#34;cases&#34;:&#34;1,423,509&#34;,&#34;deaths&#34;:&#34;2,871&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;20&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;258,925&#34;,&#34;deaths_per_1m_population&#34;:&#34;522&#34;,&#34;total_tests&#34;:&#34;11,002,430&#34;,&#34;tests_per_1m_population&#34;:&#34;2,001,256&#34;},{&#34;country_name&#34;:&#34;Kazakhstan&#34;,&#34;cases&#34;:&#34;1,305,457&#34;,&#34;deaths&#34;:&#34;13,660&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,290,988&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;10&#34;,&#34;serious_critical&#34;:&#34;24&#34;,&#34;active_cases&#34;:&#34;809&#34;,&#34;total_cases_per_1m_population&#34;:&#34;68,056&#34;,&#34;deaths_per_1m_population&#34;:&#34;712&#34;,&#34;total_tests&#34;:&#34;11,575,012&#34;,&#34;tests_per_1m_population&#34;:&#34;603,428&#34;},{&#34;country_name&#34;:&#34;Hong Kong&#34;,&#34;cases&#34;:&#34;1,201,431&#34;,&#34;deaths&#34;:&#34;9,236&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;115&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;157,942&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,214&#34;,&#34;total_tests&#34;:&#34;44,972,952&#34;,&#34;tests_per_1m_population&#34;:&#34;5,912,223&#34;},{&#34;country_name&#34;:&#34;Singapore&#34;,&#34;cases&#34;:&#34;1,180,124&#34;,&#34;deaths&#34;:&#34;1,325&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,109,387&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;69,412&#34;,&#34;total_cases_per_1m_population&#34;:&#34;198,895&#34;,&#34;deaths_per_1m_population&#34;:&#34;223&#34;,&#34;total_tests&#34;:&#34;23,712,995&#34;,&#34;tests_per_1m_population&#34;:&#34;3,996,529&#34;},{&#34;country_name&#34;:&#34;Morocco&#34;,&#34;cases&#34;:&#34;1,164,670&#34;,&#34;deaths&#34;:&#34;16,065&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,148,154&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;293&#34;,&#34;active_cases&#34;:&#34;451&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,893&#34;,&#34;deaths_per_1m_population&#34;:&#34;426&#34;,&#34;total_tests&#34;:&#34;11,237,010&#34;,&#34;tests_per_1m_population&#34;:&#34;298,062&#34;},{&#34;country_name&#34;:&#34;Bulgaria&#34;,&#34;cases&#34;:&#34;1,152,892&#34;,&#34;deaths&#34;:&#34;36,849&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;959,542&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;105&#34;,&#34;active_cases&#34;:&#34;156,501&#34;,&#34;total_cases_per_1m_population&#34;:&#34;168,206&#34;,&#34;deaths_per_1m_population&#34;:&#34;5,376&#34;,&#34;total_tests&#34;:&#34;9,797,011&#34;,&#34;tests_per_1m_population&#34;:&#34;1,429,377&#34;},{&#34;country_name&#34;:&#34;Croatia&#34;,&#34;cases&#34;:&#34;1,117,175&#34;,&#34;deaths&#34;:&#34;15,778&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,096,829&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;22&#34;,&#34;active_cases&#34;:&#34;4,568&#34;,&#34;total_cases_per_1m_population&#34;:&#34;275,195&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,887&#34;,&#34;total_tests&#34;:&#34;4,762,146&#34;,&#34;tests_per_1m_population&#34;:&#34;1,173,065&#34;},{&#34;country_name&#34;:&#34;Cuba&#34;,&#34;cases&#34;:&#34;1,101,486&#34;,&#34;deaths&#34;:&#34;8,523&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,091,603&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;1,360&#34;,&#34;total_cases_per_1m_population&#34;:&#34;97,355&#34;,&#34;deaths_per_1m_population&#34;:&#34;753&#34;,&#34;total_tests&#34;:&#34;12,920,253&#34;,&#34;tests_per_1m_population&#34;:&#34;1,141,957&#34;},{&#34;country_name&#34;:&#34;Lebanon&#34;,&#34;cases&#34;:&#34;1,096,320&#34;,&#34;deaths&#34;:&#34;10,374&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,079,455&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;186&#34;,&#34;active_cases&#34;:&#34;6,491&#34;,&#34;total_cases_per_1m_population&#34;:&#34;161,931&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,532&#34;,&#34;total_tests&#34;:&#34;4,795,578&#34;,&#34;tests_per_1m_population&#34;:&#34;708,328&#34;},{&#34;country_name&#34;:&#34;Lithuania&#34;,&#34;cases&#34;:&#34;1,054,618&#34;,&#34;deaths&#34;:&#34;9,063&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,016,510&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;427&#34;,&#34;serious_critical&#34;:&#34;31&#34;,&#34;active_cases&#34;:&#34;29,045&#34;,&#34;total_cases_per_1m_population&#34;:&#34;397,407&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,415&#34;,&#34;total_tests&#34;:&#34;8,217,113&#34;,&#34;tests_per_1m_population&#34;:&#34;3,096,414&#34;},{&#34;country_name&#34;:&#34;Tunisia&#34;,&#34;cases&#34;:&#34;1,039,532&#34;,&#34;deaths&#34;:&#34;28,533&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;29&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;86,327&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,369&#34;,&#34;total_tests&#34;:&#34;4,563,397&#34;,&#34;tests_per_1m_population&#34;:&#34;378,962&#34;},{&#34;country_name&#34;:&#34;Slovenia&#34;,&#34;cases&#34;:&#34;1,003,970&#34;,&#34;deaths&#34;:&#34;6,576&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;980,501&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;30&#34;,&#34;active_cases&#34;:&#34;16,893&#34;,&#34;total_cases_per_1m_population&#34;:&#34;482,805&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,162&#34;,&#34;total_tests&#34;:&#34;2,640,107&#34;,&#34;tests_per_1m_population&#34;:&#34;1,269,615&#34;},{&#34;country_name&#34;:&#34;Finland&#34;,&#34;cases&#34;:&#34;1,000,472&#34;,&#34;deaths&#34;:&#34;3,638&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;46,000&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;31&#34;,&#34;active_cases&#34;:&#34;950,834&#34;,&#34;total_cases_per_1m_population&#34;:&#34;180,062&#34;,&#34;deaths_per_1m_population&#34;:&#34;655&#34;,&#34;total_tests&#34;:&#34;10,644,579&#34;,&#34;tests_per_1m_population&#34;:&#34;1,915,782&#34;},{&#34;country_name&#34;:&#34;Nepal&#34;,&#34;cases&#34;:&#34;978,743&#34;,&#34;deaths&#34;:&#34;11,951&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;966,523&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;11&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;269&#34;,&#34;total_cases_per_1m_population&#34;:&#34;32,535&#34;,&#34;deaths_per_1m_population&#34;:&#34;397&#34;,&#34;total_tests&#34;:&#34;5,616,752&#34;,&#34;tests_per_1m_population&#34;:&#34;186,711&#34;},{&#34;country_name&#34;:&#34;Belarus&#34;,&#34;cases&#34;:&#34;977,434&#34;,&#34;deaths&#34;:&#34;6,922&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;928,536&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;41,976&#34;,&#34;total_cases_per_1m_population&#34;:&#34;103,501&#34;,&#34;deaths_per_1m_population&#34;:&#34;733&#34;,&#34;total_tests&#34;:&#34;13,092,771&#34;,&#34;tests_per_1m_population&#34;:&#34;1,386,401&#34;},{&#34;country_name&#34;:&#34;Bolivia&#34;,&#34;cases&#34;:&#34;904,377&#34;,&#34;deaths&#34;:&#34;21,908&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;855,123&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;83&#34;,&#34;serious_critical&#34;:&#34;220&#34;,&#34;active_cases&#34;:&#34;27,346&#34;,&#34;total_cases_per_1m_population&#34;:&#34;75,614&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,832&#34;,&#34;total_tests&#34;:&#34;2,693,845&#34;,&#34;tests_per_1m_population&#34;:&#34;225,230&#34;},{&#34;country_name&#34;:&#34;UAE&#34;,&#34;cases&#34;:&#34;897,136&#34;,&#34;deaths&#34;:&#34;2,302&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;879,787&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;244&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;15,047&#34;,&#34;total_cases_per_1m_population&#34;:&#34;88,772&#34;,&#34;deaths_per_1m_population&#34;:&#34;228&#34;,&#34;total_tests&#34;:&#34;154,420,740&#34;,&#34;tests_per_1m_population&#34;:&#34;15,279,961&#34;},{&#34;country_name&#34;:&#34;Uruguay&#34;,&#34;cases&#34;:&#34;895,775&#34;,&#34;deaths&#34;:&#34;7,197&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;886,654&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;18&#34;,&#34;active_cases&#34;:&#34;1,924&#34;,&#34;total_cases_per_1m_population&#34;:&#34;256,268&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,059&#34;,&#34;total_tests&#34;:&#34;6,091,188&#34;,&#34;tests_per_1m_population&#34;:&#34;1,742,599&#34;},{&#34;country_name&#34;:&#34;New Zealand&#34;,&#34;cases&#34;:&#34;884,289&#34;,&#34;deaths&#34;:&#34;636&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;824,272&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;5,714&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;59,381&#34;,&#34;total_cases_per_1m_population&#34;:&#34;176,784&#34;,&#34;deaths_per_1m_population&#34;:&#34;127&#34;,&#34;total_tests&#34;:&#34;6,983,031&#34;,&#34;tests_per_1m_population&#34;:&#34;1,396,020&#34;},{&#34;country_name&#34;:&#34;Ecuador&#34;,&#34;cases&#34;:&#34;868,053&#34;,&#34;deaths&#34;:&#34;35,581&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;759&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;47,888&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,963&#34;,&#34;total_tests&#34;:&#34;2,470,170&#34;,&#34;tests_per_1m_population&#34;:&#34;136,273&#34;},{&#34;country_name&#34;:&#34;Costa Rica&#34;,&#34;cases&#34;:&#34;847,784&#34;,&#34;deaths&#34;:&#34;8,383&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;829,515&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;43&#34;,&#34;active_cases&#34;:&#34;9,886&#34;,&#34;total_cases_per_1m_population&#34;:&#34;163,725&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,619&#34;,&#34;total_tests&#34;:&#34;4,240,743&#34;,&#34;tests_per_1m_population&#34;:&#34;818,979&#34;},{&#34;country_name&#34;:&#34;Guatemala&#34;,&#34;cases&#34;:&#34;841,341&#34;,&#34;deaths&#34;:&#34;17,496&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;821,185&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;2,660&#34;,&#34;total_cases_per_1m_population&#34;:&#34;45,444&#34;,&#34;deaths_per_1m_population&#34;:&#34;945&#34;,&#34;total_tests&#34;:&#34;4,402,305&#34;,&#34;tests_per_1m_population&#34;:&#34;237,787&#34;},{&#34;country_name&#34;:&#34;Latvia&#34;,&#34;cases&#34;:&#34;817,316&#34;,&#34;deaths&#34;:&#34;5,743&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;803,135&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;322&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;8,438&#34;,&#34;total_cases_per_1m_population&#34;:&#34;442,135&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,107&#34;,&#34;total_tests&#34;:&#34;7,154,016&#34;,&#34;tests_per_1m_population&#34;:&#34;3,870,035&#34;},{&#34;country_name&#34;:&#34;Azerbaijan&#34;,&#34;cases&#34;:&#34;792,476&#34;,&#34;deaths&#34;:&#34;9,707&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;782,634&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;135&#34;,&#34;total_cases_per_1m_population&#34;:&#34;76,908&#34;,&#34;deaths_per_1m_population&#34;:&#34;942&#34;,&#34;total_tests&#34;:&#34;6,792,132&#34;,&#34;tests_per_1m_population&#34;:&#34;659,165&#34;},{&#34;country_name&#34;:&#34;Panama&#34;,&#34;cases&#34;:&#34;771,486&#34;,&#34;deaths&#34;:&#34;8,182&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;759,832&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;3,472&#34;,&#34;total_cases_per_1m_population&#34;:&#34;173,862&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,844&#34;,&#34;total_tests&#34;:&#34;5,820,472&#34;,&#34;tests_per_1m_population&#34;:&#34;1,311,699&#34;},{&#34;country_name&#34;:&#34;Saudi Arabia&#34;,&#34;cases&#34;:&#34;753,332&#34;,&#34;deaths&#34;:&#34;9,076&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;740,467&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;45&#34;,&#34;active_cases&#34;:&#34;3,789&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,047&#34;,&#34;deaths_per_1m_population&#34;:&#34;254&#34;,&#34;total_tests&#34;:&#34;41,817,866&#34;,&#34;tests_per_1m_population&#34;:&#34;1,168,345&#34;},{&#34;country_name&#34;:&#34;Sri Lanka&#34;,&#34;cases&#34;:&#34;663,131&#34;,&#34;deaths&#34;:&#34;16,502&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;642,574&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;4,055&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,736&#34;,&#34;deaths_per_1m_population&#34;:&#34;765&#34;,&#34;total_tests&#34;:&#34;6,486,117&#34;,&#34;tests_per_1m_population&#34;:&#34;300,627&#34;},{&#34;country_name&#34;:&#34;Paraguay&#34;,&#34;cases&#34;:&#34;649,034&#34;,&#34;deaths&#34;:&#34;18,795&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;624,673&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;5,566&#34;,&#34;total_cases_per_1m_population&#34;:&#34;89,022&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,578&#34;,&#34;total_tests&#34;:&#34;2,623,300&#34;,&#34;tests_per_1m_population&#34;:&#34;359,816&#34;},{&#34;country_name&#34;:&#34;Kuwait&#34;,&#34;cases&#34;:&#34;631,294&#34;,&#34;deaths&#34;:&#34;2,555&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;627,899&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;840&#34;,&#34;total_cases_per_1m_population&#34;:&#34;143,981&#34;,&#34;deaths_per_1m_population&#34;:&#34;583&#34;,&#34;total_tests&#34;:&#34;7,999,656&#34;,&#34;tests_per_1m_population&#34;:&#34;1,824,506&#34;},{&#34;country_name&#34;:&#34;Myanmar&#34;,&#34;cases&#34;:&#34;612,733&#34;,&#34;deaths&#34;:&#34;19,434&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;591,609&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,690&#34;,&#34;total_cases_per_1m_population&#34;:&#34;11,127&#34;,&#34;deaths_per_1m_population&#34;:&#34;353&#34;,&#34;total_tests&#34;:&#34;7,891,077&#34;,&#34;tests_per_1m_population&#34;:&#34;143,296&#34;},{&#34;country_name&#34;:&#34;Palestine&#34;,&#34;cases&#34;:&#34;581,816&#34;,&#34;deaths&#34;:&#34;5,353&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;575,899&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;17&#34;,&#34;active_cases&#34;:&#34;564&#34;,&#34;total_cases_per_1m_population&#34;:&#34;109,459&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,007&#34;,&#34;total_tests&#34;:&#34;3,078,533&#34;,&#34;tests_per_1m_population&#34;:&#34;579,175&#34;},{&#34;country_name&#34;:&#34;Dominican Republic&#34;,&#34;cases&#34;:&#34;578,954&#34;,&#34;deaths&#34;:&#34;4,376&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;574,297&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;16&#34;,&#34;active_cases&#34;:&#34;281&#34;,&#34;total_cases_per_1m_population&#34;:&#34;52,421&#34;,&#34;deaths_per_1m_population&#34;:&#34;396&#34;,&#34;total_tests&#34;:&#34;3,261,060&#34;,&#34;tests_per_1m_population&#34;:&#34;295,272&#34;},{&#34;country_name&#34;:&#34;Estonia&#34;,&#34;cases&#34;:&#34;570,257&#34;,&#34;deaths&#34;:&#34;2,531&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;507,474&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;181&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;60,252&#34;,&#34;total_cases_per_1m_population&#34;:&#34;429,364&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,906&#34;,&#34;total_tests&#34;:&#34;3,311,935&#34;,&#34;tests_per_1m_population&#34;:&#34;2,493,655&#34;},{&#34;country_name&#34;:&#34;Bahrain&#34;,&#34;cases&#34;:&#34;565,830&#34;,&#34;deaths&#34;:&#34;1,475&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;560,795&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;3,560&#34;,&#34;total_cases_per_1m_population&#34;:&#34;312,916&#34;,&#34;deaths_per_1m_population&#34;:&#34;816&#34;,&#34;total_tests&#34;:&#34;9,695,962&#34;,&#34;tests_per_1m_population&#34;:&#34;5,362,081&#34;},{&#34;country_name&#34;:&#34;Venezuela&#34;,&#34;cases&#34;:&#34;522,121&#34;,&#34;deaths&#34;:&#34;5,705&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;515,305&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;230&#34;,&#34;active_cases&#34;:&#34;1,111&#34;,&#34;total_cases_per_1m_population&#34;:&#34;18,456&#34;,&#34;deaths_per_1m_population&#34;:&#34;202&#34;,&#34;total_tests&#34;:&#34;3,359,014&#34;,&#34;tests_per_1m_population&#34;:&#34;118,733&#34;},{&#34;country_name&#34;:&#34;Moldova&#34;,&#34;cases&#34;:&#34;516,986&#34;,&#34;deaths&#34;:&#34;11,489&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;504,142&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;49&#34;,&#34;active_cases&#34;:&#34;1,355&#34;,&#34;total_cases_per_1m_population&#34;:&#34;128,698&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,860&#34;,&#34;total_tests&#34;:&#34;3,216,305&#34;,&#34;tests_per_1m_population&#34;:&#34;800,665&#34;},{&#34;country_name&#34;:&#34;Egypt&#34;,&#34;cases&#34;:&#34;515,645&#34;,&#34;deaths&#34;:&#34;24,613&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;442,182&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;122&#34;,&#34;active_cases&#34;:&#34;48,850&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,873&#34;,&#34;deaths_per_1m_population&#34;:&#34;233&#34;,&#34;total_tests&#34;:&#34;3,693,367&#34;,&#34;tests_per_1m_population&#34;:&#34;34,903&#34;},{&#34;country_name&#34;:&#34;Libya&#34;,&#34;cases&#34;:&#34;501,862&#34;,&#34;deaths&#34;:&#34;6,429&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;490,900&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;101&#34;,&#34;active_cases&#34;:&#34;4,533&#34;,&#34;total_cases_per_1m_population&#34;:&#34;71,288&#34;,&#34;deaths_per_1m_population&#34;:&#34;913&#34;,&#34;total_tests&#34;:&#34;2,476,960&#34;,&#34;tests_per_1m_population&#34;:&#34;351,844&#34;},{&#34;country_name&#34;:&#34;Cyprus&#34;,&#34;cases&#34;:&#34;470,481&#34;,&#34;deaths&#34;:&#34;1,011&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;124,370&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;60&#34;,&#34;active_cases&#34;:&#34;345,100&#34;,&#34;total_cases_per_1m_population&#34;:&#34;384,623&#34;,&#34;deaths_per_1m_population&#34;:&#34;827&#34;,&#34;total_tests&#34;:&#34;9,477,138&#34;,&#34;tests_per_1m_population&#34;:&#34;7,747,665&#34;},{&#34;country_name&#34;:&#34;Ethiopia&#34;,&#34;cases&#34;:&#34;470,417&#34;,&#34;deaths&#34;:&#34;7,510&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;454,967&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;15&#34;,&#34;active_cases&#34;:&#34;7,940&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,917&#34;,&#34;deaths_per_1m_population&#34;:&#34;63&#34;,&#34;total_tests&#34;:&#34;4,763,756&#34;,&#34;tests_per_1m_population&#34;:&#34;39,665&#34;},{&#34;country_name&#34;:&#34;Mongolia&#34;,&#34;cases&#34;:&#34;469,580&#34;,&#34;deaths&#34;:&#34;2,177&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;313,256&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;30&#34;,&#34;serious_critical&#34;:&#34;192&#34;,&#34;active_cases&#34;:&#34;154,147&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139,194&#34;,&#34;deaths_per_1m_population&#34;:&#34;645&#34;,&#34;total_tests&#34;:&#34;4,030,048&#34;,&#34;tests_per_1m_population&#34;:&#34;1,194,595&#34;},{&#34;country_name&#34;:&#34;Armenia&#34;,&#34;cases&#34;:&#34;422,825&#34;,&#34;deaths&#34;:&#34;8,622&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;410,558&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;3&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,645&#34;,&#34;total_cases_per_1m_population&#34;:&#34;142,210&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,900&#34;,&#34;total_tests&#34;:&#34;3,035,104&#34;,&#34;tests_per_1m_population&#34;:&#34;1,020,807&#34;},{&#34;country_name&#34;:&#34;Honduras&#34;,&#34;cases&#34;:&#34;422,275&#34;,&#34;deaths&#34;:&#34;10,892&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;131,100&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;105&#34;,&#34;active_cases&#34;:&#34;280,283&#34;,&#34;total_cases_per_1m_population&#34;:&#34;41,445&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,069&#34;,&#34;total_tests&#34;:&#34;1,263,329&#34;,&#34;tests_per_1m_population&#34;:&#34;123,991&#34;},{&#34;country_name&#34;:&#34;Oman&#34;,&#34;cases&#34;:&#34;388,995&#34;,&#34;deaths&#34;:&#34;4,257&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;384,055&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;683&#34;,&#34;total_cases_per_1m_population&#34;:&#34;72,833&#34;,&#34;deaths_per_1m_population&#34;:&#34;797&#34;,&#34;total_tests&#34;:&#34;25,000,000&#34;,&#34;tests_per_1m_population&#34;:&#34;4,680,828&#34;},{&#34;country_name&#34;:&#34;Bosnia and Herzegovina&#34;,&#34;cases&#34;:&#34;376,699&#34;,&#34;deaths&#34;:&#34;15,756&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;192,218&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;168,725&#34;,&#34;total_cases_per_1m_population&#34;:&#34;116,122&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,857&#34;,&#34;total_tests&#34;:&#34;1,752,716&#34;,&#34;tests_per_1m_population&#34;:&#34;540,297&#34;},{&#34;country_name&#34;:&#34;R u00e9union&#34;,&#34;cases&#34;:&#34;374,295&#34;,&#34;deaths&#34;:&#34;742&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;355,605&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;10&#34;,&#34;active_cases&#34;:&#34;17,948&#34;,&#34;total_cases_per_1m_population&#34;:&#34;412,744&#34;,&#34;deaths_per_1m_population&#34;:&#34;818&#34;,&#34;total_tests&#34;:&#34;1,603,660&#34;,&#34;tests_per_1m_population&#34;:&#34;1,768,393&#34;},{&#34;country_name&#34;:&#34;Qatar&#34;,&#34;cases&#34;:&#34;364,089&#34;,&#34;deaths&#34;:&#34;677&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;362,568&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;844&#34;,&#34;total_cases_per_1m_population&#34;:&#34;129,670&#34;,&#34;deaths_per_1m_population&#34;:&#34;241&#34;,&#34;total_tests&#34;:&#34;3,425,362&#34;,&#34;tests_per_1m_population&#34;:&#34;1,219,943&#34;},{&#34;country_name&#34;:&#34;Kenya&#34;,&#34;cases&#34;:&#34;323,696&#34;,&#34;deaths&#34;:&#34;5,649&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;317,909&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;138&#34;,&#34;total_cases_per_1m_population&#34;:&#34;5,790&#34;,&#34;deaths_per_1m_population&#34;:&#34;101&#34;,&#34;total_tests&#34;:&#34;3,581,506&#34;,&#34;tests_per_1m_population&#34;:&#34;64,060&#34;},{&#34;country_name&#34;:&#34;Zambia&#34;,&#34;cases&#34;:&#34;318,984&#34;,&#34;deaths&#34;:&#34;3,974&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;314,075&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;935&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,517&#34;,&#34;deaths_per_1m_population&#34;:&#34;206&#34;,&#34;total_tests&#34;:&#34;3,408,441&#34;,&#34;tests_per_1m_population&#34;:&#34;176,487&#34;},{&#34;country_name&#34;:&#34;North Macedonia&#34;,&#34;cases&#34;:&#34;309,062&#34;,&#34;deaths&#34;:&#34;9,271&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;299,064&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;727&#34;,&#34;total_cases_per_1m_population&#34;:&#34;148,358&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,450&#34;,&#34;total_tests&#34;:&#34;2,007,553&#34;,&#34;tests_per_1m_population&#34;:&#34;963,678&#34;},{&#34;country_name&#34;:&#34;Botswana&#34;,&#34;cases&#34;:&#34;305,859&#34;,&#34;deaths&#34;:&#34;2,688&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;303,026&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;145&#34;,&#34;total_cases_per_1m_population&#34;:&#34;125,491&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,103&#34;,&#34;total_tests&#34;:&#34;2,026,898&#34;,&#34;tests_per_1m_population&#34;:&#34;831,613&#34;},{&#34;country_name&#34;:&#34;Albania&#34;,&#34;cases&#34;:&#34;274,791&#34;,&#34;deaths&#34;:&#34;3,496&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;270,869&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;426&#34;,&#34;total_cases_per_1m_population&#34;:&#34;95,675&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,217&#34;,&#34;total_tests&#34;:&#34;1,799,730&#34;,&#34;tests_per_1m_population&#34;:&#34;626,620&#34;},{&#34;country_name&#34;:&#34;Algeria&#34;,&#34;cases&#34;:&#34;265,761&#34;,&#34;deaths&#34;:&#34;6,874&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;178,344&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;80,543&#34;,&#34;total_cases_per_1m_population&#34;:&#34;5,869&#34;,&#34;deaths_per_1m_population&#34;:&#34;152&#34;,&#34;total_tests&#34;:&#34;230,861&#34;,&#34;tests_per_1m_population&#34;:&#34;5,099&#34;},{&#34;country_name&#34;:&#34;Nigeria&#34;,&#34;cases&#34;:&#34;255,685&#34;,&#34;deaths&#34;:&#34;3,143&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;249,890&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;2,652&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,187&#34;,&#34;deaths_per_1m_population&#34;:&#34;15&#34;,&#34;total_tests&#34;:&#34;5,036,813&#34;,&#34;tests_per_1m_population&#34;:&#34;23,388&#34;},{&#34;country_name&#34;:&#34;Zimbabwe&#34;,&#34;cases&#34;:&#34;247,524&#34;,&#34;deaths&#34;:&#34;5,468&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;241,362&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;12&#34;,&#34;active_cases&#34;:&#34;694&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,227&#34;,&#34;deaths_per_1m_population&#34;:&#34;358&#34;,&#34;total_tests&#34;:&#34;2,240,305&#34;,&#34;tests_per_1m_population&#34;:&#34;146,872&#34;},{&#34;country_name&#34;:&#34;Uzbekistan&#34;,&#34;cases&#34;:&#34;238,469&#34;,&#34;deaths&#34;:&#34;1,637&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;236,483&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;27&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;349&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,943&#34;,&#34;deaths_per_1m_population&#34;:&#34;48&#34;,&#34;total_tests&#34;:&#34;1,377,915&#34;,&#34;tests_per_1m_population&#34;:&#34;40,120&#34;},{&#34;country_name&#34;:&#34;Montenegro&#34;,&#34;cases&#34;:&#34;234,619&#34;,&#34;deaths&#34;:&#34;2,713&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;231,297&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;609&#34;,&#34;total_cases_per_1m_population&#34;:&#34;373,473&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,319&#34;,&#34;total_tests&#34;:&#34;2,444,820&#34;,&#34;tests_per_1m_population&#34;:&#34;3,891,730&#34;},{&#34;country_name&#34;:&#34;Luxembourg&#34;,&#34;cases&#34;:&#34;233,966&#34;,&#34;deaths&#34;:&#34;1,058&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;221,501&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;11,407&#34;,&#34;total_cases_per_1m_population&#34;:&#34;363,099&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,642&#34;,&#34;total_tests&#34;:&#34;4,213,886&#34;,&#34;tests_per_1m_population&#34;:&#34;6,539,666&#34;},{&#34;country_name&#34;:&#34;Mozambique&#34;,&#34;cases&#34;:&#34;225,358&#34;,&#34;deaths&#34;:&#34;2,201&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;223,104&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;13&#34;,&#34;active_cases&#34;:&#34;53&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,863&#34;,&#34;deaths_per_1m_population&#34;:&#34;67&#34;,&#34;total_tests&#34;:&#34;1,308,458&#34;,&#34;tests_per_1m_population&#34;:&#34;39,849&#34;},{&#34;country_name&#34;:&#34;Laos&#34;,&#34;cases&#34;:&#34;205,975&#34;,&#34;deaths&#34;:&#34;732&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,660&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;1,082&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;197,583&#34;,&#34;total_cases_per_1m_population&#34;:&#34;27,588&#34;,&#34;deaths_per_1m_population&#34;:&#34;98&#34;,&#34;total_tests&#34;:&#34;1,232,128&#34;,&#34;tests_per_1m_population&#34;:&#34;165,029&#34;},{&#34;country_name&#34;:&#34;Kyrgyzstan&#34;,&#34;cases&#34;:&#34;200,983&#34;,&#34;deaths&#34;:&#34;2,991&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;196,386&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;131&#34;,&#34;active_cases&#34;:&#34;1,606&#34;,&#34;total_cases_per_1m_population&#34;:&#34;29,915&#34;,&#34;deaths_per_1m_population&#34;:&#34;445&#34;,&#34;total_tests&#34;:&#34;1,907,195&#34;,&#34;tests_per_1m_population&#34;:&#34;283,874&#34;},{&#34;country_name&#34;:&#34;China&#34;,&#34;cases&#34;:&#34;200,654&#34;,&#34;deaths&#34;:&#34;4,725&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;166,398&#34;,&#34;new_deaths&#34;:&#34;39&#34;,&#34;new_cases&#34;:&#34;1,580&#34;,&#34;serious_critical&#34;:&#34;236&#34;,&#34;active_cases&#34;:&#34;29,531&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139&#34;,&#34;deaths_per_1m_population&#34;:&#34;3&#34;,&#34;total_tests&#34;:&#34;160,000,000&#34;,&#34;tests_per_1m_population&#34;:&#34;111,163&#34;},{&#34;country_name&#34;:&#34;Iceland&#34;,&#34;cases&#34;:&#34;183,974&#34;,&#34;deaths&#34;:&#34;112&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;75,685&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;108,177&#34;,&#34;total_cases_per_1m_population&#34;:&#34;532,886&#34;,&#34;deaths_per_1m_population&#34;:&#34;324&#34;,&#34;total_tests&#34;:&#34;1,953,616&#34;,&#34;tests_per_1m_population&#34;:&#34;5,658,702&#34;},{&#34;country_name&#34;:&#34;Maldives&#34;,&#34;cases&#34;:&#34;178,883&#34;,&#34;deaths&#34;:&#34;298&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;163,687&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;25&#34;,&#34;active_cases&#34;:&#34;14,898&#34;,&#34;total_cases_per_1m_population&#34;:&#34;320,737&#34;,&#34;deaths_per_1m_population&#34;:&#34;534&#34;,&#34;total_tests&#34;:&#34;2,213,831&#34;,&#34;tests_per_1m_population&#34;:&#34;3,969,395&#34;},{&#34;country_name&#34;:&#34;Afghanistan&#34;,&#34;cases&#34;:&#34;178,689&#34;,&#34;deaths&#34;:&#34;7,682&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;161,748&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;39&#34;,&#34;serious_critical&#34;:&#34;1,124&#34;,&#34;active_cases&#34;:&#34;9,259&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,411&#34;,&#34;deaths_per_1m_population&#34;:&#34;190&#34;,&#34;total_tests&#34;:&#34;940,341&#34;,&#34;tests_per_1m_population&#34;:&#34;23,212&#34;},{&#34;country_name&#34;:&#34;Uganda&#34;,&#34;cases&#34;:&#34;164,069&#34;,&#34;deaths&#34;:&#34;3,596&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;100,205&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;60,268&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,394&#34;,&#34;deaths_per_1m_population&#34;:&#34;74&#34;,&#34;total_tests&#34;:&#34;2,612,795&#34;,&#34;tests_per_1m_population&#34;:&#34;54,043&#34;},{&#34;country_name&#34;:&#34;El Salvador&#34;,&#34;cases&#34;:&#34;162,089&#34;,&#34;deaths&#34;:&#34;4,127&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;150,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;7,300&#34;,&#34;total_cases_per_1m_population&#34;:&#34;24,764&#34;,&#34;deaths_per_1m_population&#34;:&#34;631&#34;,&#34;total_tests&#34;:&#34;1,950,448&#34;,&#34;tests_per_1m_population&#34;:&#34;297,993&#34;},{&#34;country_name&#34;:&#34;Ghana&#34;,&#34;cases&#34;:&#34;161,124&#34;,&#34;deaths&#34;:&#34;1,445&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;159,655&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;24&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,997&#34;,&#34;deaths_per_1m_population&#34;:&#34;45&#34;,&#34;total_tests&#34;:&#34;2,433,244&#34;,&#34;tests_per_1m_population&#34;:&#34;75,465&#34;},{&#34;country_name&#34;:&#34;Namibia&#34;,&#34;cases&#34;:&#34;158,332&#34;,&#34;deaths&#34;:&#34;4,023&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;153,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;647&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,341&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,533&#34;,&#34;total_tests&#34;:&#34;1,001,354&#34;,&#34;tests_per_1m_population&#34;:&#34;381,621&#34;},{&#34;country_name&#34;:&#34;Martinique&#34;,&#34;cases&#34;:&#34;147,519&#34;,&#34;deaths&#34;:&#34;918&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;104&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;146,497&#34;,&#34;total_cases_per_1m_population&#34;:&#34;393,657&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,450&#34;,&#34;total_tests&#34;:&#34;828,928&#34;,&#34;tests_per_1m_population&#34;:&#34;2,212,008&#34;},{&#34;country_name&#34;:&#34;Trinidad and Tobago&#34;,&#34;cases&#34;:&#34;144,359&#34;,&#34;deaths&#34;:&#34;3,812&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;133,604&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;18&#34;,&#34;active_cases&#34;:&#34;6,943&#34;,&#34;total_cases_per_1m_population&#34;:&#34;102,552&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,708&#34;,&#34;total_tests&#34;:&#34;696,148&#34;,&#34;tests_per_1m_population&#34;:&#34;494,540&#34;},{&#34;country_name&#34;:&#34;Brunei&#34;,&#34;cases&#34;:&#34;141,014&#34;,&#34;deaths&#34;:&#34;218&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;139,724&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,072&#34;,&#34;total_cases_per_1m_population&#34;:&#34;316,857&#34;,&#34;deaths_per_1m_population&#34;:&#34;490&#34;,&#34;total_tests&#34;:&#34;717,784&#34;,&#34;tests_per_1m_population&#34;:&#34;1,612,853&#34;},{&#34;country_name&#34;:&#34;Guadeloupe&#34;,&#34;cases&#34;:&#34;140,130&#34;,&#34;deaths&#34;:&#34;854&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,250&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;19&#34;,&#34;active_cases&#34;:&#34;137,026&#34;,&#34;total_cases_per_1m_population&#34;:&#34;350,108&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,134&#34;,&#34;total_tests&#34;:&#34;938,039&#34;,&#34;tests_per_1m_population&#34;:&#34;2,343,644&#34;},{&#34;country_name&#34;:&#34;Cambodia&#34;,&#34;cases&#34;:&#34;136,200&#34;,&#34;deaths&#34;:&#34;3,056&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;132,896&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;248&#34;,&#34;total_cases_per_1m_population&#34;:&#34;7,948&#34;,&#34;deaths_per_1m_population&#34;:&#34;178&#34;,&#34;total_tests&#34;:&#34;2,946,965&#34;,&#34;tests_per_1m_population&#34;:&#34;171,969&#34;},{&#34;country_name&#34;:&#34;Rwanda&#34;,&#34;cases&#34;:&#34;129,764&#34;,&#34;deaths&#34;:&#34;1,458&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;45,522&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;82,784&#34;,&#34;total_cases_per_1m_population&#34;:&#34;9,590&#34;,&#34;deaths_per_1m_population&#34;:&#34;108&#34;,&#34;total_tests&#34;:&#34;5,225,494&#34;,&#34;tests_per_1m_population&#34;:&#34;386,173&#34;},{&#34;country_name&#34;:&#34;Jamaica&#34;,&#34;cases&#34;:&#34;129,489&#34;,&#34;deaths&#34;:&#34;2,943&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;82,965&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;43,581&#34;,&#34;total_cases_per_1m_population&#34;:&#34;43,387&#34;,&#34;deaths_per_1m_population&#34;:&#34;986&#34;,&#34;total_tests&#34;:&#34;981,688&#34;,&#34;tests_per_1m_population&#34;:&#34;328,929&#34;},{&#34;country_name&#34;:&#34;Cameroon&#34;,&#34;cases&#34;:&#34;119,780&#34;,&#34;deaths&#34;:&#34;1,927&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;117,791&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;13&#34;,&#34;active_cases&#34;:&#34;62&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,318&#34;,&#34;deaths_per_1m_population&#34;:&#34;69&#34;,&#34;total_tests&#34;:&#34;1,751,774&#34;,&#34;tests_per_1m_population&#34;:&#34;63,154&#34;},{&#34;country_name&#34;:&#34;Angola&#34;,&#34;cases&#34;:&#34;99,194&#34;,&#34;deaths&#34;:&#34;1,900&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;97,149&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;145&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,858&#34;,&#34;deaths_per_1m_population&#34;:&#34;55&#34;,&#34;total_tests&#34;:&#34;1,499,795&#34;,&#34;tests_per_1m_population&#34;:&#34;43,209&#34;},{&#34;country_name&#34;:&#34;Malta&#34;,&#34;cases&#34;:&#34;90,595&#34;,&#34;deaths&#34;:&#34;688&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;84,646&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;196&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;5,261&#34;,&#34;total_cases_per_1m_population&#34;:&#34;204,196&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,551&#34;,&#34;total_tests&#34;:&#34;1,872,465&#34;,&#34;tests_per_1m_population&#34;:&#34;4,220,438&#34;},{&#34;country_name&#34;:&#34;DRC&#34;,&#34;cases&#34;:&#34;87,023&#34;,&#34;deaths&#34;:&#34;1,337&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;50,930&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;34,756&#34;,&#34;total_cases_per_1m_population&#34;:&#34;921&#34;,&#34;deaths_per_1m_population&#34;:&#34;14&#34;,&#34;total_tests&#34;:&#34;846,704&#34;,&#34;tests_per_1m_population&#34;:&#34;8,962&#34;},{&#34;country_name&#34;:&#34;Senegal&#34;,&#34;cases&#34;:&#34;85,984&#34;,&#34;deaths&#34;:&#34;1,966&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;84,001&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;17&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,902&#34;,&#34;deaths_per_1m_population&#34;:&#34;112&#34;,&#34;total_tests&#34;:&#34;1,063,849&#34;,&#34;tests_per_1m_population&#34;:&#34;60,653&#34;},{&#34;country_name&#34;:&#34;Malawi&#34;,&#34;cases&#34;:&#34;85,747&#34;,&#34;deaths&#34;:&#34;2,633&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;81,938&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;67&#34;,&#34;active_cases&#34;:&#34;1,176&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,283&#34;,&#34;deaths_per_1m_population&#34;:&#34;132&#34;,&#34;total_tests&#34;:&#34;571,585&#34;,&#34;tests_per_1m_population&#34;:&#34;28,548&#34;},{&#34;country_name&#34;:&#34;Ivory Coast&#34;,&#34;cases&#34;:&#34;81,887&#34;,&#34;deaths&#34;:&#34;799&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;81,061&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;27&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,972&#34;,&#34;deaths_per_1m_population&#34;:&#34;29&#34;,&#34;total_tests&#34;:&#34;1,494,624&#34;,&#34;tests_per_1m_population&#34;:&#34;54,238&#34;},{&#34;country_name&#34;:&#34;French Guiana&#34;,&#34;cases&#34;:&#34;80,422&#34;,&#34;deaths&#34;:&#34;394&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,254&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;68,774&#34;,&#34;total_cases_per_1m_population&#34;:&#34;257,228&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,260&#34;,&#34;total_tests&#34;:&#34;622,646&#34;,&#34;tests_per_1m_population&#34;:&#34;1,991,518&#34;},{&#34;country_name&#34;:&#34;Suriname&#34;,&#34;cases&#34;:&#34;79,302&#34;,&#34;deaths&#34;:&#34;1,327&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;49,396&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;28,579&#34;,&#34;total_cases_per_1m_population&#34;:&#34;133,030&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,226&#34;,&#34;total_tests&#34;:&#34;235,824&#34;,&#34;tests_per_1m_population&#34;:&#34;395,598&#34;},{&#34;country_name&#34;:&#34;Channel Islands&#34;,&#34;cases&#34;:&#34;73,609&#34;,&#34;deaths&#34;:&#34;166&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;72,059&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,384&#34;,&#34;total_cases_per_1m_population&#34;:&#34;416,444&#34;,&#34;deaths_per_1m_population&#34;:&#34;939&#34;,&#34;total_tests&#34;:&#34;1,252,808&#34;,&#34;tests_per_1m_population&#34;:&#34;7,087,782&#34;},{&#34;country_name&#34;:&#34;French Polynesia&#34;,&#34;cases&#34;:&#34;72,648&#34;,&#34;deaths&#34;:&#34;648&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;255,948&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,283&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Eswatini&#34;,&#34;cases&#34;:&#34;70,284&#34;,&#34;deaths&#34;:&#34;1,397&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;68,764&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;123&#34;,&#34;total_cases_per_1m_population&#34;:&#34;59,470&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,182&#34;,&#34;total_tests&#34;:&#34;1,012,397&#34;,&#34;tests_per_1m_population&#34;:&#34;856,623&#34;},{&#34;country_name&#34;:&#34;Barbados&#34;,&#34;cases&#34;:&#34;67,256&#34;,&#34;deaths&#34;:&#34;389&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;63,424&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,443&#34;,&#34;total_cases_per_1m_population&#34;:&#34;233,520&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,351&#34;,&#34;total_tests&#34;:&#34;640,085&#34;,&#34;tests_per_1m_population&#34;:&#34;2,222,440&#34;},{&#34;country_name&#34;:&#34;Fiji&#34;,&#34;cases&#34;:&#34;64,524&#34;,&#34;deaths&#34;:&#34;862&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;62,677&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;985&#34;,&#34;total_cases_per_1m_population&#34;:&#34;71,048&#34;,&#34;deaths_per_1m_population&#34;:&#34;949&#34;,&#34;total_tests&#34;:&#34;506,642&#34;,&#34;tests_per_1m_population&#34;:&#34;557,871&#34;},{&#34;country_name&#34;:&#34;Madagascar&#34;,&#34;cases&#34;:&#34;64,121&#34;,&#34;deaths&#34;:&#34;1,391&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;59,370&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;14&#34;,&#34;active_cases&#34;:&#34;3,360&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,213&#34;,&#34;deaths_per_1m_population&#34;:&#34;48&#34;,&#34;total_tests&#34;:&#34;418,849&#34;,&#34;tests_per_1m_population&#34;:&#34;14,455&#34;},{&#34;country_name&#34;:&#34;Guyana&#34;,&#34;cases&#34;:&#34;63,413&#34;,&#34;deaths&#34;:&#34;1,228&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;62,092&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;93&#34;,&#34;total_cases_per_1m_population&#34;:&#34;79,925&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,548&#34;,&#34;total_tests&#34;:&#34;590,638&#34;,&#34;tests_per_1m_population&#34;:&#34;744,436&#34;},{&#34;country_name&#34;:&#34;Sudan&#34;,&#34;cases&#34;:&#34;62,093&#34;,&#34;deaths&#34;:&#34;4,930&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,359&#34;,&#34;deaths_per_1m_population&#34;:&#34;108&#34;,&#34;total_tests&#34;:&#34;562,941&#34;,&#34;tests_per_1m_population&#34;:&#34;12,319&#34;},{&#34;country_name&#34;:&#34;New Caledonia&#34;,&#34;cases&#34;:&#34;60,457&#34;,&#34;deaths&#34;:&#34;312&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;60,064&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;81&#34;,&#34;total_cases_per_1m_population&#34;:&#34;208,148&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,074&#34;,&#34;total_tests&#34;:&#34;98,964&#34;,&#34;tests_per_1m_population&#34;:&#34;340,724&#34;},{&#34;country_name&#34;:&#34;Mauritania&#34;,&#34;cases&#34;:&#34;58,683&#34;,&#34;deaths&#34;:&#34;982&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;57,693&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8&#34;,&#34;total_cases_per_1m_population&#34;:&#34;12,050&#34;,&#34;deaths_per_1m_population&#34;:&#34;202&#34;,&#34;total_tests&#34;:&#34;799,187&#34;,&#34;tests_per_1m_population&#34;:&#34;164,099&#34;},{&#34;country_name&#34;:&#34;Bhutan&#34;,&#34;cases&#34;:&#34;57,771&#34;,&#34;deaths&#34;:&#34;20&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;53,080&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;431&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;4,671&#34;,&#34;total_cases_per_1m_population&#34;:&#34;73,412&#34;,&#34;deaths_per_1m_population&#34;:&#34;25&#34;,&#34;total_tests&#34;:&#34;2,284,301&#34;,&#34;tests_per_1m_population&#34;:&#34;2,902,749&#34;},{&#34;country_name&#34;:&#34;Belize&#34;,&#34;cases&#34;:&#34;57,419&#34;,&#34;deaths&#34;:&#34;676&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;56,534&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;209&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139,823&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,646&#34;,&#34;total_tests&#34;:&#34;534,770&#34;,&#34;tests_per_1m_population&#34;:&#34;1,302,237&#34;},{&#34;country_name&#34;:&#34;Taiwan&#34;,&#34;cases&#34;:&#34;56,468&#34;,&#34;deaths&#34;:&#34;856&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;23,729&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;5,172&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;31,883&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,363&#34;,&#34;deaths_per_1m_population&#34;:&#34;36&#34;,&#34;total_tests&#34;:&#34;14,289,370&#34;,&#34;tests_per_1m_population&#34;:&#34;598,017&#34;},{&#34;country_name&#34;:&#34;Cabo Verde&#34;,&#34;cases&#34;:&#34;56,004&#34;,&#34;deaths&#34;:&#34;401&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;55,538&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;65&#34;,&#34;total_cases_per_1m_population&#34;:&#34;98,792&#34;,&#34;deaths_per_1m_population&#34;:&#34;707&#34;,&#34;total_tests&#34;:&#34;400,982&#34;,&#34;tests_per_1m_population&#34;:&#34;707,340&#34;},{&#34;country_name&#34;:&#34;Syria&#34;,&#34;cases&#34;:&#34;55,795&#34;,&#34;deaths&#34;:&#34;3,150&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;52,090&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;555&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,054&#34;,&#34;deaths_per_1m_population&#34;:&#34;172&#34;,&#34;total_tests&#34;:&#34;146,269&#34;,&#34;tests_per_1m_population&#34;:&#34;8,007&#34;},{&#34;country_name&#34;:&#34;Gabon&#34;,&#34;cases&#34;:&#34;47,597&#34;,&#34;deaths&#34;:&#34;303&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;47,282&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;12&#34;,&#34;total_cases_per_1m_population&#34;:&#34;20,512&#34;,&#34;deaths_per_1m_population&#34;:&#34;131&#34;,&#34;total_tests&#34;:&#34;1,592,483&#34;,&#34;tests_per_1m_population&#34;:&#34;686,270&#34;},{&#34;country_name&#34;:&#34;Papua New Guinea&#34;,&#34;cases&#34;:&#34;43,732&#34;,&#34;deaths&#34;:&#34;649&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;43,025&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;58&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,726&#34;,&#34;deaths_per_1m_population&#34;:&#34;70&#34;,&#34;total_tests&#34;:&#34;249,149&#34;,&#34;tests_per_1m_population&#34;:&#34;26,927&#34;},{&#34;country_name&#34;:&#34;Seychelles&#34;,&#34;cases&#34;:&#34;42,079&#34;,&#34;deaths&#34;:&#34;165&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;41,260&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;654&#34;,&#34;total_cases_per_1m_population&#34;:&#34;423,134&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,659&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Cura u00e7ao&#34;,&#34;cases&#34;:&#34;41,966&#34;,&#34;deaths&#34;:&#34;273&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;41,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;442&#34;,&#34;total_cases_per_1m_population&#34;:&#34;253,872&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,652&#34;,&#34;total_tests&#34;:&#34;496,693&#34;,&#34;tests_per_1m_population&#34;:&#34;3,004,725&#34;},{&#34;country_name&#34;:&#34;Andorra&#34;,&#34;cases&#34;:&#34;41,013&#34;,&#34;deaths&#34;:&#34;153&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;40,343&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;14&#34;,&#34;active_cases&#34;:&#34;517&#34;,&#34;total_cases_per_1m_population&#34;:&#34;529,282&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,974&#34;,&#34;total_tests&#34;:&#34;249,838&#34;,&#34;tests_per_1m_population&#34;:&#34;3,224,215&#34;},{&#34;country_name&#34;:&#34;Burundi&#34;,&#34;cases&#34;:&#34;38,887&#34;,&#34;deaths&#34;:&#34;38&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;773&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;38,076&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,104&#34;,&#34;deaths_per_1m_population&#34;:&#34;3&#34;,&#34;total_tests&#34;:&#34;345,742&#34;,&#34;tests_per_1m_population&#34;:&#34;27,594&#34;},{&#34;country_name&#34;:&#34;Mauritius&#34;,&#34;cases&#34;:&#34;37,656&#34;,&#34;deaths&#34;:&#34;990&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;35,656&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,010&#34;,&#34;total_cases_per_1m_population&#34;:&#34;29,521&#34;,&#34;deaths_per_1m_population&#34;:&#34;776&#34;,&#34;total_tests&#34;:&#34;358,675&#34;,&#34;tests_per_1m_population&#34;:&#34;281,186&#34;},{&#34;country_name&#34;:&#34;Mayotte&#34;,&#34;cases&#34;:&#34;37,038&#34;,&#34;deaths&#34;:&#34;187&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,964&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;33,887&#34;,&#34;total_cases_per_1m_population&#34;:&#34;130,099&#34;,&#34;deaths_per_1m_population&#34;:&#34;657&#34;,&#34;total_tests&#34;:&#34;176,919&#34;,&#34;tests_per_1m_population&#34;:&#34;621,442&#34;},{&#34;country_name&#34;:&#34;Togo&#34;,&#34;cases&#34;:&#34;36,977&#34;,&#34;deaths&#34;:&#34;273&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;36,679&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;25&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,285&#34;,&#34;deaths_per_1m_population&#34;:&#34;32&#34;,&#34;total_tests&#34;:&#34;727,740&#34;,&#34;tests_per_1m_population&#34;:&#34;84,338&#34;},{&#34;country_name&#34;:&#34;Guinea&#34;,&#34;cases&#34;:&#34;36,459&#34;,&#34;deaths&#34;:&#34;440&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;35,976&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;43&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,647&#34;,&#34;deaths_per_1m_population&#34;:&#34;32&#34;,&#34;total_tests&#34;:&#34;660,107&#34;,&#34;tests_per_1m_population&#34;:&#34;47,919&#34;},{&#34;country_name&#34;:&#34;Faeroe Islands&#34;,&#34;cases&#34;:&#34;34,658&#34;,&#34;deaths&#34;:&#34;28&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,693&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;26,937&#34;,&#34;total_cases_per_1m_population&#34;:&#34;704,460&#34;,&#34;deaths_per_1m_population&#34;:&#34;569&#34;,&#34;total_tests&#34;:&#34;778,000&#34;,&#34;tests_per_1m_population&#34;:&#34;15,813,651&#34;},{&#34;country_name&#34;:&#34;Aruba&#34;,&#34;cases&#34;:&#34;34,589&#34;,&#34;deaths&#34;:&#34;212&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;34,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;126&#34;,&#34;total_cases_per_1m_population&#34;:&#34;321,507&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,971&#34;,&#34;total_tests&#34;:&#34;177,885&#34;,&#34;tests_per_1m_population&#34;:&#34;1,653,452&#34;},{&#34;country_name&#34;:&#34;Tanzania&#34;,&#34;cases&#34;:&#34;33,864&#34;,&#34;deaths&#34;:&#34;803&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;539&#34;,&#34;deaths_per_1m_population&#34;:&#34;13&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Bahamas&#34;,&#34;cases&#34;:&#34;33,463&#34;,&#34;deaths&#34;:&#34;789&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;32,310&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;83,652&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,972&#34;,&#34;total_tests&#34;:&#34;229,817&#34;,&#34;tests_per_1m_population&#34;:&#34;574,504&#34;},{&#34;country_name&#34;:&#34;Lesotho&#34;,&#34;cases&#34;:&#34;32,910&#34;,&#34;deaths&#34;:&#34;697&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;24,155&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8,058&#34;,&#34;total_cases_per_1m_population&#34;:&#34;15,146&#34;,&#34;deaths_per_1m_population&#34;:&#34;321&#34;,&#34;total_tests&#34;:&#34;431,221&#34;,&#34;tests_per_1m_population&#34;:&#34;198,454&#34;},{&#34;country_name&#34;:&#34;Mali&#34;,&#34;cases&#34;:&#34;30,727&#34;,&#34;deaths&#34;:&#34;731&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,795&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;201&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,442&#34;,&#34;deaths_per_1m_population&#34;:&#34;34&#34;,&#34;total_tests&#34;:&#34;663,805&#34;,&#34;tests_per_1m_population&#34;:&#34;31,160&#34;},{&#34;country_name&#34;:&#34;Haiti&#34;,&#34;cases&#34;:&#34;30,640&#34;,&#34;deaths&#34;:&#34;835&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,389&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;416&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,629&#34;,&#34;deaths_per_1m_population&#34;:&#34;72&#34;,&#34;total_tests&#34;:&#34;132,422&#34;,&#34;tests_per_1m_population&#34;:&#34;11,363&#34;},{&#34;country_name&#34;:&#34;Isle of Man&#34;,&#34;cases&#34;:&#34;28,416&#34;,&#34;deaths&#34;:&#34;87&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;26,794&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,535&#34;,&#34;total_cases_per_1m_population&#34;:&#34;331,015&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,013&#34;,&#34;total_tests&#34;:&#34;150,753&#34;,&#34;tests_per_1m_population&#34;:&#34;1,756,107&#34;},{&#34;country_name&#34;:&#34;Benin&#34;,&#34;cases&#34;:&#34;26,952&#34;,&#34;deaths&#34;:&#34;163&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;25,506&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;1,283&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,123&#34;,&#34;deaths_per_1m_population&#34;:&#34;13&#34;,&#34;total_tests&#34;:&#34;604,310&#34;,&#34;tests_per_1m_population&#34;:&#34;47,598&#34;},{&#34;country_name&#34;:&#34;Somalia&#34;,&#34;cases&#34;:&#34;26,485&#34;,&#34;deaths&#34;:&#34;1,350&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,182&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;11,953&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,587&#34;,&#34;deaths_per_1m_population&#34;:&#34;81&#34;,&#34;total_tests&#34;:&#34;400,466&#34;,&#34;tests_per_1m_population&#34;:&#34;23,990&#34;},{&#34;country_name&#34;:&#34;Congo&#34;,&#34;cases&#34;:&#34;24,079&#34;,&#34;deaths&#34;:&#34;385&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,178&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,516&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,178&#34;,&#34;deaths_per_1m_population&#34;:&#34;67&#34;,&#34;total_tests&#34;:&#34;347,815&#34;,&#34;tests_per_1m_population&#34;:&#34;60,352&#34;},{&#34;country_name&#34;:&#34;Saint Lucia&#34;,&#34;cases&#34;:&#34;23,239&#34;,&#34;deaths&#34;:&#34;368&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;22,736&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;135&#34;,&#34;total_cases_per_1m_population&#34;:&#34;125,520&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,988&#34;,&#34;total_tests&#34;:&#34;142,630&#34;,&#34;tests_per_1m_population&#34;:&#34;770,382&#34;},{&#34;country_name&#34;:&#34;Timor-Leste&#34;,&#34;cases&#34;:&#34;22,860&#34;,&#34;deaths&#34;:&#34;130&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;22,714&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;16&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,762&#34;,&#34;deaths_per_1m_population&#34;:&#34;95&#34;,&#34;total_tests&#34;:&#34;261,007&#34;,&#34;tests_per_1m_population&#34;:&#34;191,388&#34;},{&#34;country_name&#34;:&#34;Cayman Islands&#34;,&#34;cases&#34;:&#34;21,755&#34;,&#34;deaths&#34;:&#34;26&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,553&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;13,176&#34;,&#34;total_cases_per_1m_population&#34;:&#34;324,145&#34;,&#34;deaths_per_1m_population&#34;:&#34;387&#34;,&#34;total_tests&#34;:&#34;222,773&#34;,&#34;tests_per_1m_population&#34;:&#34;3,319,273&#34;},{&#34;country_name&#34;:&#34;Burkina Faso&#34;,&#34;cases&#34;:&#34;20,853&#34;,&#34;deaths&#34;:&#34;382&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,439&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;32&#34;,&#34;total_cases_per_1m_population&#34;:&#34;951&#34;,&#34;deaths_per_1m_population&#34;:&#34;17&#34;,&#34;total_tests&#34;:&#34;248,995&#34;,&#34;tests_per_1m_population&#34;:&#34;11,350&#34;},{&#34;country_name&#34;:&#34;Nicaragua&#34;,&#34;cases&#34;:&#34;18,491&#34;,&#34;deaths&#34;:&#34;225&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,225&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;14,041&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,733&#34;,&#34;deaths_per_1m_population&#34;:&#34;33&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Gibraltar&#34;,&#34;cases&#34;:&#34;17,706&#34;,&#34;deaths&#34;:&#34;102&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;16,579&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,025&#34;,&#34;total_cases_per_1m_population&#34;:&#34;525,822&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,029&#34;,&#34;total_tests&#34;:&#34;534,283&#34;,&#34;tests_per_1m_population&#34;:&#34;15,866,807&#34;},{&#34;country_name&#34;:&#34;South Sudan&#34;,&#34;cases&#34;:&#34;17,422&#34;,&#34;deaths&#34;:&#34;138&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,514&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;3,770&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,524&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;376,391&#34;,&#34;tests_per_1m_population&#34;:&#34;32,928&#34;},{&#34;country_name&#34;:&#34;Tajikistan&#34;,&#34;cases&#34;:&#34;17,388&#34;,&#34;deaths&#34;:&#34;124&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;17,264&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,752&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Liechtenstein&#34;,&#34;cases&#34;:&#34;17,103&#34;,&#34;deaths&#34;:&#34;85&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;16,831&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;12&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;187&#34;,&#34;total_cases_per_1m_population&#34;:&#34;446,251&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,218&#34;,&#34;total_tests&#34;:&#34;102,174&#34;,&#34;tests_per_1m_population&#34;:&#34;2,665,919&#34;},{&#34;country_name&#34;:&#34;San Marino&#34;,&#34;cases&#34;:&#34;16,140&#34;,&#34;deaths&#34;:&#34;114&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;473,870&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,347&#34;,&#34;total_tests&#34;:&#34;149,271&#34;,&#34;tests_per_1m_population&#34;:&#34;4,382,590&#34;},{&#34;country_name&#34;:&#34;Equatorial Guinea&#34;,&#34;cases&#34;:&#34;15,907&#34;,&#34;deaths&#34;:&#34;183&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,698&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;26&#34;,&#34;total_cases_per_1m_population&#34;:&#34;10,704&#34;,&#34;deaths_per_1m_population&#34;:&#34;123&#34;,&#34;total_tests&#34;:&#34;310,972&#34;,&#34;tests_per_1m_population&#34;:&#34;209,251&#34;},{&#34;country_name&#34;:&#34;Djibouti&#34;,&#34;cases&#34;:&#34;15,611&#34;,&#34;deaths&#34;:&#34;189&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,411&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;11&#34;,&#34;total_cases_per_1m_population&#34;:&#34;15,396&#34;,&#34;deaths_per_1m_population&#34;:&#34;186&#34;,&#34;total_tests&#34;:&#34;303,924&#34;,&#34;tests_per_1m_population&#34;:&#34;299,748&#34;},{&#34;country_name&#34;:&#34;CAR&#34;,&#34;cases&#34;:&#34;14,649&#34;,&#34;deaths&#34;:&#34;113&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,859&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;7,677&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,941&#34;,&#34;deaths_per_1m_population&#34;:&#34;23&#34;,&#34;total_tests&#34;:&#34;81,294&#34;,&#34;tests_per_1m_population&#34;:&#34;16,320&#34;},{&#34;country_name&#34;:&#34;Grenada&#34;,&#34;cases&#34;:&#34;14,428&#34;,&#34;deaths&#34;:&#34;220&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,945&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;263&#34;,&#34;total_cases_per_1m_population&#34;:&#34;127,159&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,939&#34;,&#34;total_tests&#34;:&#34;148,567&#34;,&#34;tests_per_1m_population&#34;:&#34;1,309,376&#34;},{&#34;country_name&#34;:&#34;Bermuda&#34;,&#34;cases&#34;:&#34;13,143&#34;,&#34;deaths&#34;:&#34;131&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;12,719&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;293&#34;,&#34;total_cases_per_1m_population&#34;:&#34;212,453&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,118&#34;,&#34;total_tests&#34;:&#34;866,313&#34;,&#34;tests_per_1m_population&#34;:&#34;14,003,734&#34;},{&#34;country_name&#34;:&#34;Solomon Islands&#34;,&#34;cases&#34;:&#34;12,437&#34;,&#34;deaths&#34;:&#34;139&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,194&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,104&#34;,&#34;total_cases_per_1m_population&#34;:&#34;17,339&#34;,&#34;deaths_per_1m_population&#34;:&#34;194&#34;,&#34;total_tests&#34;:&#34;5,117&#34;,&#34;tests_per_1m_population&#34;:&#34;7,134&#34;},{&#34;country_name&#34;:&#34;Dominica&#34;,&#34;cases&#34;:&#34;12,011&#34;,&#34;deaths&#34;:&#34;63&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,926&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;22&#34;,&#34;total_cases_per_1m_population&#34;:&#34;166,107&#34;,&#34;deaths_per_1m_population&#34;:&#34;871&#34;,&#34;total_tests&#34;:&#34;187,690&#34;,&#34;tests_per_1m_population&#34;:&#34;2,595,666&#34;},{&#34;country_name&#34;:&#34;Gambia&#34;,&#34;cases&#34;:&#34;11,995&#34;,&#34;deaths&#34;:&#34;365&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,591&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;39&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,724&#34;,&#34;deaths_per_1m_population&#34;:&#34;144&#34;,&#34;total_tests&#34;:&#34;155,686&#34;,&#34;tests_per_1m_population&#34;:&#34;61,314&#34;},{&#34;country_name&#34;:&#34;Greenland&#34;,&#34;cases&#34;:&#34;11,971&#34;,&#34;deaths&#34;:&#34;21&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,761&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;9,189&#34;,&#34;total_cases_per_1m_population&#34;:&#34;210,209&#34;,&#34;deaths_per_1m_population&#34;:&#34;369&#34;,&#34;total_tests&#34;:&#34;164,926&#34;,&#34;tests_per_1m_population&#34;:&#34;2,896,081&#34;},{&#34;country_name&#34;:&#34;Yemen&#34;,&#34;cases&#34;:&#34;11,818&#34;,&#34;deaths&#34;:&#34;2,148&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,001&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;669&#34;,&#34;total_cases_per_1m_population&#34;:&#34;381&#34;,&#34;deaths_per_1m_population&#34;:&#34;69&#34;,&#34;total_tests&#34;:&#34;265,253&#34;,&#34;tests_per_1m_population&#34;:&#34;8,553&#34;},{&#34;country_name&#34;:&#34;Monaco&#34;,&#34;cases&#34;:&#34;11,604&#34;,&#34;deaths&#34;:&#34;54&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,362&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;188&#34;,&#34;total_cases_per_1m_population&#34;:&#34;291,969&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,359&#34;,&#34;total_tests&#34;:&#34;54,960&#34;,&#34;tests_per_1m_population&#34;:&#34;1,382,850&#34;},{&#34;country_name&#34;:&#34;Saint Martin&#34;,&#34;cases&#34;:&#34;10,279&#34;,&#34;deaths&#34;:&#34;63&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,399&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;8,817&#34;,&#34;total_cases_per_1m_population&#34;:&#34;257,903&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,581&#34;,&#34;total_tests&#34;:&#34;112,382&#34;,&#34;tests_per_1m_population&#34;:&#34;2,819,701&#34;},{&#34;country_name&#34;:&#34;Sint Maarten&#34;,&#34;cases&#34;:&#34;9,990&#34;,&#34;deaths&#34;:&#34;86&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,841&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;10&#34;,&#34;active_cases&#34;:&#34;63&#34;,&#34;total_cases_per_1m_population&#34;:&#34;228,317&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,965&#34;,&#34;total_tests&#34;:&#34;62,056&#34;,&#34;tests_per_1m_population&#34;:&#34;1,418,261&#34;},{&#34;country_name&#34;:&#34;Eritrea&#34;,&#34;cases&#34;:&#34;9,733&#34;,&#34;deaths&#34;:&#34;103&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,629&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,678&#34;,&#34;deaths_per_1m_population&#34;:&#34;28&#34;,&#34;total_tests&#34;:&#34;23,693&#34;,&#34;tests_per_1m_population&#34;:&#34;6,518&#34;},{&#34;country_name&#34;:&#34;Caribbean Netherlands&#34;,&#34;cases&#34;:&#34;9,592&#34;,&#34;deaths&#34;:&#34;34&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,392&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;166&#34;,&#34;total_cases_per_1m_population&#34;:&#34;359,749&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,275&#34;,&#34;total_tests&#34;:&#34;30,126&#34;,&#34;tests_per_1m_population&#34;:&#34;1,129,880&#34;},{&#34;country_name&#34;:&#34;Tonga&#34;,&#34;cases&#34;:&#34;9,553&#34;,&#34;deaths&#34;:&#34;11&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,306&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,236&#34;,&#34;total_cases_per_1m_population&#34;:&#34;88,571&#34;,&#34;deaths_per_1m_population&#34;:&#34;102&#34;,&#34;total_tests&#34;:&#34;408,213&#34;,&#34;tests_per_1m_population&#34;:&#34;3,784,761&#34;},{&#34;country_name&#34;:&#34;Niger&#34;,&#34;cases&#34;:&#34;8,914&#34;,&#34;deaths&#34;:&#34;309&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,507&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;98&#34;,&#34;total_cases_per_1m_population&#34;:&#34;346&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;249,026&#34;,&#34;tests_per_1m_population&#34;:&#34;9,657&#34;},{&#34;country_name&#34;:&#34;Guinea-Bissau&#34;,&#34;cases&#34;:&#34;8,185&#34;,&#34;deaths&#34;:&#34;171&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,515&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;499&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,989&#34;,&#34;deaths_per_1m_population&#34;:&#34;83&#34;,&#34;total_tests&#34;:&#34;132,611&#34;,&#34;tests_per_1m_population&#34;:&#34;64,628&#34;},{&#34;country_name&#34;:&#34;Comoros&#34;,&#34;cases&#34;:&#34;8,100&#34;,&#34;deaths&#34;:&#34;160&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,933&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;7&#34;,&#34;total_cases_per_1m_population&#34;:&#34;8,970&#34;,&#34;deaths_per_1m_population&#34;:&#34;177&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Sierra Leone&#34;,&#34;cases&#34;:&#34;7,681&#34;,&#34;deaths&#34;:&#34;125&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;929&#34;,&#34;deaths_per_1m_population&#34;:&#34;15&#34;,&#34;total_tests&#34;:&#34;259,958&#34;,&#34;tests_per_1m_population&#34;:&#34;31,435&#34;},{&#34;country_name&#34;:&#34;Antigua and Barbuda&#34;,&#34;cases&#34;:&#34;7,571&#34;,&#34;deaths&#34;:&#34;135&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,402&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;34&#34;,&#34;total_cases_per_1m_population&#34;:&#34;76,172&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,358&#34;,&#34;total_tests&#34;:&#34;18,901&#34;,&#34;tests_per_1m_population&#34;:&#34;190,164&#34;},{&#34;country_name&#34;:&#34;Liberia&#34;,&#34;cases&#34;:&#34;7,432&#34;,&#34;deaths&#34;:&#34;294&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,747&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,391&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,410&#34;,&#34;deaths_per_1m_population&#34;:&#34;56&#34;,&#34;total_tests&#34;:&#34;139,824&#34;,&#34;tests_per_1m_population&#34;:&#34;26,521&#34;},{&#34;country_name&#34;:&#34;Chad&#34;,&#34;cases&#34;:&#34;7,396&#34;,&#34;deaths&#34;:&#34;193&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,874&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;2,329&#34;,&#34;total_cases_per_1m_population&#34;:&#34;428&#34;,&#34;deaths_per_1m_population&#34;:&#34;11&#34;,&#34;total_tests&#34;:&#34;191,341&#34;,&#34;tests_per_1m_population&#34;:&#34;11,075&#34;},{&#34;country_name&#34;:&#34;Samoa&#34;,&#34;cases&#34;:&#34;7,185&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,605&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;5,567&#34;,&#34;total_cases_per_1m_population&#34;:&#34;35,783&#34;,&#34;deaths_per_1m_population&#34;:&#34;65&#34;,&#34;total_tests&#34;:&#34;53,893&#34;,&#34;tests_per_1m_population&#34;:&#34;268,399&#34;},{&#34;country_name&#34;:&#34;Vanuatu&#34;,&#34;cases&#34;:&#34;6,793&#34;,&#34;deaths&#34;:&#34;12&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,991&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;790&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,222&#34;,&#34;deaths_per_1m_population&#34;:&#34;37&#34;,&#34;total_tests&#34;:&#34;24,976&#34;,&#34;tests_per_1m_population&#34;:&#34;78,027&#34;},{&#34;country_name&#34;:&#34;St. Vincent Grenadines&#34;,&#34;cases&#34;:&#34;6,779&#34;,&#34;deaths&#34;:&#34;106&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,641&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;32&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,757&#34;,&#34;deaths_per_1m_population&#34;:&#34;950&#34;,&#34;total_tests&#34;:&#34;98,860&#34;,&#34;tests_per_1m_population&#34;:&#34;886,033&#34;},{&#34;country_name&#34;:&#34;British Virgin Islands&#34;,&#34;cases&#34;:&#34;6,296&#34;,&#34;deaths&#34;:&#34;62&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;205,792&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,027&#34;,&#34;total_tests&#34;:&#34;102,862&#34;,&#34;tests_per_1m_population&#34;:&#34;3,362,163&#34;},{&#34;country_name&#34;:&#34;Sao Tome and Principe&#34;,&#34;cases&#34;:&#34;5,953&#34;,&#34;deaths&#34;:&#34;73&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,875&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;5&#34;,&#34;total_cases_per_1m_population&#34;:&#34;26,282&#34;,&#34;deaths_per_1m_population&#34;:&#34;322&#34;,&#34;total_tests&#34;:&#34;29,036&#34;,&#34;tests_per_1m_population&#34;:&#34;128,193&#34;},{&#34;country_name&#34;:&#34;Turks and Caicos&#34;,&#34;cases&#34;:&#34;5,941&#34;,&#34;deaths&#34;:&#34;36&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,862&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;43&#34;,&#34;total_cases_per_1m_population&#34;:&#34;149,791&#34;,&#34;deaths_per_1m_population&#34;:&#34;908&#34;,&#34;total_tests&#34;:&#34;478,593&#34;,&#34;tests_per_1m_population&#34;:&#34;12,066,789&#34;},{&#34;country_name&#34;:&#34;Saint Kitts and Nevis&#34;,&#34;cases&#34;:&#34;5,561&#34;,&#34;deaths&#34;:&#34;43&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,517&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;103,215&#34;,&#34;deaths_per_1m_population&#34;:&#34;798&#34;,&#34;total_tests&#34;:&#34;65,141&#34;,&#34;tests_per_1m_population&#34;:&#34;1,209,046&#34;},{&#34;country_name&#34;:&#34;Cook Islands&#34;,&#34;cases&#34;:&#34;4,727&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,990&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;737&#34;,&#34;total_cases_per_1m_population&#34;:&#34;268,686&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;15,740&#34;,&#34;tests_per_1m_population&#34;:&#34;894,674&#34;},{&#34;country_name&#34;:&#34;St. Barth&#34;,&#34;cases&#34;:&#34;4,432&#34;,&#34;deaths&#34;:&#34;6&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;446,279&#34;,&#34;deaths_per_1m_population&#34;:&#34;604&#34;,&#34;total_tests&#34;:&#34;78,646&#34;,&#34;tests_per_1m_population&#34;:&#34;7,919,243&#34;},{&#34;country_name&#34;:&#34;Palau&#34;,&#34;cases&#34;:&#34;4,396&#34;,&#34;deaths&#34;:&#34;6&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,879&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;511&#34;,&#34;total_cases_per_1m_population&#34;:&#34;240,877&#34;,&#34;deaths_per_1m_population&#34;:&#34;329&#34;,&#34;total_tests&#34;:&#34;45,500&#34;,&#34;tests_per_1m_population&#34;:&#34;2,493,151&#34;},{&#34;country_name&#34;:&#34;Kiribati&#34;,&#34;cases&#34;:&#34;3,076&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,597&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;466&#34;,&#34;total_cases_per_1m_population&#34;:&#34;25,058&#34;,&#34;deaths_per_1m_population&#34;:&#34;106&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Anguilla&#34;,&#34;cases&#34;:&#34;2,731&#34;,&#34;deaths&#34;:&#34;9&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,716&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;6&#34;,&#34;total_cases_per_1m_population&#34;:&#34;179,141&#34;,&#34;deaths_per_1m_population&#34;:&#34;590&#34;,&#34;total_tests&#34;:&#34;51,382&#34;,&#34;tests_per_1m_population&#34;:&#34;3,370,417&#34;},{&#34;country_name&#34;:&#34;Saint Pierre Miquelon&#34;,&#34;cases&#34;:&#34;2,641&#34;,&#34;deaths&#34;:&#34;1&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,449&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;191&#34;,&#34;total_cases_per_1m_population&#34;:&#34;459,864&#34;,&#34;deaths_per_1m_population&#34;:&#34;174&#34;,&#34;total_tests&#34;:&#34;22,941&#34;,&#34;tests_per_1m_population&#34;:&#34;3,994,602&#34;},{&#34;country_name&#34;:&#34;Diamond Princess&#34;,&#34;cases&#34;:&#34;712&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;699&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;0&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Wallis and Futuna&#34;,&#34;cases&#34;:&#34;454&#34;,&#34;deaths&#34;:&#34;7&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;438&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;9&#34;,&#34;total_cases_per_1m_population&#34;:&#34;41,713&#34;,&#34;deaths_per_1m_population&#34;:&#34;643&#34;,&#34;total_tests&#34;:&#34;20,508&#34;,&#34;tests_per_1m_population&#34;:&#34;1,884,234&#34;},{&#34;country_name&#34;:&#34;Montserrat&#34;,&#34;cases&#34;:&#34;183&#34;,&#34;deaths&#34;:&#34;2&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;174&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;7&#34;,&#34;total_cases_per_1m_population&#34;:&#34;36,622&#34;,&#34;deaths_per_1m_population&#34;:&#34;400&#34;,&#34;total_tests&#34;:&#34;9,700&#34;,&#34;tests_per_1m_population&#34;:&#34;1,941,165&#34;},{&#34;country_name&#34;:&#34;Falkland Islands&#34;,&#34;cases&#34;:&#34;128&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;34,944&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;8,632&#34;,&#34;tests_per_1m_population&#34;:&#34;2,356,538&#34;},{&#34;country_name&#34;:&#34;Macao&#34;,&#34;cases&#34;:&#34;82&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;82&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;123&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;5,375&#34;,&#34;tests_per_1m_population&#34;:&#34;8,079&#34;},{&#34;country_name&#34;:&#34;Vatican City&#34;,&#34;cases&#34;:&#34;29&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;36,025&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Marshall Islands&#34;,&#34;cases&#34;:&#34;15&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8&#34;,&#34;total_cases_per_1m_population&#34;:&#34;250&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Western Sahara&#34;,&#34;cases&#34;:&#34;10&#34;,&#34;deaths&#34;:&#34;1&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16&#34;,&#34;deaths_per_1m_population&#34;:&#34;2&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;MS Zaandam&#34;,&#34;cases&#34;:&#34;9&#34;,&#34;deaths&#34;:&#34;2&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;0&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Niue&#34;,&#34;cases&#34;:&#34;8&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,860&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Nauru&#34;,&#34;cases&#34;:&#34;3&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;274&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Saint Helena&#34;,&#34;cases&#34;:&#34;2&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;327&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Micronesia&#34;,&#34;cases&#34;:&#34;1&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;9&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;}],&#34;statistic_taken_at&#34;:&#34;2022-04-24 11:18:01&#34;,&#34;world_total&#34;:{&#34;total_cases&#34;:&#34;509,268,964&#34;,&#34;new_cases&#34;:&#34;204,268&#34;,&#34;total_deaths&#34;:&#34;6,242,509&#34;,&#34;new_deaths&#34;:&#34;630&#34;,&#34;total_recovered&#34;:&#34;461,827,849&#34;,&#34;active_cases&#34;:&#34;41,198,606&#34;,&#34;serious_critical&#34;:&#34;42,510&#34;,&#34;total_cases_per_1m_population&#34;:&#34;65,334&#34;,&#34;deaths_per_1m_population&#34;:&#34;800.9&#34;,&#34;statistic_taken_at&#34;:&#34;2022-04-24 11:18:01&#34;}} . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . import requests url = &quot;https://api-basketball.p.rapidapi.com/leagues&quot; querystring = {&quot;search&quot;:&quot;nba&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;0bde326e5amsh275ea78168cb1c5p1be85bjsn66111b219215&quot;, &quot;X-RapidAPI-Host&quot;: &quot;api-basketball.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;get&#34;:&#34;leagues&#34;,&#34;parameters&#34;:{&#34;search&#34;:&#34;nba&#34;},&#34;errors&#34;:[],&#34;results&#34;:8,&#34;response&#34;:[{&#34;id&#34;:12,&#34;name&#34;:&#34;NBA&#34;,&#34;type&#34;:&#34;League&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /12.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:&#34;2015-2016&#34;,&#34;start&#34;:&#34;2015-10-03&#34;,&#34;end&#34;:&#34;2016-06-20&#34;},{&#34;season&#34;:&#34;2014-2015&#34;,&#34;start&#34;:&#34;2014-10-04&#34;,&#34;end&#34;:&#34;2015-06-17&#34;},{&#34;season&#34;:&#34;2021-2022&#34;,&#34;start&#34;:&#34;2021-10-03&#34;,&#34;end&#34;:&#34;2022-06-17&#34;},{&#34;season&#34;:&#34;2013-2014&#34;,&#34;start&#34;:&#34;2013-10-05&#34;,&#34;end&#34;:&#34;2014-06-16&#34;},{&#34;season&#34;:&#34;2008-2009&#34;,&#34;start&#34;:&#34;2008-10-09&#34;,&#34;end&#34;:&#34;2009-06-15&#34;},{&#34;season&#34;:&#34;2009-2010&#34;,&#34;start&#34;:&#34;2009-10-09&#34;,&#34;end&#34;:&#34;2010-06-18&#34;},{&#34;season&#34;:&#34;2010-2011&#34;,&#34;start&#34;:&#34;2010-10-04&#34;,&#34;end&#34;:&#34;2011-06-13&#34;},{&#34;season&#34;:&#34;2016-2017&#34;,&#34;start&#34;:&#34;2016-10-01&#34;,&#34;end&#34;:&#34;2017-06-13&#34;},{&#34;season&#34;:&#34;2017-2018&#34;,&#34;start&#34;:&#34;2017-10-01&#34;,&#34;end&#34;:&#34;2018-06-09&#34;},{&#34;season&#34;:&#34;2018-2019&#34;,&#34;start&#34;:&#34;2018-09-28&#34;,&#34;end&#34;:&#34;2019-05-24&#34;},{&#34;season&#34;:&#34;2019-2020&#34;,&#34;start&#34;:&#34;2019-10-04&#34;,&#34;end&#34;:&#34;2020-10-11&#34;},{&#34;season&#34;:&#34;2020-2021&#34;,&#34;start&#34;:&#34;2020-12-12&#34;,&#34;end&#34;:&#34;2021-07-21&#34;},{&#34;season&#34;:&#34;2011-2012&#34;,&#34;start&#34;:&#34;2011-12-17&#34;,&#34;end&#34;:&#34;2012-06-22&#34;},{&#34;season&#34;:&#34;2022-2023&#34;,&#34;start&#34;:&#34;2022-09-30&#34;,&#34;end&#34;:&#34;2023-04-09&#34;},{&#34;season&#34;:&#34;2012-2013&#34;,&#34;start&#34;:&#34;2012-10-07&#34;,&#34;end&#34;:&#34;2013-06-21&#34;}]},{&#34;id&#34;:20,&#34;name&#34;:&#34;NBA - G League&#34;,&#34;type&#34;:&#34;League&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /20.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:&#34;2012-2013&#34;,&#34;start&#34;:&#34;2012-11-24&#34;,&#34;end&#34;:&#34;2013-04-28&#34;},{&#34;season&#34;:&#34;2015-2016&#34;,&#34;start&#34;:&#34;2015-11-13&#34;,&#34;end&#34;:&#34;2016-04-28&#34;},{&#34;season&#34;:&#34;2014-2015&#34;,&#34;start&#34;:&#34;2014-11-15&#34;,&#34;end&#34;:&#34;2015-04-26&#34;},{&#34;season&#34;:&#34;2013-2014&#34;,&#34;start&#34;:&#34;2013-11-23&#34;,&#34;end&#34;:&#34;2014-04-26&#34;},{&#34;season&#34;:&#34;2016-2017&#34;,&#34;start&#34;:&#34;2016-11-12&#34;,&#34;end&#34;:&#34;2017-04-27&#34;},{&#34;season&#34;:&#34;2017-2018&#34;,&#34;start&#34;:&#34;2017-11-03&#34;,&#34;end&#34;:&#34;2018-04-11&#34;},{&#34;season&#34;:&#34;2018-2019&#34;,&#34;start&#34;:&#34;2018-11-02&#34;,&#34;end&#34;:&#34;2019-04-13&#34;},{&#34;season&#34;:&#34;2019-2020&#34;,&#34;start&#34;:&#34;2019-11-09&#34;,&#34;end&#34;:&#34;2020-03-29&#34;},{&#34;season&#34;:&#34;2020-2021&#34;,&#34;start&#34;:&#34;2021-02-10&#34;,&#34;end&#34;:&#34;2021-03-11&#34;},{&#34;season&#34;:&#34;2021-2022&#34;,&#34;start&#34;:&#34;2021-12-27&#34;,&#34;end&#34;:&#34;2022-04-18&#34;},{&#34;season&#34;:&#34;2022-2023&#34;,&#34;start&#34;:&#34;2022-11-03&#34;,&#34;end&#34;:&#34;2023-03-22&#34;}]},{&#34;id&#34;:17,&#34;name&#34;:&#34;NBA - Las Vegas Summer League&#34;,&#34;type&#34;:&#34;League&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /17.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:2022,&#34;start&#34;:&#34;2022-07-08&#34;,&#34;end&#34;:&#34;2022-07-18&#34;},{&#34;season&#34;:2021,&#34;start&#34;:&#34;2021-08-08&#34;,&#34;end&#34;:&#34;2021-08-18&#34;},{&#34;season&#34;:2016,&#34;start&#34;:&#34;2016-07-08&#34;,&#34;end&#34;:&#34;2016-07-19&#34;},{&#34;season&#34;:2017,&#34;start&#34;:&#34;2017-07-07&#34;,&#34;end&#34;:&#34;2017-07-18&#34;},{&#34;season&#34;:2018,&#34;start&#34;:&#34;2018-07-06&#34;,&#34;end&#34;:&#34;2018-07-18&#34;},{&#34;season&#34;:2015,&#34;start&#34;:&#34;2015-07-10&#34;,&#34;end&#34;:&#34;2015-07-21&#34;},{&#34;season&#34;:2014,&#34;start&#34;:&#34;2014-07-11&#34;,&#34;end&#34;:&#34;2014-07-22&#34;},{&#34;season&#34;:2013,&#34;start&#34;:&#34;2013-07-12&#34;,&#34;end&#34;:&#34;2013-07-23&#34;},{&#34;season&#34;:2019,&#34;start&#34;:&#34;2019-07-05&#34;,&#34;end&#34;:&#34;2019-07-16&#34;}]},{&#34;id&#34;:21,&#34;name&#34;:&#34;NBA - Sacramento Summer League&#34;,&#34;type&#34;:&#34;League&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /21.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:2021,&#34;start&#34;:&#34;2021-08-04&#34;,&#34;end&#34;:&#34;2021-08-05&#34;},{&#34;season&#34;:2018,&#34;start&#34;:&#34;2018-07-03&#34;,&#34;end&#34;:&#34;2018-07-05&#34;},{&#34;season&#34;:2019,&#34;start&#34;:&#34;2019-07-02&#34;,&#34;end&#34;:&#34;2019-07-03&#34;}]},{&#34;id&#34;:19,&#34;name&#34;:&#34;NBA - Utah Summer League&#34;,&#34;type&#34;:&#34;League&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /19.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:2019,&#34;start&#34;:&#34;2019-07-01&#34;,&#34;end&#34;:&#34;2019-07-04&#34;},{&#34;season&#34;:2015,&#34;start&#34;:&#34;2015-07-06&#34;,&#34;end&#34;:&#34;2015-07-10&#34;},{&#34;season&#34;:2016,&#34;start&#34;:&#34;2016-07-04&#34;,&#34;end&#34;:&#34;2016-07-08&#34;},{&#34;season&#34;:2017,&#34;start&#34;:&#34;2017-07-03&#34;,&#34;end&#34;:&#34;2017-07-07&#34;},{&#34;season&#34;:2018,&#34;start&#34;:&#34;2018-07-02&#34;,&#34;end&#34;:&#34;2018-07-06&#34;}]},{&#34;id&#34;:176,&#34;name&#34;:&#34;NBA Orlando Summer League&#34;,&#34;type&#34;:&#34;cup&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /176.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:2013,&#34;start&#34;:&#34;2013-07-07&#34;,&#34;end&#34;:&#34;2013-07-12&#34;},{&#34;season&#34;:2014,&#34;start&#34;:&#34;2014-07-05&#34;,&#34;end&#34;:&#34;2014-07-11&#34;},{&#34;season&#34;:2015,&#34;start&#34;:&#34;2015-07-04&#34;,&#34;end&#34;:&#34;2015-07-10&#34;},{&#34;season&#34;:2016,&#34;start&#34;:&#34;2016-07-02&#34;,&#34;end&#34;:&#34;2016-07-08&#34;},{&#34;season&#34;:2017,&#34;start&#34;:&#34;2017-07-01&#34;,&#34;end&#34;:&#34;2017-07-06&#34;}]},{&#34;id&#34;:274,&#34;name&#34;:&#34;NBA Salt Lake City Summer League&#34;,&#34;type&#34;:&#34;League&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /274.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:2022,&#34;start&#34;:&#34;2022-07-05&#34;,&#34;end&#34;:&#34;2022-07-08&#34;},{&#34;season&#34;:2021,&#34;start&#34;:&#34;2021-08-03&#34;,&#34;end&#34;:&#34;2021-08-07&#34;}]},{&#34;id&#34;:13,&#34;name&#34;:&#34;NBA W&#34;,&#34;type&#34;:&#34;League&#34;,&#34;logo&#34;:&#34;https: / /media.api-sports.io /basketball /leagues /13.png&#34;,&#34;country&#34;:{&#34;id&#34;:5,&#34;name&#34;:&#34;USA&#34;,&#34;code&#34;:&#34;US&#34;,&#34;flag&#34;:&#34;https: / /media.api-sports.io /flags /us.svg&#34;},&#34;seasons&#34;:[{&#34;season&#34;:2010,&#34;start&#34;:&#34;2010-05-15&#34;,&#34;end&#34;:&#34;2010-09-17&#34;},{&#34;season&#34;:2011,&#34;start&#34;:&#34;2011-06-04&#34;,&#34;end&#34;:&#34;2011-10-08&#34;},{&#34;season&#34;:2009,&#34;start&#34;:&#34;2009-06-06&#34;,&#34;end&#34;:&#34;2009-10-10&#34;},{&#34;season&#34;:2008,&#34;start&#34;:&#34;2008-05-17&#34;,&#34;end&#34;:&#34;2008-10-05&#34;},{&#34;season&#34;:2019,&#34;start&#34;:&#34;2019-05-10&#34;,&#34;end&#34;:&#34;2020-10-06&#34;},{&#34;season&#34;:2012,&#34;start&#34;:&#34;2012-05-19&#34;,&#34;end&#34;:&#34;2012-10-22&#34;},{&#34;season&#34;:2013,&#34;start&#34;:&#34;2013-05-25&#34;,&#34;end&#34;:&#34;2013-10-11&#34;},{&#34;season&#34;:2014,&#34;start&#34;:&#34;2014-05-16&#34;,&#34;end&#34;:&#34;2014-09-13&#34;},{&#34;season&#34;:2015,&#34;start&#34;:&#34;2015-06-05&#34;,&#34;end&#34;:&#34;2015-10-15&#34;},{&#34;season&#34;:2018,&#34;start&#34;:&#34;2018-05-06&#34;,&#34;end&#34;:&#34;2018-09-13&#34;},{&#34;season&#34;:2017,&#34;start&#34;:&#34;2017-04-29&#34;,&#34;end&#34;:&#34;2017-10-05&#34;},{&#34;season&#34;:2016,&#34;start&#34;:&#34;2016-05-14&#34;,&#34;end&#34;:&#34;2016-10-21&#34;},{&#34;season&#34;:2021,&#34;start&#34;:&#34;2021-05-14&#34;,&#34;end&#34;:&#34;2021-10-17&#34;},{&#34;season&#34;:2022,&#34;start&#34;:&#34;2022-05-06&#34;,&#34;end&#34;:&#34;2022-09-18&#34;}]}]} . import requests url = &quot;https://api-nba-v1.p.rapidapi.com/seasons&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;0bde326e5amsh275ea78168cb1c5p1be85bjsn66111b219215&quot;, &quot;X-RapidAPI-Host&quot;: &quot;api-nba-v1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;get&#34;:&#34;seasons /&#34;,&#34;parameters&#34;:[],&#34;errors&#34;:[],&#34;results&#34;:8,&#34;response&#34;:[2015,2016,2017,2018,2019,2020,2021,2022]} . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Playing around with Java Script",
            "content": "Math.round(93.5); . 94 . const removeDuplicates = (arr) =&gt; [...new Set(arr)] removeDuplicates([31, 56, 12, 31, 45, 12, 31]) //[ 31, 56, 12, 45 ] . [ 31, 56, 12, 45 ] . const dayDif = (date1, date2) =&gt; Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000) dayDif(new Date(&quot;2022-09-30&quot;), new Date(&quot;2022-10-13&quot;)) . 13 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/30/Playing-around-Java-Script.html",
            "relUrl": "/jupyter/2022/09/30/Playing-around-Java-Script.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Playing around with Java Script",
            "content": "Math.round(93.5); . 94 . const removeDuplicates = (arr) =&gt; [...new Set(arr)] removeDuplicates([31, 56, 12, 31, 45, 12, 31]) //[ 31, 56, 12, 45 ] . [ 31, 56, 12, 45 ] . const dayDif = (date1, date2) =&gt; Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000) dayDif(new Date(&quot;2022-09-30&quot;), new Date(&quot;2022-10-13&quot;)) . 13 .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/29/Playing-around-Java-Script-copy.html",
            "relUrl": "/jupyter/2022/09/29/Playing-around-Java-Script-copy.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Vocab and Agile Notes",
            "content": "",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/09/29/NATM.html",
            "relUrl": "/2022/09/29/NATM.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Python Lists and Dictionaries",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Luke Riggins&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 17 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] # *I added bash as a language* print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) # *I changed the index from 0 to 3 so that the print command will print Bash instead of Python* print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Luke Riggins &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 17 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Luke Riggins&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Luke Riggins &lt;class &#39;str&#39;&gt; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Nyguen&quot;, &quot;DOB&quot;: &quot;October 3&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;EthanN45233@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;luker56233@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Volkswagon Passat&quot;] }) # PUTTING MY INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;Rancho Bernardo&quot;, &quot;Email&quot;: &quot;luke120204@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota&quot;] }) # PUTTING MY PARTER&#39;S INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Jeffery&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;jefferyl56783@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Honda Accord&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Nyguen&#39;, &#39;DOB&#39;: &#39;October 3&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;EthanN45233@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;luker56233@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Volkswagon Passat&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;Rancho Bernardo&#39;, &#39;Email&#39;: &#39;luke120204@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota&#39;]}, {&#39;FirstName&#39;: &#39;Jeffery&#39;, &#39;LastName&#39;: &#39;Lee&#39;, &#39;DOB&#39;: &#39;December 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;jefferyl56783@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Honda Accord&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Formatted output of List/Dictionary - for loop . Prepare a function to format the data . | Prepare a function to iterate through the list . | Activate your function . | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Alternate Methods for iteration . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Creating a For Loop with Index . for indx, record in enumerate(InfoDb): print(&quot;Record #&quot; + str(indx+1) + &quot;: &quot;, end = &quot;&quot;) print_data(record) . Record #1: Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Record #2: Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Record #3: Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Record #4: Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Reverse Order . for record in reversed(InfoDb): print_data(record) . Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/29/Dcitionaries-Lists-and-Dictionaries.html",
            "relUrl": "/jupyter/2022/09/29/Dcitionaries-Lists-and-Dictionaries.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Vocab copy",
            "content": "Vocab and Agile Notes . toc: true layout: post description: Vocab to learn categories: [markdown] title: Vocab and Agile Notes . Vocab Definition . Vocab | Explanation | . Sequence | More than one line of code | . Static Text | Text that doesn’t change | . Input | Code that is inserted by the user | . Output | The response the computer generates from the input | . Scrum Master | Manage scrum board and ensure agile framework is followed track issues and looks for opportunities for team to improve | . DevOps | Combination of cultural philosophies, practices, and tools that increase a team’s ability to deliver applications and services at high velocity | . Frontend Developer | Develops what users interact with and what the user sees | . Backend Developer | Develops what goes on behind the scenes, what the user doesn’t see, the technical stuff | . J.son | Transport information between systems | . Agile | Practices like pair programming, planning sessions, sprints… | . Sequence | Two or more lines of code | . Array | Stores collection of multiple items under single variable name | . Agile Notes 1.Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. . 2.Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage. . 3.Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. . 4.Business people and developers must work together daily throughout the project. . 5.Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. . 6.The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. . 7.Working software is the primary measure of progress. . 8.Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. . 9.Continuous attention to technical excellence and good design enhances agility. . 10.Simplicity–the art of maximizing the amount of work not done–is essential. . 11.The best architectures, requirements, and designs emerge from self-organizing teams. . 12.At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/09/28/Vocab-copy.html",
            "relUrl": "/2022/09/28/Vocab-copy.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Vocab and Agile Notes",
            "content": "",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/09/28/Agile-Notes-and-Vocab.html",
            "relUrl": "/2022/09/28/Agile-Notes-and-Vocab.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "JavaScript Tutorial",
            "content": "Issues . This should have taken only about 30 minutes or so. It took me like 5 hours. I had so many issues and it stemmed from my kernel because it did not pop up that I had Node.Js and instead only Python. I tried redownloading it many times and using isjsinstall in my terminal. I even tried seein gif I could do it on a friends computer and it did not work.I tried putting the code on websites that could run Javascript but they would not work because the code in the table only works in vscode in specific. I finished this Wednesday morning when I checked and when I clicked on Kernels Node.Js actually showed up and I completed it. . console.log(&quot;Hello, World!&quot;); . Hello, World! . var msg = &quot;Hello Luke&quot;; console.log(msg); . Hello Luke . function logIt(output) { console.log(output); } logIt(msg); . Hello Luke . console.log(&quot;Whats Up&quot;) logIt(&quot;What year is it?&quot;); logIt(2022) . How are you doing? What day is today? 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Different types of outputs&quot;) logItType(&quot;Whats Up&quot;); // String logItType(2022); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Different types of outputs string ; Whats Up number ; 2022 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, age, classOf) { this.name = name; this.age = age; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, age: this.age, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable devOps var devOps = new Person(&quot;Luke&quot;, &quot;17&quot;, 2023); devOps.setRole(&quot;DevOps&quot;); // output of Object and JSON/string associated with DevOps logItType(devOps); // object type is easy to work with in JavaScript logItType(devOps.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Luke&#39;, age: &#39;17&#39;, classOf: 2023, role: &#39;DevOps&#39; } string ; {&#34;name&#34;:&#34;Luke&#34;,&#34;age&#34;:&#34;17&#34;,&#34;classOf&#34;:2023,&#34;role&#34;:&#34;DevOps&#34;} . // define a student Array of Person(s) var members = [ new Person(&quot;James&quot;, &quot;16&quot;, 2024), new Person(&quot;Ethan&quot;, &quot;16&quot;, 2024), new Person(&quot;Jeffrey&quot;, &quot;17&quot;, 2023), ]; // define a classroom and build Classroom objects and json function Group(devOps, members){ // 1 DevOps, many members // start group with DevOps devOps.setRole(&quot;DevOps&quot;); this.devOps = devOps; this.group = [devOps]; // add each member to group this.members = members; this.members.forEach(members =&gt; { members.setRole(&quot;Members&quot;); this.group.push(members); }); // build json/string format of group this.json = []; this.group.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci group from formerly defined teacher and students compsci = new Group(devOps, members); // output of Objects and JSON in CompSci group logItType(compsci.group); // constructed classroom object logItType(compsci.group[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Luke&#39;, age: &#39;17&#39;, classOf: 2023, role: &#39;DevOps&#39; }, Person { name: &#39;James&#39;, age: &#39;16&#39;, classOf: 2024, role: &#39;Members&#39; }, Person { name: &#39;Ethan&#39;, age: &#39;16&#39;, classOf: 2024, role: &#39;Members&#39; }, Person { name: &#39;Jeffrey&#39;, age: &#39;17&#39;, classOf: 2023, role: &#39;Members&#39; } ] string ; Luke string ; {&#34;name&#34;:&#34;Luke&#34;,&#34;age&#34;:&#34;17&#34;,&#34;classOf&#34;:2023,&#34;role&#34;:&#34;DevOps&#34;} object ; { name: &#39;Luke&#39;, age: &#39;17&#39;, classOf: 2023, role: &#39;DevOps&#39; } . // define an HTML conversion &quot;method&quot; associated with Group Group.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;classOf&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.group for (var row of compsci.group) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameAgeclassOfRole . Luke | 17 | 2023 | DevOps | James | 16 | 2024 | Members | Ethan | 16 | 2024 | Members | Jeffrey | 17 | 2023 | Members | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%205/2022/09/27/Javascript-Tutorial.html",
            "relUrl": "/week%205/2022/09/27/Javascript-Tutorial.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Video Notes",
            "content": "Video Notes . I watched the video and there were a lot of clear talking points that I could take away from and learn. The first thing I realized that I had to do was to focus onreducing academic stress on myself. I should use resources like peers and teachers to help better myself and ask for help. I also need to form habits that I can carry with me later on in life because jsut because I am getting through now with my habits, does not mean I can’t improve. I also need to have the right attitude which ishaving a growth mindset. Ms Naidu says the biggest problem at Del Norte is collaboration because there are many kids who work hard and are commmitted. It could be way easier however, if they just talked. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/09/22/Video-Notes.html",
            "relUrl": "/2022/09/22/Video-Notes.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "NATM",
            "content": "Night at the Museum Blog . . The Dark colors are what originally caught my eye, but after a few seconds of analyzing I could tell that the artists intentions behind the piece were most likely to spread awarness of global warming. This is a really cool way to merge your personal beliefs with art. The next project I visited was in the art section where I saw this beautifully painted artpiece. . . Their program tracks the stocks of a few major companies such as GOOGLE, APPLE, and Tesla, which is also the data from their API. You can see this images tracks the stock price of a GOOGL stock price. The other CSP project I visited was made by another group from MORT P4. . . Next I found myself in the ceramics section, where there were plenty of well made pieces. This plate is the piece I liked the most because they got the San Diego Padres Logo and colors perfectly. Additionally the pumpkin was made perfectly and was extremely detailed. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/22/NATM.html",
            "relUrl": "/jupyter/2022/09/22/NATM.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Notes for Video on a Happy Life",
            "content": "I watched the video and there were a lot of clear talking points that I could take away from and learn. The first thing I realized that I had to do was to focus onreducing academic stress on myself. I should use resources like peers and teachers to help better myself and ask for help. I also need to form habits that I can carry with me later on in life because jsut because I am getting through now with my habits, does not mean I can&#39;t improve. I also need to have the right attitude which ishaving a growth mindset. Ms Naidu says the biggest problem at Del Norte is collaboration because there are many kids who work hard and are commmitted. It could be way easier however, if they just talked. .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/21/Psychology-and-the-Good-Life,-by-Laurie-Santos.html",
            "relUrl": "/jupyter/2022/09/21/Psychology-and-the-Good-Life,-by-Laurie-Santos.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "JavaScript Tutorial",
            "content": "JavaScript and Jupyter references . JavaScript is the most important language you need to learn as a frontend developer. Jupyter Notebooks is a convenient way to learn the language without the overhead of creating a full Website. Jupyter Notebooks had ChatGPT plugins to assist with design and troubleshooting problems. This Notebook has colors on HTML pages that were designed with a dark mode background. . JavaScript / Jupyter General References . W3Schools JS Reference - ChatGPT AI assistant for Chrome/Jupyter | Theme setup for Jupyter Article. Or do these commands from shell... Install pip: pip install jupyterthemes | Revert to original theme: jt -r | List themes: jt -l | Install with Theme, Name, Logo: jt -t onedork -T -N -kl | . | Chrome Dev Tools | . | Coding with jQuery . Jupyter Notebook GitHub, wget: https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2022-09-19-PBL-javascript_tutorial.ipynb | Markdown Fetch example in GitHub project for APCSP | HTML Static example in GitHub project for flask_portfolio | . | . output using HTML and CSS . Multiple cells are used to setup HTML in this lesson. Many of the JavaScript cells will use the output tag(s) to write into the HTML that has been setup. . %%html is used to setup HTML code block | &quot;style&quot; tag enables visuals customization | &quot;div&quot; tag is setup to receive data | . %%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade, I would like to see each student adapt this frontend work in their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Docker Server",
            "content": "Hello, my name is Luke. Aloha I like to play Basketball . .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/09/15/Docker-Server.html",
            "relUrl": "/2022/09/15/Docker-Server.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Quiz Code",
            "content": "Planning: I wanted to make a Geogrpahy quiz using country outlines with 4 options per question and 3 modes: Easy, Normal, and Hard mode. I finished three of the modes. . I made the quiz completely on my own through trial and error. The first thing I did was learn how to bind buttons with screens so the user could see if they got it wrong in Easy mode. The Normal Mode I used an On Event in the Ui controls and for each button I made sure it would show up if it was correct or incorrect right away and I put a timer on the set screen so the user could see if they got it right before the screen changed to the next question. I also added an info about why I created it. I also made a Settings page were they could press the music button to turn off and on the music if they wanted to listen to it while taking the quiz. I tried to make each mode as far as code be more and more difficult to code and more complex. I did it all myself and it took about 6 hours. . https://studio.code.org/projects/applab/bYO5QNczfGnFlLXQwivUmJwkX4no5v-YHkHYyfKbc5Y . onEvent(&quot;Play&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen1&quot;); }); onEvent(&quot;Info&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen20&quot;); }); onEvent(&quot;back&quot;, &quot;click&quot;, function(event) { setScreen(&quot;HomePage&quot;); }); onEvent(&quot;easy&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen2&quot;); playSound(&quot;sound://category_achievements/peaceful_win_1.mp3&quot;, false); }); onEvent(&quot;hard&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen12&quot;); playSound(&quot;sound://category_achievements/melodic_win_1.mp3&quot;, false); }); onEvent(&quot;normal&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen7&quot;); playSound(&quot;sound://category_explosion/melodic_loss_6.mp3&quot;, false); }); onEvent(&quot;italy&quot;, &quot;click&quot;, function(event ) { setScreen(&quot;screen3&quot;); }); onEvent(&quot;netherlands&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;germany&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;france&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;incorrect&quot;, &quot;click&quot;, function(event) { setScreen(&quot;HomePage&quot;); }); onEvent(&quot;UK&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen4&quot;); }); onEvent(&quot;Ireland&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;Australia&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;Spain&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;SK&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen5&quot;); }); onEvent(&quot;NK&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;Japan&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;China&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;Canada&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;Brazil&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen6&quot;); }); onEvent(&quot;Mexico&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;USA&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;India&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen21&quot;); }); onEvent(&quot;Egypt&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;Russia&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;Bang&quot;, &quot;click&quot;, function(event ) { setScreen(&quot;screen18&quot;); }); onEvent(&quot;end&quot;, &quot;click&quot;, function(event) { setScreen(&quot;HomePage&quot;); }); onEvent(&quot;Malay&quot;, &quot;click&quot;, function(event) { showElement(&quot;rightt&quot;); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screenchile&quot;); }, 2000); }); onEvent(&quot;Philli&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screenchile&quot;); }, 2000); }); onEvent(&quot;NZ&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screenchile&quot;); }, 2000); }); onEvent(&quot;Indo&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screenchile&quot;); }, 2000); }); onEvent(&quot;chile&quot;, &quot;click&quot;, function(event) { showElement(&quot;rightt2&quot;); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen9&quot;); }, 2000); }); onEvent(&quot;ecuador&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg2&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen9&quot;); }, 2000); }); onEvent(&quot;suriname&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg2&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen9&quot;); }, 2000); }); onEvent(&quot;peru&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg2&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen9&quot;); }, 2000); }); onEvent(&quot;pakistan&quot;, &quot;click&quot;, function(event ) { showElement(&quot;righttTwo&quot;); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { setScreen(&quot;swiss&quot;); }, 2000); }); onEvent(&quot;Iran&quot;, &quot;click&quot;, function(event) { showElement(&quot;wronggtwo&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;swiss&quot;); }, 2000); }); onEvent(&quot;Iraq&quot;, &quot;click&quot;, function(event) { showElement(&quot;wronggtwo&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;swiss&quot;); }, 2000); }); onEvent(&quot;Saudi&quot;, &quot;click&quot;, function(event ) { showElement(&quot;wronggtwo&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;swiss&quot;); }, 2000); }); onEvent(&quot;swis&quot;, &quot;click&quot;, function(event ) { showElement(&quot;rightt3&quot;); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen11&quot;); }, 2000); }); onEvent(&quot;Czechia&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg3&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen11&quot;); }, 2000); }); onEvent(&quot;Hungary&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg3&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen11&quot;); }, 2000); }); onEvent(&quot;romania&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg3&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;screen11&quot;); }, 2000); }); onEvent(&quot;tanzania&quot;, &quot;click&quot;, function(event) { showElement(&quot;rightt4&quot;); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { setScreen(&quot;HomePage&quot;); }, 2000); }); onEvent(&quot;morocco&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg4&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;HomePage&quot;); }, 2000); }); onEvent(&quot;repofcongo&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg4&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;HomePage&quot;); }, 2000); }); onEvent(&quot;zimbabwe&quot;, &quot;click&quot;, function(event) { showElement(&quot;wrongg4&quot;); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { setScreen(&quot;HomePage&quot;); }, 2000); }); onEvent(&quot;Settings1&quot;, &quot;click&quot;, function(event) { setScreen(&quot;screen22&quot;); }); onEvent(&quot;Back2&quot;, &quot;click&quot;, function(event) { setScreen(&quot;HomePage&quot;); }); onEvent(&quot;Musicc&quot;, &quot;click&quot;, function(event) { playSound(&quot;sound://category_background/gametime.mp3&quot;, false); textLabel(&quot;Musicc&quot;, &quot;Hi&quot;); }); var Hardscore = 0; onEvent(&quot;Cape&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+1; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { showElement(&quot;button1&quot;); showElement(&quot;button2&quot;); showElement(&quot;button3&quot;); showElement(&quot;button4&quot;); showElement(&quot;image26&quot;); hideElement(&quot;Sey&quot;); hideElement(&quot;Mauritius&quot;); hideElement(&quot;Maldives&quot;); hideElement(&quot;Cape&quot;); hideElement(&quot;image14&quot;); }, 2000); }); onEvent(&quot;Sey&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button1&quot;); showElement(&quot;button2&quot;); showElement(&quot;button3&quot;); showElement(&quot;button4&quot;); showElement(&quot;image26&quot;); hideElement(&quot;Sey&quot;); hideElement(&quot;Mauritius&quot;); hideElement(&quot;Maldives&quot;); hideElement(&quot;Cape&quot;); hideElement(&quot;image14&quot;); }, 2000); }); onEvent(&quot;Mauritius&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button1&quot;); showElement(&quot;button2&quot;); showElement(&quot;button3&quot;); showElement(&quot;button4&quot;); showElement(&quot;image26&quot;); hideElement(&quot;Sey&quot;); hideElement(&quot;Mauritius&quot;); hideElement(&quot;Maldives&quot;); hideElement(&quot;Cape&quot;); hideElement(&quot;image14&quot;); }, 2000); }); onEvent(&quot;Maldives&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button1&quot;); showElement(&quot;button2&quot;); showElement(&quot;button3&quot;); showElement(&quot;button4&quot;); showElement(&quot;image26&quot;); hideElement(&quot;Sey&quot;); hideElement(&quot;Mauritius&quot;); hideElement(&quot;Maldives&quot;); hideElement(&quot;Cape&quot;); hideElement(&quot;image14&quot;); }, 2000); }); onEvent(&quot;button8&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+1; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button9&quot;); showElement(&quot;button10&quot;); showElement(&quot;button11&quot;); showElement(&quot;button12&quot;); showElement(&quot;image28&quot;); hideElement(&quot;button5&quot;); hideElement(&quot;button6&quot;); hideElement(&quot;button7&quot;); hideElement(&quot;button8&quot;); hideElement(&quot;image27&quot;); }, 2000); }); onEvent(&quot;button3&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+1; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { showElement(&quot;button5&quot;); showElement(&quot;button6&quot;); showElement(&quot;button7&quot;); showElement(&quot;button8&quot;); showElement(&quot;image27&quot;); hideElement(&quot;button1&quot;); hideElement(&quot;button2&quot;); hideElement(&quot;button3&quot;); hideElement(&quot;button4&quot;); hideElement(&quot;image26&quot;); }, 2000); }); onEvent(&quot;button1&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button5&quot;); showElement(&quot;button6&quot;); showElement(&quot;button7&quot;); showElement(&quot;button8&quot;); showElement(&quot;image27&quot;); hideElement(&quot;button1&quot;); hideElement(&quot;button2&quot;); hideElement(&quot;button3&quot;); hideElement(&quot;button4&quot;); hideElement(&quot;image26&quot;); }, 2000); }); onEvent(&quot;button2&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button5&quot;); showElement(&quot;button6&quot;); showElement(&quot;button7&quot;); showElement(&quot;button8&quot;); showElement(&quot;image27&quot;); hideElement(&quot;button1&quot;); hideElement(&quot;button2&quot;); hideElement(&quot;button3&quot;); hideElement(&quot;button4&quot;); hideElement(&quot;image26&quot;); }, 2000); }); onEvent(&quot;button4&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button5&quot;); showElement(&quot;button6&quot;); showElement(&quot;button7&quot;); showElement(&quot;button8&quot;); showElement(&quot;image27&quot;); hideElement(&quot;button1&quot;); hideElement(&quot;button2&quot;); hideElement(&quot;button3&quot;); hideElement(&quot;button4&quot;); hideElement(&quot;image26&quot;); }, 2000); }); onEvent(&quot;button5&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button9&quot;); showElement(&quot;button10&quot;); showElement(&quot;button11&quot;); showElement(&quot;button12&quot;); showElement(&quot;image28&quot;); hideElement(&quot;button5&quot;); hideElement(&quot;button6&quot;); hideElement(&quot;button7&quot;); hideElement(&quot;button8&quot;); hideElement(&quot;image27&quot;); }, 2000); }); onEvent(&quot;button6&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button9&quot;); showElement(&quot;button10&quot;); showElement(&quot;button11&quot;); showElement(&quot;button12&quot;); showElement(&quot;image28&quot;); hideElement(&quot;button5&quot;); hideElement(&quot;button6&quot;); hideElement(&quot;button7&quot;); hideElement(&quot;button8&quot;); hideElement(&quot;image27&quot;); }, 2000); }); onEvent(&quot;button7&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button9&quot;); showElement(&quot;button10&quot;); showElement(&quot;button11&quot;); showElement(&quot;button12&quot;); showElement(&quot;image28&quot;); hideElement(&quot;button5&quot;); hideElement(&quot;button6&quot;); hideElement(&quot;button7&quot;); hideElement(&quot;button8&quot;); hideElement(&quot;image27&quot;); }, 2000); }); onEvent(&quot;button9&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+1; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); setTimeout(function() { showElement(&quot;button13&quot;); showElement(&quot;button14&quot;); showElement(&quot;button15&quot;); showElement(&quot;button16&quot;); showElement(&quot;image29&quot;); hideElement(&quot;button9&quot;); hideElement(&quot;button10&quot;); hideElement(&quot;button11&quot;); hideElement(&quot;button12&quot;); hideElement(&quot;image28&quot;); }, 2000); }); onEvent(&quot;button10&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button13&quot;); showElement(&quot;button14&quot;); showElement(&quot;button15&quot;); showElement(&quot;button16&quot;); showElement(&quot;image29&quot;); hideElement(&quot;button9&quot;); hideElement(&quot;button10&quot;); hideElement(&quot;button11&quot;); hideElement(&quot;button12&quot;); hideElement(&quot;image28&quot;); }, 2000); }); onEvent(&quot;button11&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button13&quot;); showElement(&quot;button14&quot;); showElement(&quot;button15&quot;); showElement(&quot;button16&quot;); showElement(&quot;image29&quot;); hideElement(&quot;button9&quot;); hideElement(&quot;button10&quot;); hideElement(&quot;button11&quot;); hideElement(&quot;button12&quot;); hideElement(&quot;image28&quot;); }, 2000); }); onEvent(&quot;button12&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); setTimeout(function() { showElement(&quot;button13&quot;); showElement(&quot;button14&quot;); showElement(&quot;button15&quot;); showElement(&quot;button16&quot;); showElement(&quot;image29&quot;); hideElement(&quot;button9&quot;); hideElement(&quot;button10&quot;); hideElement(&quot;button11&quot;); hideElement(&quot;button12&quot;); hideElement(&quot;image28&quot;); }, 2000); }); onEvent(&quot;button13&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setTimeout(function() { setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); setProperty(&quot;Scoree&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;y&quot;, 150); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); hideElement(&quot;button16&quot;); hideElement(&quot;button15&quot;); hideElement(&quot;button14&quot;); hideElement(&quot;button13&quot;); hideElement(&quot;image29&quot;); showElement(&quot;zzzz&quot;); hideElement(&quot;label12&quot;); hideElement(&quot;image9&quot;); }, 2000); }); onEvent(&quot;button14&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+1; setTimeout(function() { setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); setProperty(&quot;Scoree&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;y&quot;, 150); playSound(&quot;sound://category_male_voiceover/correct_male.mp3&quot;, false); hideElement(&quot;button16&quot;); hideElement(&quot;button15&quot;); hideElement(&quot;button14&quot;); hideElement(&quot;button13&quot;); hideElement(&quot;image29&quot;); showElement(&quot;zzzz&quot;); hideElement(&quot;label12&quot;); hideElement(&quot;image9&quot;); }, 2000); }); onEvent(&quot;button15&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setTimeout(function() { setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); setProperty(&quot;Scoree&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;y&quot;, 150); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); hideElement(&quot;button16&quot;); hideElement(&quot;button15&quot;); hideElement(&quot;button14&quot;); hideElement(&quot;button13&quot;); hideElement(&quot;image29&quot;); showElement(&quot;zzzz&quot;); hideElement(&quot;label12&quot;); hideElement(&quot;image9&quot;); }, 2000); }); onEvent(&quot;button16&quot;, &quot;click&quot;, function(event) { Hardscore = Hardscore+0; setTimeout(function() { setProperty(&quot;zero&quot;, &quot;text&quot;, Hardscore); setProperty(&quot;Scoree&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;font-size&quot;, 60); setProperty(&quot;zero&quot;, &quot;y&quot;, 150); playSound(&quot;sound://category_female_voiceover/wrong_female.mp3&quot;, false); hideElement(&quot;button16&quot;); hideElement(&quot;button15&quot;); hideElement(&quot;button14&quot;); hideElement(&quot;button13&quot;); hideElement(&quot;image29&quot;); showElement(&quot;zzzz&quot;); hideElement(&quot;label12&quot;); hideElement(&quot;image9&quot;); }, 2000); }); onEvent(&quot;zzzz&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen1&quot;); }); .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/13/Quiz.html",
            "relUrl": "/jupyter/2022/09/13/Quiz.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Youtube Channel",
            "content": "&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rFY2X6Y4tPY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt; .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/12/Youtube-Channel.html",
            "relUrl": "/jupyter/2022/09/12/Youtube-Channel.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "Python Lists and Dictionaries",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Luke Riggins&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 17 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] # *I added bash as a language* print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) # *I changed the index from 0 to 3 so that the print command will print Bash instead of Python* print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Luke Riggins &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 17 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Luke Riggins&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Luke Riggins &lt;class &#39;str&#39;&gt; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Nyguen&quot;, &quot;DOB&quot;: &quot;October 3&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;EthanN45233@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;luker56233@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Volkswagon Passat&quot;] }) # PUTTING MY INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;Rancho Bernardo&quot;, &quot;Email&quot;: &quot;luke120204@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota&quot;] }) # PUTTING MY PARTER&#39;S INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Jeffery&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;jefferyl56783@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Honda Accord&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Nyguen&#39;, &#39;DOB&#39;: &#39;October 3&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;EthanN45233@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;luker56233@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Volkswagon Passat&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;Rancho Bernardo&#39;, &#39;Email&#39;: &#39;luke120204@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota&#39;]}, {&#39;FirstName&#39;: &#39;Jeffery&#39;, &#39;LastName&#39;: &#39;Lee&#39;, &#39;DOB&#39;: &#39;December 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;jefferyl56783@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Honda Accord&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Formatted output of List/Dictionary - for loop . Prepare a function to format the data . | Prepare a function to iterate through the list . | Activate your function . | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Alternate Methods for iteration . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Creating a For Loop with Index . for indx, record in enumerate(InfoDb): print(&quot;Record #&quot; + str(indx+1) + &quot;: &quot;, end = &quot;&quot;) print_data(record) . Record #1: Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Record #2: Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Record #3: Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Record #4: Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Reverse Order . for record in reversed(InfoDb): print_data(record) . Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Ethan Nyguen Residence: San Diego Birth Day: October 3 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2022/09/12/Dcitionaries-Lists-and-Dictionaries.html",
            "relUrl": "/jupyter/2022/09/12/Dcitionaries-Lists-and-Dictionaries.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Changing Remote Theme Temporarily",
            "content": "Changed value for key remote_theme . . Reverted back: . . How I did it . I went to APCSP website and copied the midnight code which is pages-themes/midnight@v0.2.0 and put it in config in place of jekyll/minima under remote themes . .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/week%202/2022/09/08/Changing-Theme-Temp.html",
            "relUrl": "/week%202/2022/09/08/Changing-Theme-Temp.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Vocab and Agile Notes",
            "content": "",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2022/08/28/Agile-Notes-and-vocabulary.html",
            "relUrl": "/2022/08/28/Agile-Notes-and-vocabulary.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "College Apps Timeline",
            "content": "Python Lists and Dictionaries . toc: true layout: post description: How to use Bash. categories: [markdown] title: Lukes Second Blog . Timeline for when to finish my College APPs . UC Prompts . Letters of Rec (Completed) . UC Prompt 1 (Completed) UC Prompt 4 (Completed) UC Prompt 6 (Completed) UC Prompt 7 (Completed) . Common App . UW Complete Common App supplemental essay (Completed) Complete Common App Application (Finish by September 1st) Covid Supplement (Finish by September 1st) . University of Oregon . Complete Common App supplemental essay (Completed) Complete Common App Application (Finish by September 8th) Covid Supplement (Finish by September 8th) . Boston University . Complete Common App supplemental essay (Finish by September 15th) Complete Common App Application (Finish by September 15th) Covid Supplement (Finish by September 15th) . Santa Clara . Complete Common App supplemental essay (Finish by September 22) Complete Common App Application (Finish by September 22) Covid Supplement (Finish by September 22) Complete Essay 2 (Finish by September 22) . NYU . Complete Common App supplemental essay (Finish by September 29) Complete Common App Application (Finish by September 29) Covid Supplement (Finish by September 29) Complete Essay 2 (Finish by September 29) . Indiana Bloomington . Complete Common App supplemental essay (Finish by October 6) Complete Common App Application (Finish by October 6) Covid Supplement (Finish by October 6) . USC . Complete Common App supplemental essay (Finish by October 13) Complete Common App Application (Finish by October 13) Covid Supplement (Finish by October 13) Complete Essay 2 (Finish by October 13) . University of Virginia . Complete Common App supplemental essay (Finish by October 21) Complete Common App Application (Finish by October 21) Covid Supplement (Finish by October 21) Complete Essay 2 (Finish by October 21) Complete CSS Profile (Finish by October 21) . University of Michigan . Complete Common App supplemental essay (Finish by October 28) Complete Common App Application (Finish by October 28) Covid Supplement (Finish by October 28) Complete Essay 2 (Finish by October 28) . CMC . Complete CMC Application (Finish by November 4) . ##CSU . SDSU . COmplete CSU Application (Finish by November 11) . Cal Poly SLO . Complete CSU Application (Finish by November 18) . Mcgill Regular Decision by January 15th .",
            "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/2020/01/14/College-Apps-Timeline.html",
            "relUrl": "/2020/01/14/College-Apps-Timeline.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rigtig123.github.io/Rigs-2-Ds-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}