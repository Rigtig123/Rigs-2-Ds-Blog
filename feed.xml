<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://rigtig123.github.io/Rigs-2-Ds-Blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rigtig123.github.io/Rigs-2-Ds-Blog/" rel="alternate" type="text/html" /><updated>2023-01-17T15:27:23-06:00</updated><id>https://rigtig123.github.io/Rigs-2-Ds-Blog/feed.xml</id><title type="html">Rigs Radical Blog 2</title><subtitle>An easy to use blogging platform with support for Jupyter Notebooks.</subtitle><entry><title type="html">Model And Object Oriented Model</title><link href="https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/01/17/Model-and-Object-Oriented-Model.ipynb" rel="alternate" type="text/html" title="Model And Object Oriented Model" /><published>2023-01-17T00:00:00-06:00</published><updated>2023-01-17T00:00:00-06:00</updated><id>https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/01/17/Model-and-Object-Oriented-Model</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "Class and Object Terms\n", "The foundations of Object-Oriented Programming is defining a Class\n", "\n", "In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables.\n", "\n", "A Class has ...\n", "- a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self\n", "- a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition.\n", "- An Object is created from the Class/Template. Characteristics of objects ...\n", "- an Object is an Instance of the Class/Template\n", "- there can be many Objects created from the same Class\n", "- each Object contains its own Instance Data\n", "- the data is setup by the Constructor, this is the \"init\" method in a Python class\n", "- all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method())\n", "\n", "A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ...\n", "- @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name())\n", "- @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = \"John\" versus object.set_name(\"John\"))\n", "- observe all instance data (self._name, self.email ...) are prefixed with \"\", this convention allows setters and getters to work with more natural variable name (name, email ...)\n" ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "Class and Object Code" ] }, { "cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Test 1, find user 3\n", "name: \"Thomas Edison\", id: \"toby\", psw: \"sha256$pn2...\"\n", "name: \"Nicholas Tesla\", id: \"nick\", psw: \"sha256$u0g...\"\n", "* name: \"Alexander Graham Bell\", id: \"lex\", psw: \"sha256$mHE...\"\n", "name: \"Eli Whitney\", id: \"eli\", psw: \"sha256$hM5...\"\n", "name: \"Hedy Lemarr\", id: \"hedy\", psw: \"sha256$YiQ...\"\n", "Test 2, change user 3\n", "name: \"Thomas Edison\", id: \"toby\", psw: \"sha256$pn2...\"\n", "name: \"Nicholas Tesla\", id: \"nick\", psw: \"sha256$u0g...\"\n", "* name: \"John Mortensen\", id: \"jm1021\", psw: \"sha256$fw0...\"\n", "name: \"Eli Whitney\", id: \"eli\", psw: \"sha256$hM5...\"\n", "name: \"Hedy Lemarr\", id: \"hedy\", psw: \"sha256$YiQ...\"\n", "Test 3, make a dictionary\n", "[{\"_name\": \"Thomas Edison\", \"_uid\": \"toby\", \"_password\": \"sha256$pn2SlfuWJNYSdWuf$c44366eb6ed3b16595871f347ec91f3d3ce8f8152d013b81eaa3577e2c79c7d3\"}, {\"_name\": \"Nicholas Tesla\", \"_uid\": \"nick\", \"_password\": \"sha256$u0gEQlBSRzzKVbdZ$2357e295b91cbe7ad41202e6884c0c39bfff534b0d5a4dff74f58c8f41449cd5\"}, {\"_name\": \"John Mortensen\", \"_uid\": \"jm1021\", \"_password\": \"sha256$fw0sZwDl8V3d05Xr$bfd7e7d75c82916494d7b2af6b219fb0151964713874fa08232839b13efe9649\"}, {\"_name\": \"Eli Whitney\", \"_uid\": \"eli\", \"_password\": \"sha256$hM5X0RZi14Hs3GRq$c86cfb7a810633541d209b3da7485bfa09c7abcdd1d186a23eb1800084defb80\"}, {\"_name\": \"Hedy Lemarr\", \"_uid\": \"hedy\", \"_password\": \"sha256$YiQRztA1yx5f8WJq$bf26508cecc10aed115c4813d765bcf16b2598d18d41ac4ef428beeb7913330e\"}]\n", "Test 4, make a dictionary\n", "[{\"_name\": \"Thomas Edison\", \"_uid\": \"toby\", \"_password\": \"sha256$pn2SlfuWJNYSdWuf$c44366eb6ed3b16595871f347ec91f3d3ce8f8152d013b81eaa3577e2c79c7d3\"}, {\"_name\": \"Nicholas Tesla\", \"_uid\": \"nick\", \"_password\": \"sha256$u0gEQlBSRzzKVbdZ$2357e295b91cbe7ad41202e6884c0c39bfff534b0d5a4dff74f58c8f41449cd5\"}, {\"_name\": \"John Mortensen\", \"_uid\": \"jm1021\", \"_password\": \"sha256$fw0sZwDl8V3d05Xr$bfd7e7d75c82916494d7b2af6b219fb0151964713874fa08232839b13efe9649\"}, {\"_name\": \"Eli Whitney\", \"_uid\": \"eli\", \"_password\": \"sha256$hM5X0RZi14Hs3GRq$c86cfb7a810633541d209b3da7485bfa09c7abcdd1d186a23eb1800084defb80\"}, {\"_name\": \"Hedy Lemarr\", \"_uid\": \"hedy\", \"_password\": \"sha256$YiQRztA1yx5f8WJq$bf26508cecc10aed115c4813d765bcf16b2598d18d41ac4ef428beeb7913330e\"}]\n" ] } ], "source": [ "# Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface)\n", "# A gateway in necessary as a web server cannot communicate directly with Python.\n", "# In this case, imports are focused on generating hash code to protect passwords.\n", "from werkzeug.security import generate_password_hash, check_password_hash\n", "import json\n", "\n", "# Define a User Class/Template\n", "# -- A User represents the data we want to manage\n", "class User: \n", " # constructor of a User object, initializes the instance variables within object (self)\n", " def __init__(self, name, uid, password):\n", " self._name = name # variables with self prefix become part of the object, \n", " self._uid = uid\n", " self.set_password(password)\n", "\n", " # a name getter method, extracts name from object\n", " @property\n", " def name(self):\n", " return self._name\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @name.setter\n", " def name(self, name):\n", " self._name = name\n", " \n", " # a getter method, extracts email from object\n", " @property\n", " def uid(self):\n", " return self._uid\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @uid.setter\n", " def uid(self, uid):\n", " self._uid = uid\n", " \n", " # check if uid parameter matches user id in object, return boolean\n", " def is_uid(self, uid):\n", " return self._uid == uid\n", " \n", " @property\n", " def password(self):\n", " return self._password[0:10] + \"...\" # because of security only show 1st characters\n", "\n", " # update password, this is conventional setter\n", " def set_password(self, password):\n", " \"\"\"Create a hashed password.\"\"\"\n", " self._password = generate_password_hash(password, method='sha256')\n", "\n", " # check password parameter versus stored/encrypted password\n", " def is_password(self, password):\n", " \"\"\"Check against hashed password.\"\"\"\n", " result = check_password_hash(self._password, password)\n", " return result\n", " \n", " # output content using str(object) in human readable form, uses getter\n", " def __str__(self):\n", " return f'name: \"{self.name}\", id: \"{self.uid}\", psw: \"{self.password}\"'\n", "\n", " # output command to recreate the object, uses attribute directly\n", " def __repr__(self):\n", " return f'Person(name={self._name}, uid={self._uid}, password={self._password})'\n", "\n", "\n", "# tester method to print users\n", "def tester(users, uid, psw):\n", " result = None\n", " for user in users:\n", " # test for match in database\n", " if user.uid == uid and user.is_password(psw): # check for match\n", " print(\"* \", end=\"\")\n", " result = user\n", " # print using __str__ method\n", " print(str(user))\n", " return result\n", " \n", "\n", "# place tester code inside of special if! This allows include without tester running\n", "if __name__ == \"__main__\":\n", "\n", " # define user objects\n", " u1 = User(name='Thomas Edison', uid='toby', password='123toby')\n", " u2 = User(name='Nicholas Tesla', uid='nick', password='123nick')\n", " u3 = User(name='Alexander Graham Bell', uid='lex', password='123lex')\n", " u4 = User(name='Eli Whitney', uid='eli', password='123eli')\n", " u5 = User(name='Hedy Lemarr', uid='hedy', password='123hedy')\n", "\n", " # put user objects in list for convenience\n", " users = [u1, u2, u3, u4, u5]\n", "\n", " # Find user\n", " print(\"Test 1, find user 3\")\n", " u = tester(users, u3.uid, \"123lex\")\n", "\n", "\n", " # Change user\n", " print(\"Test 2, change user 3\")\n", " u.name = \"John Mortensen\"\n", " u.uid = \"jm1021\"\n", " u.set_password(\"123qwerty\")\n", " u = tester(users, u.uid, \"123qwerty\")\n", "\n", "\n", " # Make dictionary\n", " ''' \n", " The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. \n", " Every object in Python has an attribute that is denoted by __dict__. \n", " Use the json.dumps() method to convert the list of Users to a JSON string.\n", " '''\n", " print(\"Test 3, make a dictionary\")\n", " json_string = json.dumps([user.__dict__ for user in users]) \n", " print(json_string)\n", "\n", " print(\"Test 4, make a dictionary\")\n", " json_string = json.dumps([vars(user) for user in users]) \n", " print(json_string)" ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "Hacks\n", "Add new attributes/variables to the Class. Make class specific to your CPT work.\n", "\n", "- Add classOf attribute to define year of graduation\n", " - Add setter and getter for classOf\n", "- Add dob attribute to define date of birth\n", " - This will require investigation into Python datetime objects as shown in example code below\n", " - Add setter and getter for dob\n", "- Add instance variable for age, make sure if dob changes age changes\n", " - Add getter for age, but don't add/allow setter for age\n", "- Update and format tester function to work with changes\n", "\n", "Start a class design for each of your own Full Stack CPT sections of your project\n", "\n", "- Use new code cell in this notebook\n", "- Define init and self attributes\n", "- Define setters and getters\n", "- Make a tester" ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "Start Code for Hacks" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "from datetime import date\n", "\n", "def calculate_age(born):\n", " today = date.today()\n", " return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n", "\n", "dob = date(2004, 12, 31)\n", "age = calculate_age(dob)\n", "print(age)" ] }, { "cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "2022-23 NBA Stats\n", "JSON ready string for 4 players:\n", " [User(name=Lebron James, current_team=Los Angeles Lakers, stats=Rec Pts: 38,024), User(name=Kevin Durant, current_team=Brooklyn Nets, stats=Rush Pts: 26,684), User(name=Giannis Antetokounmpo, current_team=Milwaukee Bucks, stats=Rec Pts: 15,406), User(name=Nikola Jokic, current_team=Denver Nuggets, stats=Rec Pts: 11,327)] \n", "\n", "Values for Lebron James:\n", "Raw Variables of object:\n", " {'_name': 'Lebron James', '_team': 'Los Angeles Lakers', '_stats': 'Rec Pts: 38,024'} \n", "\n", "Raw Attributes and Methods of object:\n", " ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_name', '_stats', '_team', 'dictionary', 'name', 'stats', 'team', 'uid'] \n", "\n", "Representation to Re-Create the object:\n", " User(name=Lebron James, current_team=Los Angeles Lakers, stats=Rec Pts: 38,024) \n", "\n", "Values for Kevin Durant:\n", "Raw Variables of object:\n", " {'_name': 'Kevin Durant', '_team': 'Brooklyn Nets', '_stats': 'Rush Pts: 26,684'} \n", "\n", "Raw Attributes and Methods of object:\n", " ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_name', '_stats', '_team', 'dictionary', 'name', 'stats', 'team', 'uid'] \n", "\n", "Representation to Re-Create the object:\n", " User(name=Kevin Durant, current_team=Brooklyn Nets, stats=Rush Pts: 26,684) \n", "\n", "Values for Giannis Antetokounmpo:\n", "Raw Variables of object:\n", " {'_name': 'Giannis Antetokounmpo', '_team': 'Milwaukee Bucks', '_stats': 'Rec Pts: 15,406'} \n", "\n", "Raw Attributes and Methods of object:\n", " ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_name', '_stats', '_team', 'dictionary', 'name', 'stats', 'team', 'uid'] \n", "\n", "Representation to Re-Create the object:\n", " User(name=Giannis Antetokounmpo, current_team=Milwaukee Bucks, stats=Rec Pts: 15,406) \n", "\n", "Values for Nikola Jokic:\n", "Raw Variables of object:\n", " {'_name': 'Nikola Jokic', '_team': 'Denver Nuggets', '_stats': 'Rec Pts: 11,327'} \n", "\n", "Raw Attributes and Methods of object:\n", " ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_name', '_stats', '_team', 'dictionary', 'name', 'stats', 'team', 'uid'] \n", "\n", "Representation to Re-Create the object:\n", " User(name=Nikola Jokic, current_team=Denver Nuggets, stats=Rec Pts: 11,327) \n", "\n" ] } ], "source": [ "from datetime import date\n", "import json\n", "\n", "class Player: \n", "\n", " def __init__(self, name, team, stats):\n", " self._name = name # variables with self prefix become part of the object, \n", " self._team = team\n", " self._stats = stats\n", " \n", " @property\n", " def name(self):\n", " return self._name\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @name.setter\n", " def name(self, name):\n", " self._name = name\n", " \n", " # a getter method, extracts email from object\n", " @property\n", " def team(self):\n", " return self._team\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @team.setter\n", " def uid(self, team):\n", " self._team = team\n", " \n", " @property\n", " def stats(self):\n", " return self._stats\n", "\n", " @stats.setter\n", " def stats(self, stats):\n", " self._stats = stats\n", "\n", " @property\n", " def dictionary(self):\n", " dict = {\n", " \"name\" : self.name,\n", " \"current_team\" : self.team,\n", " \"stats\" : self.stats,\n", " }\n", " return dict\n", " \n", " # output content using json dumps, this is ready for API response\n", " def __str__(self):\n", " return json.dumps(self.dictionary)\n", " \n", " # output command to recreate the object, uses attribute directly\n", " def __repr__(self):\n", " return f'User(name={self._name}, current_team={self.team}, stats={self._stats})'\n", " \n", "\n", "if __name__ == \"__main__\":\n", " p1 = Player(name='Lebron James', team='Los Angeles Lakers', stats='Rec Pts: 38,024')\n", " p2 = Player(name='Kevin Durant', team='Brooklyn Nets', stats='Rush Pts: 26,684')\n", " p3 = Player(name='Giannis Antetokounmpo', team='Milwaukee Bucks', stats='Rec Pts: 15,406')\n", " p4 = Player(name='Nikola Jokic', team='Denver Nuggets', stats='Rec Pts: 11,327')\n", " players = [p1, p2, p3, p4]\n", " print(\"2022-23 NBA Stats\")\n", " print(\"JSON ready string for 4 players:\\n\", players, \"\\n\") \n", " print(\"Values for Lebron James:\")\n", " print(\"Raw Variables of object:\\n\", vars(p1), \"\\n\") \n", " print(\"Raw Attributes and Methods of object:\\n\", dir(p1), \"\\n\")\n", " print(\"Representation to Re-Create the object:\\n\", repr(p1), \"\\n\") \n", " print(\"Values for Kevin Durant:\")\n", " print(\"Raw Variables of object:\\n\", vars(p2), \"\\n\") \n", " print(\"Raw Attributes and Methods of object:\\n\", dir(p2), \"\\n\")\n", " print(\"Representation to Re-Create the object:\\n\", repr(p2), \"\\n\") \n", " print(\"Values for Giannis Antetokounmpo:\")\n", " print(\"Raw Variables of object:\\n\", vars(p3), \"\\n\") \n", " print(\"Raw Attributes and Methods of object:\\n\", dir(p3), \"\\n\")\n", " print(\"Representation to Re-Create the object:\\n\", repr(p3), \"\\n\") \n", " print(\"Values for Nikola Jokic:\")\n", " print(\"Raw Variables of object:\\n\", vars(p4), \"\\n\") \n", " print(\"Raw Attributes and Methods of object:\\n\", dir(p4), \"\\n\")\n", " print(\"Representation to Re-Create the object:\\n\", repr(p4), \"\\n\") " ] } ], "metadata": { "kernelspec": { "display_name": "Python 3", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.10.7" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">4 Collegeboard corrections using rubric</title><link href="https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2018/2023/01/17/Four-Collegeboard-corrections-copy.html" rel="alternate" type="text/html" title="4 Collegeboard corrections using rubric" /><published>2023-01-17T00:00:00-06:00</published><updated>2023-01-17T00:00:00-06:00</updated><id>https://rigtig123.github.io/Rigs-2-Ds-Blog/week%2018/2023/01/17/Four-Collegeboard-corrections%20copy</id><author><name></name></author><category term="Week 18" /><summary type="html"><![CDATA[4 Collegeboard corrections using rubric]]></summary></entry><entry><title type="html">Python Lists and Dictionaries</title><link href="https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/01/16/Dcitionaries-Lists-and-Dictionaries.html" rel="alternate" type="text/html" title="Python Lists and Dictionaries" /><published>2023-01-16T00:00:00-06:00</published><updated>2023-01-16T00:00:00-06:00</updated><id>https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/01/16/Dcitionaries-Lists-and-Dictionaries</id><author><name></name></author><category term="jupyter" /><summary type="html"><![CDATA[Code.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://rigtig123.github.io/Rigs-2-Ds-Blog/images/chart-preview.png" /><media:content medium="image" url="https://rigtig123.github.io/Rigs-2-Ds-Blog/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Vocab and Agile Notes</title><link href="https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/01/16/NATM.html" rel="alternate" type="text/html" title="Vocab and Agile Notes" /><published>2023-01-16T00:00:00-06:00</published><updated>2023-01-16T00:00:00-06:00</updated><id>https://rigtig123.github.io/Rigs-2-Ds-Blog/2023/01/16/NATM</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Playing around with Java Script</title><link href="https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/01/16/Playing-around-Java-Script-copy.html" rel="alternate" type="text/html" title="Playing around with Java Script" /><published>2023-01-16T00:00:00-06:00</published><updated>2023-01-16T00:00:00-06:00</updated><id>https://rigtig123.github.io/Rigs-2-Ds-Blog/jupyter/2023/01/16/Playing-around-Java-Script-copy</id><author><name></name></author><category term="jupyter" /><summary type="html"><![CDATA[Code stuff.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://rigtig123.github.io/Rigs-2-Ds-Blog/images/chart-preview.png" /><media:content medium="image" url="https://rigtig123.github.io/Rigs-2-Ds-Blog/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>